
time_base_10micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e20  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001fe4  08001fe4  00011fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ff4  08001ff4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001ff4  08001ff4  00011ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ffc  08001ffc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ffc  08001ffc  00011ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002000  08002000  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002010  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002010  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d9d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d2  00000000  00000000  00029dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002be30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021765  00000000  00000000  0002c6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b22c  00000000  00000000  0004de5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdffd  00000000  00000000  00059089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00127086  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002778  00000000  00000000  001270d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001fcc 	.word	0x08001fcc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08001fcc 	.word	0x08001fcc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <SysTick_Handler>:
#include "main_app.h"

extern TIM_HandleTypeDef htimer6;

void SysTick_Handler (void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800050c:	f000 f9cc 	bl	80008a8 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000510:	f000 fb18 	bl	8000b44 <HAL_SYSTICK_IRQHandler>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <TIM6_DAC_IRQHandler+0x10>)
 800051e:	f001 fb4d 	bl	8001bbc <HAL_TIM_IRQHandler>

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000028 	.word	0x20000028

0800052c <main>:

TIM_HandleTypeDef htimer6;


int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000530:	f000 f968 	bl	8000804 <HAL_Init>
	SystemClockConfig(SYS_CLOCK_FREQ_50_MHZ);
 8000534:	2032      	movs	r0, #50	; 0x32
 8000536:	f000 f80b 	bl	8000550 <SystemClockConfig>
	GPIO_Init();
 800053a:	f000 f895 	bl	8000668 <GPIO_Init>
	TIMER6_Init();
 800053e:	f000 f8b7 	bl	80006b0 <TIMER6_Init>

	//Lets start timer
	HAL_TIM_Base_Start_IT(&htimer6);
 8000542:	4802      	ldr	r0, [pc, #8]	; (800054c <main+0x20>)
 8000544:	f001 faca 	bl	8001adc <HAL_TIM_Base_Start_IT>

	while(1);
 8000548:	e7fe      	b.n	8000548 <main+0x1c>
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028

08000550 <SystemClockConfig>:
	return 0;
}


void SystemClockConfig(uint8_t clock_freq )
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b096      	sub	sp, #88	; 0x58
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055a:	2302      	movs	r3, #2
 800055c:	623b      	str	r3, [r7, #32]
	Osc_Init.HSIState = RCC_HSI_ON;
 800055e:	2301      	movs	r3, #1
 8000560:	62fb      	str	r3, [r7, #44]	; 0x2c
	Osc_Init.HSICalibrationValue = 16;
 8000562:	2310      	movs	r3, #16
 8000564:	633b      	str	r3, [r7, #48]	; 0x30
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056a:	2300      	movs	r3, #0
 800056c:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq)
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b78      	cmp	r3, #120	; 0x78
 8000572:	d032      	beq.n	80005da <SystemClockConfig+0x8a>
 8000574:	2b78      	cmp	r3, #120	; 0x78
 8000576:	dc71      	bgt.n	800065c <SystemClockConfig+0x10c>
 8000578:	2b32      	cmp	r3, #50	; 0x32
 800057a:	d002      	beq.n	8000582 <SystemClockConfig+0x32>
 800057c:	2b54      	cmp	r3, #84	; 0x54
 800057e:	d016      	beq.n	80005ae <SystemClockConfig+0x5e>
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
	     break;

	  default:
	   return ;
 8000580:	e06c      	b.n	800065c <SystemClockConfig+0x10c>
		  Osc_Init.PLL.PLLM = 8;
 8000582:	2308      	movs	r3, #8
 8000584:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 50;
 8000586:	2332      	movs	r3, #50	; 0x32
 8000588:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 800058e:	2302      	movs	r3, #2
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 8000592:	2302      	movs	r3, #2
 8000594:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a6:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
	     break;
 80005ac:	e02c      	b.n	8000608 <SystemClockConfig+0xb8>
		  Osc_Init.PLL.PLLM = 8;
 80005ae:	2308      	movs	r3, #8
 80005b0:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 84;
 80005b2:	2354      	movs	r3, #84	; 0x54
 80005b4:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 80005be:	2302      	movs	r3, #2
 80005c0:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d2:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
	     break;
 80005d8:	e016      	b.n	8000608 <SystemClockConfig+0xb8>
		  Osc_Init.PLL.PLLM = 8;
 80005da:	2308      	movs	r3, #8
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 120;
 80005de:	2378      	movs	r3, #120	; 0x78
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fe:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000604:	61fb      	str	r3, [r7, #28]
	     break;
 8000606:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f000 ff77 	bl	8001500 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClockConfig+0xcc>
	{
			Error_handler();
 8000618:	f000 f872 	bl	8000700 <Error_handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, FLASH_LATENCY_2) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fc4a 	bl	8000ebc <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClockConfig+0xe2>
	{
		Error_handler();
 800062e:	f000 f867 	bl	8000700 <Error_handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000632:	f000 fd29 	bl	8001088 <HAL_RCC_GetHCLKFreq>
 8000636:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_SYSTICK_Config(hclk_freq/1000);
 8000638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <SystemClockConfig+0x114>)
 800063c:	fba2 2303 	umull	r2, r3, r2, r3
 8000640:	099b      	lsrs	r3, r3, #6
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fa55 	bl	8000af2 <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000648:	2004      	movs	r0, #4
 800064a:	f000 fa5f 	bl	8000b0c <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000656:	f000 fa22 	bl	8000a9e <HAL_NVIC_SetPriority>
 800065a:	e000      	b.n	800065e <SystemClockConfig+0x10e>
	   return ;
 800065c:	bf00      	nop

}
 800065e:	3758      	adds	r7, #88	; 0x58
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	10624dd3 	.word	0x10624dd3

08000668 <GPIO_Init>:



void GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <GPIO_Init+0x40>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <GPIO_Init+0x40>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <GPIO_Init+0x40>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 800068a:	2320      	movs	r3, #32
 800068c:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	4619      	mov	r1, r3
 800069a:	4804      	ldr	r0, [pc, #16]	; (80006ac <GPIO_Init+0x44>)
 800069c:	f000 fa60 	bl	8000b60 <HAL_GPIO_Init>
}
 80006a0:	bf00      	nop
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020000 	.word	0x40020000

080006b0 <TIMER6_Init>:

void TIMER6_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <TIMER6_Init+0x2c>)
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <TIMER6_Init+0x30>)
 80006b8:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 9;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <TIMER6_Init+0x2c>)
 80006bc:	2209      	movs	r2, #9
 80006be:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 50-1;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <TIMER6_Init+0x2c>)
 80006c2:	2231      	movs	r2, #49	; 0x31
 80006c4:	60da      	str	r2, [r3, #12]
	if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <TIMER6_Init+0x2c>)
 80006c8:	f001 f9b8 	bl	8001a3c <HAL_TIM_Base_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <TIMER6_Init+0x26>
	{
		Error_handler();
 80006d2:	f000 f815 	bl	8000700 <Error_handler>
	}

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000028 	.word	0x20000028
 80006e0:	40001000 	.word	0x40001000

080006e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80006ec:	2120      	movs	r1, #32
 80006ee:	4803      	ldr	r0, [pc, #12]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0x18>)
 80006f0:	f000 fbca 	bl	8000e88 <HAL_GPIO_TogglePin>

}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020000 	.word	0x40020000

08000700 <Error_handler>:

void Error_handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
	while(1);
 8000704:	e7fe      	b.n	8000704 <Error_handler+0x4>
	...

08000708 <HAL_MspInit>:
 */

#include "main_app.h"

void HAL_MspInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800070c:	2003      	movs	r0, #3
 800070e:	f000 f9bb 	bl	8000a88 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <HAL_MspInit+0x40>)
 8000714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000716:	4a0c      	ldr	r2, [pc, #48]	; (8000748 <HAL_MspInit+0x40>)
 8000718:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800071c:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	f06f 000b 	mvn.w	r0, #11
 8000726:	f000 f9ba 	bl	8000a9e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	f06f 000a 	mvn.w	r0, #10
 8000732:	f000 f9b4 	bl	8000a9e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	f06f 0009 	mvn.w	r0, #9
 800073e:	f000 f9ae 	bl	8000a9e <HAL_NVIC_SetPriority>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_TIM_Base_MspInit+0x3c>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <HAL_TIM_Base_MspInit+0x3c>)
 800075e:	f043 0310 	orr.w	r3, r3, #16
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_TIM_Base_MspInit+0x3c>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 0310 	and.w	r3, r3, #16
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000770:	2036      	movs	r0, #54	; 0x36
 8000772:	f000 f9b0 	bl	8000ad6 <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8000776:	2200      	movs	r2, #0
 8000778:	210f      	movs	r1, #15
 800077a:	2036      	movs	r0, #54	; 0x36
 800077c:	f000 f98f 	bl	8000a9e <HAL_NVIC_SetPriority>

}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800

0800078c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <SystemInit+0x20>)
 8000792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000796:	4a05      	ldr	r2, [pc, #20]	; (80007ac <SystemInit+0x20>)
 8000798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800079c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007b6:	490e      	ldr	r1, [pc, #56]	; (80007f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007b8:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007cc:	4c0b      	ldr	r4, [pc, #44]	; (80007fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007da:	f7ff ffd7 	bl	800078c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007de:	f001 fbd1 	bl	8001f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007e2:	f7ff fea3 	bl	800052c <main>
  bx  lr    
 80007e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007f4:	08002004 	.word	0x08002004
  ldr r2, =_sbss
 80007f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007fc:	20000074 	.word	0x20000074

08000800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC_IRQHandler>
	...

08000804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <HAL_Init+0x40>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <HAL_Init+0x40>)
 800080e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <HAL_Init+0x40>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <HAL_Init+0x40>)
 800081a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800081e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_Init+0x40>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_Init+0x40>)
 8000826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800082a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 f92b 	bl	8000a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000832:	2000      	movs	r0, #0
 8000834:	f000 f808 	bl	8000848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000838:	f7ff ff66 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023c00 	.word	0x40023c00

08000848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_InitTick+0x54>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_InitTick+0x58>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f943 	bl	8000af2 <HAL_SYSTICK_Config>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e00e      	b.n	8000894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b0f      	cmp	r3, #15
 800087a:	d80a      	bhi.n	8000892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800087c:	2200      	movs	r2, #0
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	f000 f90b 	bl	8000a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <HAL_InitTick+0x5c>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088e:	2300      	movs	r3, #0
 8000890:	e000      	b.n	8000894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000000 	.word	0x20000000
 80008a0:	20000008 	.word	0x20000008
 80008a4:	20000004 	.word	0x20000004

080008a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_IncTick+0x20>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_IncTick+0x24>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <HAL_IncTick+0x24>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000070 	.word	0x20000070

080008d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return uwTick;
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <HAL_GetTick+0x14>)
 80008d6:	681b      	ldr	r3, [r3, #0]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000070 	.word	0x20000070

080008e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <__NVIC_SetPriorityGrouping+0x44>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000904:	4013      	ands	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091a:	4a04      	ldr	r2, [pc, #16]	; (800092c <__NVIC_SetPriorityGrouping+0x44>)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	60d3      	str	r3, [r2, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <__NVIC_GetPriorityGrouping+0x18>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	f003 0307 	and.w	r3, r3, #7
}
 800093e:	4618      	mov	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	2b00      	cmp	r3, #0
 800095c:	db0b      	blt.n	8000976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	f003 021f 	and.w	r2, r3, #31
 8000964:	4907      	ldr	r1, [pc, #28]	; (8000984 <__NVIC_EnableIRQ+0x38>)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	095b      	lsrs	r3, r3, #5
 800096c:	2001      	movs	r0, #1
 800096e:	fa00 f202 	lsl.w	r2, r0, r2
 8000972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000e100 	.word	0xe000e100

08000988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	6039      	str	r1, [r7, #0]
 8000992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	db0a      	blt.n	80009b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	490c      	ldr	r1, [pc, #48]	; (80009d4 <__NVIC_SetPriority+0x4c>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	0112      	lsls	r2, r2, #4
 80009a8:	b2d2      	uxtb	r2, r2
 80009aa:	440b      	add	r3, r1
 80009ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b0:	e00a      	b.n	80009c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4908      	ldr	r1, [pc, #32]	; (80009d8 <__NVIC_SetPriority+0x50>)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 030f 	and.w	r3, r3, #15
 80009be:	3b04      	subs	r3, #4
 80009c0:	0112      	lsls	r2, r2, #4
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	440b      	add	r3, r1
 80009c6:	761a      	strb	r2, [r3, #24]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000e100 	.word	0xe000e100
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b089      	sub	sp, #36	; 0x24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	f1c3 0307 	rsb	r3, r3, #7
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	bf28      	it	cs
 80009fa:	2304      	movcs	r3, #4
 80009fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3304      	adds	r3, #4
 8000a02:	2b06      	cmp	r3, #6
 8000a04:	d902      	bls.n	8000a0c <NVIC_EncodePriority+0x30>
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3b03      	subs	r3, #3
 8000a0a:	e000      	b.n	8000a0e <NVIC_EncodePriority+0x32>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	401a      	ands	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	43d9      	mvns	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	4313      	orrs	r3, r2
         );
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3724      	adds	r7, #36	; 0x24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a54:	d301      	bcc.n	8000a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00f      	b.n	8000a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <SysTick_Config+0x40>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a62:	210f      	movs	r1, #15
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a68:	f7ff ff8e 	bl	8000988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <SysTick_Config+0x40>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <SysTick_Config+0x40>)
 8000a74:	2207      	movs	r2, #7
 8000a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	e000e010 	.word	0xe000e010

08000a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ff29 	bl	80008e8 <__NVIC_SetPriorityGrouping>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b086      	sub	sp, #24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab0:	f7ff ff3e 	bl	8000930 <__NVIC_GetPriorityGrouping>
 8000ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	68b9      	ldr	r1, [r7, #8]
 8000aba:	6978      	ldr	r0, [r7, #20]
 8000abc:	f7ff ff8e 	bl	80009dc <NVIC_EncodePriority>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff5d 	bl	8000988 <__NVIC_SetPriority>
}
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff31 	bl	800094c <__NVIC_EnableIRQ>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ffa2 	bl	8000a44 <SysTick_Config>
 8000b00:	4603      	mov	r3, r0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	d106      	bne.n	8000b28 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000b26:	e005      	b.n	8000b34 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b2e:	f023 0304 	bic.w	r3, r3, #4
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b48:	f000 f802 	bl	8000b50 <HAL_SYSTICK_Callback>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
 8000b7a:	e165      	b.n	8000e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	f040 8154 	bne.w	8000e42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d005      	beq.n	8000bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d130      	bne.n	8000c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	68da      	ldr	r2, [r3, #12]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be8:	2201      	movs	r2, #1
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	091b      	lsrs	r3, r3, #4
 8000bfe:	f003 0201 	and.w	r2, r3, #1
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d017      	beq.n	8000c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	689a      	ldr	r2, [r3, #8]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d123      	bne.n	8000ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	08da      	lsrs	r2, r3, #3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3208      	adds	r2, #8
 8000c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	220f      	movs	r2, #15
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	691a      	ldr	r2, [r3, #16]
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	08da      	lsrs	r2, r3, #3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3208      	adds	r2, #8
 8000c9e:	69b9      	ldr	r1, [r7, #24]
 8000ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0203 	and.w	r2, r3, #3
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f000 80ae 	beq.w	8000e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b5d      	ldr	r3, [pc, #372]	; (8000e60 <HAL_GPIO_Init+0x300>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	4a5c      	ldr	r2, [pc, #368]	; (8000e60 <HAL_GPIO_Init+0x300>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf6:	4b5a      	ldr	r3, [pc, #360]	; (8000e60 <HAL_GPIO_Init+0x300>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d02:	4a58      	ldr	r2, [pc, #352]	; (8000e64 <HAL_GPIO_Init+0x304>)
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	3302      	adds	r3, #2
 8000d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	220f      	movs	r2, #15
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4f      	ldr	r2, [pc, #316]	; (8000e68 <HAL_GPIO_Init+0x308>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d025      	beq.n	8000d7a <HAL_GPIO_Init+0x21a>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a4e      	ldr	r2, [pc, #312]	; (8000e6c <HAL_GPIO_Init+0x30c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d01f      	beq.n	8000d76 <HAL_GPIO_Init+0x216>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a4d      	ldr	r2, [pc, #308]	; (8000e70 <HAL_GPIO_Init+0x310>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d019      	beq.n	8000d72 <HAL_GPIO_Init+0x212>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a4c      	ldr	r2, [pc, #304]	; (8000e74 <HAL_GPIO_Init+0x314>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d013      	beq.n	8000d6e <HAL_GPIO_Init+0x20e>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a4b      	ldr	r2, [pc, #300]	; (8000e78 <HAL_GPIO_Init+0x318>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d00d      	beq.n	8000d6a <HAL_GPIO_Init+0x20a>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a4a      	ldr	r2, [pc, #296]	; (8000e7c <HAL_GPIO_Init+0x31c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d007      	beq.n	8000d66 <HAL_GPIO_Init+0x206>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a49      	ldr	r2, [pc, #292]	; (8000e80 <HAL_GPIO_Init+0x320>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d101      	bne.n	8000d62 <HAL_GPIO_Init+0x202>
 8000d5e:	2306      	movs	r3, #6
 8000d60:	e00c      	b.n	8000d7c <HAL_GPIO_Init+0x21c>
 8000d62:	2307      	movs	r3, #7
 8000d64:	e00a      	b.n	8000d7c <HAL_GPIO_Init+0x21c>
 8000d66:	2305      	movs	r3, #5
 8000d68:	e008      	b.n	8000d7c <HAL_GPIO_Init+0x21c>
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	e006      	b.n	8000d7c <HAL_GPIO_Init+0x21c>
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e004      	b.n	8000d7c <HAL_GPIO_Init+0x21c>
 8000d72:	2302      	movs	r3, #2
 8000d74:	e002      	b.n	8000d7c <HAL_GPIO_Init+0x21c>
 8000d76:	2301      	movs	r3, #1
 8000d78:	e000      	b.n	8000d7c <HAL_GPIO_Init+0x21c>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	69fa      	ldr	r2, [r7, #28]
 8000d7e:	f002 0203 	and.w	r2, r2, #3
 8000d82:	0092      	lsls	r2, r2, #2
 8000d84:	4093      	lsls	r3, r2
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d8c:	4935      	ldr	r1, [pc, #212]	; (8000e64 <HAL_GPIO_Init+0x304>)
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d9a:	4b3a      	ldr	r3, [pc, #232]	; (8000e84 <HAL_GPIO_Init+0x324>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dbe:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <HAL_GPIO_Init+0x324>)
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <HAL_GPIO_Init+0x324>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000de8:	4a26      	ldr	r2, [pc, #152]	; (8000e84 <HAL_GPIO_Init+0x324>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <HAL_GPIO_Init+0x324>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e12:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <HAL_GPIO_Init+0x324>)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e18:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <HAL_GPIO_Init+0x324>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e3c:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <HAL_GPIO_Init+0x324>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3301      	adds	r3, #1
 8000e46:	61fb      	str	r3, [r7, #28]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	2b0f      	cmp	r3, #15
 8000e4c:	f67f ae96 	bls.w	8000b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40013800 	.word	0x40013800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	40020800 	.word	0x40020800
 8000e74:	40020c00 	.word	0x40020c00
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40021400 	.word	0x40021400
 8000e80:	40021800 	.word	0x40021800
 8000e84:	40013c00 	.word	0x40013c00

08000e88 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e9a:	887a      	ldrh	r2, [r7, #2]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	041a      	lsls	r2, r3, #16
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	43d9      	mvns	r1, r3
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	400b      	ands	r3, r1
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	619a      	str	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e0cc      	b.n	800106a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ed0:	4b68      	ldr	r3, [pc, #416]	; (8001074 <HAL_RCC_ClockConfig+0x1b8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 030f 	and.w	r3, r3, #15
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d90c      	bls.n	8000ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ede:	4b65      	ldr	r3, [pc, #404]	; (8001074 <HAL_RCC_ClockConfig+0x1b8>)
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ee6:	4b63      	ldr	r3, [pc, #396]	; (8001074 <HAL_RCC_ClockConfig+0x1b8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d001      	beq.n	8000ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e0b8      	b.n	800106a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d020      	beq.n	8000f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d005      	beq.n	8000f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f10:	4b59      	ldr	r3, [pc, #356]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	4a58      	ldr	r2, [pc, #352]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 8000f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0308 	and.w	r3, r3, #8
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d005      	beq.n	8000f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f28:	4b53      	ldr	r3, [pc, #332]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	4a52      	ldr	r2, [pc, #328]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 8000f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f34:	4b50      	ldr	r3, [pc, #320]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	494d      	ldr	r1, [pc, #308]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d044      	beq.n	8000fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d107      	bne.n	8000f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5a:	4b47      	ldr	r3, [pc, #284]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d119      	bne.n	8000f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e07f      	b.n	800106a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d003      	beq.n	8000f7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d107      	bne.n	8000f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f7a:	4b3f      	ldr	r3, [pc, #252]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d109      	bne.n	8000f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e06f      	b.n	800106a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e067      	b.n	800106a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f9a:	4b37      	ldr	r3, [pc, #220]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f023 0203 	bic.w	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	4934      	ldr	r1, [pc, #208]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fac:	f7ff fc90 	bl	80008d0 <HAL_GetTick>
 8000fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fb2:	e00a      	b.n	8000fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fb4:	f7ff fc8c 	bl	80008d0 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e04f      	b.n	800106a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 020c 	and.w	r2, r3, #12
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d1eb      	bne.n	8000fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <HAL_RCC_ClockConfig+0x1b8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 030f 	and.w	r3, r3, #15
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d20c      	bcs.n	8001004 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fea:	4b22      	ldr	r3, [pc, #136]	; (8001074 <HAL_RCC_ClockConfig+0x1b8>)
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <HAL_RCC_ClockConfig+0x1b8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d001      	beq.n	8001004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e032      	b.n	800106a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	2b00      	cmp	r3, #0
 800100e:	d008      	beq.n	8001022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	4916      	ldr	r1, [pc, #88]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 800101e:	4313      	orrs	r3, r2
 8001020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	2b00      	cmp	r3, #0
 800102c:	d009      	beq.n	8001042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	490e      	ldr	r1, [pc, #56]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 800103e:	4313      	orrs	r3, r2
 8001040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001042:	f000 f82d 	bl	80010a0 <HAL_RCC_GetSysClockFreq>
 8001046:	4602      	mov	r2, r0
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_RCC_ClockConfig+0x1bc>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	091b      	lsrs	r3, r3, #4
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	490a      	ldr	r1, [pc, #40]	; (800107c <HAL_RCC_ClockConfig+0x1c0>)
 8001054:	5ccb      	ldrb	r3, [r1, r3]
 8001056:	fa22 f303 	lsr.w	r3, r2, r3
 800105a:	4a09      	ldr	r2, [pc, #36]	; (8001080 <HAL_RCC_ClockConfig+0x1c4>)
 800105c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_RCC_ClockConfig+0x1c8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fbf0 	bl	8000848 <HAL_InitTick>

  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00
 8001078:	40023800 	.word	0x40023800
 800107c:	08001fe4 	.word	0x08001fe4
 8001080:	20000000 	.word	0x20000000
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <HAL_RCC_GetHCLKFreq+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000000 	.word	0x20000000

080010a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010a4:	b0ae      	sub	sp, #184	; 0xb8
 80010a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010c6:	4bcb      	ldr	r3, [pc, #812]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 030c 	and.w	r3, r3, #12
 80010ce:	2b0c      	cmp	r3, #12
 80010d0:	f200 8206 	bhi.w	80014e0 <HAL_RCC_GetSysClockFreq+0x440>
 80010d4:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80010d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010da:	bf00      	nop
 80010dc:	08001111 	.word	0x08001111
 80010e0:	080014e1 	.word	0x080014e1
 80010e4:	080014e1 	.word	0x080014e1
 80010e8:	080014e1 	.word	0x080014e1
 80010ec:	08001119 	.word	0x08001119
 80010f0:	080014e1 	.word	0x080014e1
 80010f4:	080014e1 	.word	0x080014e1
 80010f8:	080014e1 	.word	0x080014e1
 80010fc:	08001121 	.word	0x08001121
 8001100:	080014e1 	.word	0x080014e1
 8001104:	080014e1 	.word	0x080014e1
 8001108:	080014e1 	.word	0x080014e1
 800110c:	08001311 	.word	0x08001311
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001110:	4bb9      	ldr	r3, [pc, #740]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001116:	e1e7      	b.n	80014e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001118:	4bb8      	ldr	r3, [pc, #736]	; (80013fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800111a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800111e:	e1e3      	b.n	80014e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001120:	4bb4      	ldr	r3, [pc, #720]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800112c:	4bb1      	ldr	r3, [pc, #708]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d071      	beq.n	800121c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001138:	4bae      	ldr	r3, [pc, #696]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	099b      	lsrs	r3, r3, #6
 800113e:	2200      	movs	r2, #0
 8001140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001144:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800114c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001150:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800115a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800115e:	4622      	mov	r2, r4
 8001160:	462b      	mov	r3, r5
 8001162:	f04f 0000 	mov.w	r0, #0
 8001166:	f04f 0100 	mov.w	r1, #0
 800116a:	0159      	lsls	r1, r3, #5
 800116c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001170:	0150      	lsls	r0, r2, #5
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4621      	mov	r1, r4
 8001178:	1a51      	subs	r1, r2, r1
 800117a:	6439      	str	r1, [r7, #64]	; 0x40
 800117c:	4629      	mov	r1, r5
 800117e:	eb63 0301 	sbc.w	r3, r3, r1
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001190:	4649      	mov	r1, r9
 8001192:	018b      	lsls	r3, r1, #6
 8001194:	4641      	mov	r1, r8
 8001196:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800119a:	4641      	mov	r1, r8
 800119c:	018a      	lsls	r2, r1, #6
 800119e:	4641      	mov	r1, r8
 80011a0:	1a51      	subs	r1, r2, r1
 80011a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80011a4:	4649      	mov	r1, r9
 80011a6:	eb63 0301 	sbc.w	r3, r3, r1
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80011b8:	4649      	mov	r1, r9
 80011ba:	00cb      	lsls	r3, r1, #3
 80011bc:	4641      	mov	r1, r8
 80011be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80011c2:	4641      	mov	r1, r8
 80011c4:	00ca      	lsls	r2, r1, #3
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	4622      	mov	r2, r4
 80011ce:	189b      	adds	r3, r3, r2
 80011d0:	633b      	str	r3, [r7, #48]	; 0x30
 80011d2:	462b      	mov	r3, r5
 80011d4:	460a      	mov	r2, r1
 80011d6:	eb42 0303 	adc.w	r3, r2, r3
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80011e8:	4629      	mov	r1, r5
 80011ea:	024b      	lsls	r3, r1, #9
 80011ec:	4621      	mov	r1, r4
 80011ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80011f2:	4621      	mov	r1, r4
 80011f4:	024a      	lsls	r2, r1, #9
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011fe:	2200      	movs	r2, #0
 8001200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001204:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001208:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800120c:	f7fe fffa 	bl	8000204 <__aeabi_uldivmod>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4613      	mov	r3, r2
 8001216:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800121a:	e067      	b.n	80012ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800121c:	4b75      	ldr	r3, [pc, #468]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	099b      	lsrs	r3, r3, #6
 8001222:	2200      	movs	r2, #0
 8001224:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001228:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800122c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001234:	67bb      	str	r3, [r7, #120]	; 0x78
 8001236:	2300      	movs	r3, #0
 8001238:	67fb      	str	r3, [r7, #124]	; 0x7c
 800123a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800123e:	4622      	mov	r2, r4
 8001240:	462b      	mov	r3, r5
 8001242:	f04f 0000 	mov.w	r0, #0
 8001246:	f04f 0100 	mov.w	r1, #0
 800124a:	0159      	lsls	r1, r3, #5
 800124c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001250:	0150      	lsls	r0, r2, #5
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4621      	mov	r1, r4
 8001258:	1a51      	subs	r1, r2, r1
 800125a:	62b9      	str	r1, [r7, #40]	; 0x28
 800125c:	4629      	mov	r1, r5
 800125e:	eb63 0301 	sbc.w	r3, r3, r1
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001270:	4649      	mov	r1, r9
 8001272:	018b      	lsls	r3, r1, #6
 8001274:	4641      	mov	r1, r8
 8001276:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800127a:	4641      	mov	r1, r8
 800127c:	018a      	lsls	r2, r1, #6
 800127e:	4641      	mov	r1, r8
 8001280:	ebb2 0a01 	subs.w	sl, r2, r1
 8001284:	4649      	mov	r1, r9
 8001286:	eb63 0b01 	sbc.w	fp, r3, r1
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001296:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800129a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800129e:	4692      	mov	sl, r2
 80012a0:	469b      	mov	fp, r3
 80012a2:	4623      	mov	r3, r4
 80012a4:	eb1a 0303 	adds.w	r3, sl, r3
 80012a8:	623b      	str	r3, [r7, #32]
 80012aa:	462b      	mov	r3, r5
 80012ac:	eb4b 0303 	adc.w	r3, fp, r3
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80012be:	4629      	mov	r1, r5
 80012c0:	028b      	lsls	r3, r1, #10
 80012c2:	4621      	mov	r1, r4
 80012c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80012c8:	4621      	mov	r1, r4
 80012ca:	028a      	lsls	r2, r1, #10
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012d4:	2200      	movs	r2, #0
 80012d6:	673b      	str	r3, [r7, #112]	; 0x70
 80012d8:	677a      	str	r2, [r7, #116]	; 0x74
 80012da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80012de:	f7fe ff91 	bl	8000204 <__aeabi_uldivmod>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4613      	mov	r3, r2
 80012e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012ec:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	0c1b      	lsrs	r3, r3, #16
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	3301      	adds	r3, #1
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80012fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001302:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800130e:	e0eb      	b.n	80014e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001310:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001318:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800131c:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d06b      	beq.n	8001400 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001328:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	099b      	lsrs	r3, r3, #6
 800132e:	2200      	movs	r2, #0
 8001330:	66bb      	str	r3, [r7, #104]	; 0x68
 8001332:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800133a:	663b      	str	r3, [r7, #96]	; 0x60
 800133c:	2300      	movs	r3, #0
 800133e:	667b      	str	r3, [r7, #100]	; 0x64
 8001340:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001344:	4622      	mov	r2, r4
 8001346:	462b      	mov	r3, r5
 8001348:	f04f 0000 	mov.w	r0, #0
 800134c:	f04f 0100 	mov.w	r1, #0
 8001350:	0159      	lsls	r1, r3, #5
 8001352:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001356:	0150      	lsls	r0, r2, #5
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4621      	mov	r1, r4
 800135e:	1a51      	subs	r1, r2, r1
 8001360:	61b9      	str	r1, [r7, #24]
 8001362:	4629      	mov	r1, r5
 8001364:	eb63 0301 	sbc.w	r3, r3, r1
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001376:	4659      	mov	r1, fp
 8001378:	018b      	lsls	r3, r1, #6
 800137a:	4651      	mov	r1, sl
 800137c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001380:	4651      	mov	r1, sl
 8001382:	018a      	lsls	r2, r1, #6
 8001384:	4651      	mov	r1, sl
 8001386:	ebb2 0801 	subs.w	r8, r2, r1
 800138a:	4659      	mov	r1, fp
 800138c:	eb63 0901 	sbc.w	r9, r3, r1
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800139c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013a4:	4690      	mov	r8, r2
 80013a6:	4699      	mov	r9, r3
 80013a8:	4623      	mov	r3, r4
 80013aa:	eb18 0303 	adds.w	r3, r8, r3
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	462b      	mov	r3, r5
 80013b2:	eb49 0303 	adc.w	r3, r9, r3
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80013c4:	4629      	mov	r1, r5
 80013c6:	024b      	lsls	r3, r1, #9
 80013c8:	4621      	mov	r1, r4
 80013ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013ce:	4621      	mov	r1, r4
 80013d0:	024a      	lsls	r2, r1, #9
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013da:	2200      	movs	r2, #0
 80013dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80013de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80013e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80013e4:	f7fe ff0e 	bl	8000204 <__aeabi_uldivmod>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4613      	mov	r3, r2
 80013ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80013f2:	e065      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x420>
 80013f4:	40023800 	.word	0x40023800
 80013f8:	00f42400 	.word	0x00f42400
 80013fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001400:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	099b      	lsrs	r3, r3, #6
 8001406:	2200      	movs	r2, #0
 8001408:	4618      	mov	r0, r3
 800140a:	4611      	mov	r1, r2
 800140c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001410:	653b      	str	r3, [r7, #80]	; 0x50
 8001412:	2300      	movs	r3, #0
 8001414:	657b      	str	r3, [r7, #84]	; 0x54
 8001416:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800141a:	4642      	mov	r2, r8
 800141c:	464b      	mov	r3, r9
 800141e:	f04f 0000 	mov.w	r0, #0
 8001422:	f04f 0100 	mov.w	r1, #0
 8001426:	0159      	lsls	r1, r3, #5
 8001428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800142c:	0150      	lsls	r0, r2, #5
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4641      	mov	r1, r8
 8001434:	1a51      	subs	r1, r2, r1
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	4649      	mov	r1, r9
 800143a:	eb63 0301 	sbc.w	r3, r3, r1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800144c:	4659      	mov	r1, fp
 800144e:	018b      	lsls	r3, r1, #6
 8001450:	4651      	mov	r1, sl
 8001452:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001456:	4651      	mov	r1, sl
 8001458:	018a      	lsls	r2, r1, #6
 800145a:	4651      	mov	r1, sl
 800145c:	1a54      	subs	r4, r2, r1
 800145e:	4659      	mov	r1, fp
 8001460:	eb63 0501 	sbc.w	r5, r3, r1
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	00eb      	lsls	r3, r5, #3
 800146e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001472:	00e2      	lsls	r2, r4, #3
 8001474:	4614      	mov	r4, r2
 8001476:	461d      	mov	r5, r3
 8001478:	4643      	mov	r3, r8
 800147a:	18e3      	adds	r3, r4, r3
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	464b      	mov	r3, r9
 8001480:	eb45 0303 	adc.w	r3, r5, r3
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001492:	4629      	mov	r1, r5
 8001494:	028b      	lsls	r3, r1, #10
 8001496:	4621      	mov	r1, r4
 8001498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800149c:	4621      	mov	r1, r4
 800149e:	028a      	lsls	r2, r1, #10
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014a8:	2200      	movs	r2, #0
 80014aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80014ac:	64fa      	str	r2, [r7, #76]	; 0x4c
 80014ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80014b2:	f7fe fea7 	bl	8000204 <__aeabi_uldivmod>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4613      	mov	r3, r2
 80014bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	0f1b      	lsrs	r3, r3, #28
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80014ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80014d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014de:	e003      	b.n	80014e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80014e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	37b8      	adds	r7, #184	; 0xb8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	00f42400 	.word	0x00f42400

08001500 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e28d      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8083 	beq.w	8001626 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001520:	4b94      	ldr	r3, [pc, #592]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b04      	cmp	r3, #4
 800152a:	d019      	beq.n	8001560 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800152c:	4b91      	ldr	r3, [pc, #580]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001534:	2b08      	cmp	r3, #8
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001538:	4b8e      	ldr	r3, [pc, #568]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001544:	d00c      	beq.n	8001560 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001546:	4b8b      	ldr	r3, [pc, #556]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d112      	bne.n	8001578 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001552:	4b88      	ldr	r3, [pc, #544]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800155e:	d10b      	bne.n	8001578 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	4b84      	ldr	r3, [pc, #528]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d05b      	beq.n	8001624 <HAL_RCC_OscConfig+0x124>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d157      	bne.n	8001624 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e25a      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x90>
 8001582:	4b7c      	ldr	r3, [pc, #496]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7b      	ldr	r2, [pc, #492]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e01d      	b.n	80015cc <HAL_RCC_OscConfig+0xcc>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0xb4>
 800159a:	4b76      	ldr	r3, [pc, #472]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a75      	ldr	r2, [pc, #468]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b73      	ldr	r3, [pc, #460]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a72      	ldr	r2, [pc, #456]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0xcc>
 80015b4:	4b6f      	ldr	r3, [pc, #444]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a6e      	ldr	r2, [pc, #440]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b6c      	ldr	r3, [pc, #432]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a6b      	ldr	r2, [pc, #428]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d013      	beq.n	80015fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff f97c 	bl	80008d0 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff f978 	bl	80008d0 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e21f      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b61      	ldr	r3, [pc, #388]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0xdc>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff f968 	bl	80008d0 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff f964 	bl	80008d0 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e20b      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	4b57      	ldr	r3, [pc, #348]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x104>
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d06f      	beq.n	8001712 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001632:	4b50      	ldr	r3, [pc, #320]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b00      	cmp	r3, #0
 800163c:	d017      	beq.n	800166e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800163e:	4b4d      	ldr	r3, [pc, #308]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001646:	2b08      	cmp	r3, #8
 8001648:	d105      	bne.n	8001656 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800164a:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00b      	beq.n	800166e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001656:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800165e:	2b0c      	cmp	r3, #12
 8001660:	d11c      	bne.n	800169c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001662:	4b44      	ldr	r3, [pc, #272]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d116      	bne.n	800169c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166e:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d005      	beq.n	8001686 <HAL_RCC_OscConfig+0x186>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d001      	beq.n	8001686 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e1d3      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001686:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4937      	ldr	r1, [pc, #220]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169a:	e03a      	b.n	8001712 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d020      	beq.n	80016e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a4:	4b34      	ldr	r3, [pc, #208]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016aa:	f7ff f911 	bl	80008d0 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b2:	f7ff f90d 	bl	80008d0 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e1b4      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d0:	4b28      	ldr	r3, [pc, #160]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4925      	ldr	r1, [pc, #148]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	600b      	str	r3, [r1, #0]
 80016e4:	e015      	b.n	8001712 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e6:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff f8f0 	bl	80008d0 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f4:	f7ff f8ec 	bl	80008d0 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e193      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d036      	beq.n	800178c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d016      	beq.n	8001754 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_RCC_OscConfig+0x27c>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172c:	f7ff f8d0 	bl	80008d0 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001734:	f7ff f8cc 	bl	80008d0 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e173      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x234>
 8001752:	e01b      	b.n	800178c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_RCC_OscConfig+0x27c>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff f8b9 	bl	80008d0 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001760:	e00e      	b.n	8001780 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001762:	f7ff f8b5 	bl	80008d0 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d907      	bls.n	8001780 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e15c      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
 8001774:	40023800 	.word	0x40023800
 8001778:	42470000 	.word	0x42470000
 800177c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001780:	4b8a      	ldr	r3, [pc, #552]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1ea      	bne.n	8001762 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 8097 	beq.w	80018c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179e:	4b83      	ldr	r3, [pc, #524]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10f      	bne.n	80017ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b7f      	ldr	r3, [pc, #508]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a7e      	ldr	r2, [pc, #504]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b7c      	ldr	r3, [pc, #496]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ca:	4b79      	ldr	r3, [pc, #484]	; (80019b0 <HAL_RCC_OscConfig+0x4b0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d118      	bne.n	8001808 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d6:	4b76      	ldr	r3, [pc, #472]	; (80019b0 <HAL_RCC_OscConfig+0x4b0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a75      	ldr	r2, [pc, #468]	; (80019b0 <HAL_RCC_OscConfig+0x4b0>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e2:	f7ff f875 	bl	80008d0 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ea:	f7ff f871 	bl	80008d0 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e118      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fc:	4b6c      	ldr	r3, [pc, #432]	; (80019b0 <HAL_RCC_OscConfig+0x4b0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x31e>
 8001810:	4b66      	ldr	r3, [pc, #408]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	4a65      	ldr	r2, [pc, #404]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6713      	str	r3, [r2, #112]	; 0x70
 800181c:	e01c      	b.n	8001858 <HAL_RCC_OscConfig+0x358>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b05      	cmp	r3, #5
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x340>
 8001826:	4b61      	ldr	r3, [pc, #388]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	4a60      	ldr	r2, [pc, #384]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6713      	str	r3, [r2, #112]	; 0x70
 8001832:	4b5e      	ldr	r3, [pc, #376]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001836:	4a5d      	ldr	r2, [pc, #372]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6713      	str	r3, [r2, #112]	; 0x70
 800183e:	e00b      	b.n	8001858 <HAL_RCC_OscConfig+0x358>
 8001840:	4b5a      	ldr	r3, [pc, #360]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001844:	4a59      	ldr	r2, [pc, #356]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001846:	f023 0301 	bic.w	r3, r3, #1
 800184a:	6713      	str	r3, [r2, #112]	; 0x70
 800184c:	4b57      	ldr	r3, [pc, #348]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001850:	4a56      	ldr	r2, [pc, #344]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001852:	f023 0304 	bic.w	r3, r3, #4
 8001856:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d015      	beq.n	800188c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001860:	f7ff f836 	bl	80008d0 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001866:	e00a      	b.n	800187e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001868:	f7ff f832 	bl	80008d0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	; 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e0d7      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187e:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0ee      	beq.n	8001868 <HAL_RCC_OscConfig+0x368>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188c:	f7ff f820 	bl	80008d0 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001892:	e00a      	b.n	80018aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001894:	f7ff f81c 	bl	80008d0 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e0c1      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018aa:	4b40      	ldr	r3, [pc, #256]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1ee      	bne.n	8001894 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018bc:	4b3b      	ldr	r3, [pc, #236]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	4a3a      	ldr	r2, [pc, #232]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80018c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80ad 	beq.w	8001a2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018d2:	4b36      	ldr	r3, [pc, #216]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d060      	beq.n	80019a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d145      	bne.n	8001972 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e6:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <HAL_RCC_OscConfig+0x4b4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7fe fff0 	bl	80008d0 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7fe ffec 	bl	80008d0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e093      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69da      	ldr	r2, [r3, #28]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	019b      	lsls	r3, r3, #6
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	3b01      	subs	r3, #1
 800192c:	041b      	lsls	r3, r3, #16
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	071b      	lsls	r3, r3, #28
 800193e:	491b      	ldr	r1, [pc, #108]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_RCC_OscConfig+0x4b4>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7fe ffc1 	bl	80008d0 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001952:	f7fe ffbd 	bl	80008d0 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e064      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x452>
 8001970:	e05c      	b.n	8001a2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_RCC_OscConfig+0x4b4>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7fe ffaa 	bl	80008d0 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001980:	f7fe ffa6 	bl	80008d0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e04d      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x480>
 800199e:	e045      	b.n	8001a2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e040      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40007000 	.word	0x40007000
 80019b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <HAL_RCC_OscConfig+0x538>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d030      	beq.n	8001a28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d129      	bne.n	8001a28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d122      	bne.n	8001a28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d119      	bne.n	8001a28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	085b      	lsrs	r3, r3, #1
 8001a00:	3b01      	subs	r3, #1
 8001a02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d10f      	bne.n	8001a28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800

08001a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e041      	b.n	8001ad2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d106      	bne.n	8001a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7fe fe72 	bl	800074c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3304      	adds	r3, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	f000 f9ce 	bl	8001e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d001      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e04e      	b.n	8001b92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d022      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x80>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b1e:	d01d      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x80>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d018      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x80>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x80>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <HAL_TIM_Base_Start_IT+0xd0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00e      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x80>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x80>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x80>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d111      	bne.n	8001b80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d010      	beq.n	8001b90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0201 	orr.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b7e:	e007      	b.n	8001b90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40000800 	.word	0x40000800
 8001bac:	40000c00 	.word	0x40000c00
 8001bb0:	40010400 	.word	0x40010400
 8001bb4:	40014000 	.word	0x40014000
 8001bb8:	40001800 	.word	0x40001800

08001bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d122      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d11b      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0202 	mvn.w	r2, #2
 8001be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f8ee 	bl	8001de0 <HAL_TIM_IC_CaptureCallback>
 8001c04:	e005      	b.n	8001c12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8e0 	bl	8001dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8f1 	bl	8001df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d122      	bne.n	8001c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d11b      	bne.n	8001c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0204 	mvn.w	r2, #4
 8001c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2202      	movs	r2, #2
 8001c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f8c4 	bl	8001de0 <HAL_TIM_IC_CaptureCallback>
 8001c58:	e005      	b.n	8001c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f8b6 	bl	8001dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f8c7 	bl	8001df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d122      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d11b      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0208 	mvn.w	r2, #8
 8001c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2204      	movs	r2, #4
 8001c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f89a 	bl	8001de0 <HAL_TIM_IC_CaptureCallback>
 8001cac:	e005      	b.n	8001cba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f88c 	bl	8001dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f89d 	bl	8001df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b10      	cmp	r3, #16
 8001ccc:	d122      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b10      	cmp	r3, #16
 8001cda:	d11b      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0210 	mvn.w	r2, #16
 8001ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2208      	movs	r2, #8
 8001cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f870 	bl	8001de0 <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f862 	bl	8001dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f873 	bl	8001df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10e      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0201 	mvn.w	r2, #1
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fcd2 	bl	80006e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4a:	2b80      	cmp	r3, #128	; 0x80
 8001d4c:	d10e      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d58:	2b80      	cmp	r3, #128	; 0x80
 8001d5a:	d107      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f902 	bl	8001f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d76:	2b40      	cmp	r3, #64	; 0x40
 8001d78:	d10e      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d84:	2b40      	cmp	r3, #64	; 0x40
 8001d86:	d107      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f838 	bl	8001e08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d10e      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0320 	and.w	r3, r3, #32
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d107      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0220 	mvn.w	r2, #32
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8cc 	bl	8001f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a40      	ldr	r2, [pc, #256]	; (8001f30 <TIM_Base_SetConfig+0x114>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <TIM_Base_SetConfig+0x40>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3a:	d00f      	beq.n	8001e5c <TIM_Base_SetConfig+0x40>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3d      	ldr	r2, [pc, #244]	; (8001f34 <TIM_Base_SetConfig+0x118>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d00b      	beq.n	8001e5c <TIM_Base_SetConfig+0x40>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3c      	ldr	r2, [pc, #240]	; (8001f38 <TIM_Base_SetConfig+0x11c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d007      	beq.n	8001e5c <TIM_Base_SetConfig+0x40>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a3b      	ldr	r2, [pc, #236]	; (8001f3c <TIM_Base_SetConfig+0x120>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d003      	beq.n	8001e5c <TIM_Base_SetConfig+0x40>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a3a      	ldr	r2, [pc, #232]	; (8001f40 <TIM_Base_SetConfig+0x124>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d108      	bne.n	8001e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a2f      	ldr	r2, [pc, #188]	; (8001f30 <TIM_Base_SetConfig+0x114>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d02b      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7c:	d027      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a2c      	ldr	r2, [pc, #176]	; (8001f34 <TIM_Base_SetConfig+0x118>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d023      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a2b      	ldr	r2, [pc, #172]	; (8001f38 <TIM_Base_SetConfig+0x11c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01f      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a2a      	ldr	r2, [pc, #168]	; (8001f3c <TIM_Base_SetConfig+0x120>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01b      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <TIM_Base_SetConfig+0x124>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d017      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a28      	ldr	r2, [pc, #160]	; (8001f44 <TIM_Base_SetConfig+0x128>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a27      	ldr	r2, [pc, #156]	; (8001f48 <TIM_Base_SetConfig+0x12c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00f      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <TIM_Base_SetConfig+0x130>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00b      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a25      	ldr	r2, [pc, #148]	; (8001f50 <TIM_Base_SetConfig+0x134>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a24      	ldr	r2, [pc, #144]	; (8001f54 <TIM_Base_SetConfig+0x138>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d003      	beq.n	8001ece <TIM_Base_SetConfig+0xb2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <TIM_Base_SetConfig+0x13c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d108      	bne.n	8001ee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <TIM_Base_SetConfig+0x114>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d003      	beq.n	8001f14 <TIM_Base_SetConfig+0xf8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <TIM_Base_SetConfig+0x124>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d103      	bne.n	8001f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	615a      	str	r2, [r3, #20]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40010000 	.word	0x40010000
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40000800 	.word	0x40000800
 8001f3c:	40000c00 	.word	0x40000c00
 8001f40:	40010400 	.word	0x40010400
 8001f44:	40014000 	.word	0x40014000
 8001f48:	40014400 	.word	0x40014400
 8001f4c:	40014800 	.word	0x40014800
 8001f50:	40001800 	.word	0x40001800
 8001f54:	40001c00 	.word	0x40001c00
 8001f58:	40002000 	.word	0x40002000

08001f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <__libc_init_array>:
 8001f84:	b570      	push	{r4, r5, r6, lr}
 8001f86:	4d0d      	ldr	r5, [pc, #52]	; (8001fbc <__libc_init_array+0x38>)
 8001f88:	4c0d      	ldr	r4, [pc, #52]	; (8001fc0 <__libc_init_array+0x3c>)
 8001f8a:	1b64      	subs	r4, r4, r5
 8001f8c:	10a4      	asrs	r4, r4, #2
 8001f8e:	2600      	movs	r6, #0
 8001f90:	42a6      	cmp	r6, r4
 8001f92:	d109      	bne.n	8001fa8 <__libc_init_array+0x24>
 8001f94:	4d0b      	ldr	r5, [pc, #44]	; (8001fc4 <__libc_init_array+0x40>)
 8001f96:	4c0c      	ldr	r4, [pc, #48]	; (8001fc8 <__libc_init_array+0x44>)
 8001f98:	f000 f818 	bl	8001fcc <_init>
 8001f9c:	1b64      	subs	r4, r4, r5
 8001f9e:	10a4      	asrs	r4, r4, #2
 8001fa0:	2600      	movs	r6, #0
 8001fa2:	42a6      	cmp	r6, r4
 8001fa4:	d105      	bne.n	8001fb2 <__libc_init_array+0x2e>
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
 8001fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fac:	4798      	blx	r3
 8001fae:	3601      	adds	r6, #1
 8001fb0:	e7ee      	b.n	8001f90 <__libc_init_array+0xc>
 8001fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fb6:	4798      	blx	r3
 8001fb8:	3601      	adds	r6, #1
 8001fba:	e7f2      	b.n	8001fa2 <__libc_init_array+0x1e>
 8001fbc:	08001ffc 	.word	0x08001ffc
 8001fc0:	08001ffc 	.word	0x08001ffc
 8001fc4:	08001ffc 	.word	0x08001ffc
 8001fc8:	08002000 	.word	0x08002000

08001fcc <_init>:
 8001fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fce:	bf00      	nop
 8001fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fd2:	bc08      	pop	{r3}
 8001fd4:	469e      	mov	lr, r3
 8001fd6:	4770      	bx	lr

08001fd8 <_fini>:
 8001fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fda:	bf00      	nop
 8001fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fde:	bc08      	pop	{r3}
 8001fe0:	469e      	mov	lr, r3
 8001fe2:	4770      	bx	lr
