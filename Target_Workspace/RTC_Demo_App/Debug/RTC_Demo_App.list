
RTC_Demo_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c90  08004c90  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c90  08004c90  00014c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c98  08004c98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c98  08004c98  00014c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000070  08004d10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08004d10  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5c2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e32  00000000  00000000  0002f662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00031498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  000321c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022cda  00000000  00000000  00032e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb8d  00000000  00000000  00055b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6651  00000000  00000000  000656a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013bcf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c4c  00000000  00000000  0013bd48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004798 	.word	0x08004798

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004798 	.word	0x08004798

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <SysTick_Handler>:

extern TIM_HandleTypeDef htimer6;


void SysTick_Handler (void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005c8:	f000 ff32 	bl	8001430 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005cc:	f001 f87e 	bl	80016cc <HAL_SYSTICK_IRQHandler>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <TIM6_DAC_IRQHandler>:


void TIM6_DAC_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <TIM6_DAC_IRQHandler+0x10>)
 80005da:	f002 fe75 	bl	80032c8 <HAL_TIM_IRQHandler>

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000f0 	.word	0x200000f0

080005e8 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80005ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005f0:	f001 fa0e 	bl	8001a10 <HAL_GPIO_EXTI_IRQHandler>

}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <printmsg>:
TIM_HandleTypeDef htimer6;
RTC_HandleTypeDef hrtc;

/* prints formatted string to console over UART */
 void printmsg(char *format,...)
 {
 80005f8:	b40f      	push	{r0, r1, r2, r3}
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b096      	sub	sp, #88	; 0x58
 80005fe:	af00      	add	r7, sp, #0

	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000600:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000604:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fc6a 	bl	8003ee8 <vsiprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fdf9 	bl	8000210 <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	b29a      	uxth	r2, r3
 8000622:	f107 0108 	add.w	r1, r7, #8
 8000626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <printmsg+0x48>)
 800062c:	f002 ffdd 	bl	80035ea <HAL_UART_Transmit>
	va_end(args);

 }
 8000630:	bf00      	nop
 8000632:	3758      	adds	r7, #88	; 0x58
 8000634:	46bd      	mov	sp, r7
 8000636:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800063a:	b004      	add	sp, #16
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200000ac 	.word	0x200000ac

08000644 <main>:




int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

	HAL_Init();
 8000648:	f000 fea0 	bl	800138c <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_84_MHZ);
 800064c:	2054      	movs	r0, #84	; 0x54
 800064e:	f000 f80b 	bl	8000668 <SystemClock_Config_HSE>

	GPIO_Init();
 8000652:	f000 f8a3 	bl	800079c <GPIO_Init>

	UART2_Init();
 8000656:	f000 f90f 	bl	8000878 <UART2_Init>

	//TIMER6_Init();



	while( ! PrintUserMenu())
 800065a:	bf00      	nop
 800065c:	f000 f9aa 	bl	80009b4 <PrintUserMenu>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0fa      	beq.n	800065c <main+0x18>
	{

	}

	while(1);
 8000666:	e7fe      	b.n	8000666 <main+0x22>

08000668 <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b096      	sub	sp, #88	; 0x58
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 8000672:	2300      	movs	r3, #0
 8000674:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 8000678:	2301      	movs	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
	Osc_Init.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000680:	623b      	str	r3, [r7, #32]
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq)
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2b78      	cmp	r3, #120	; 0x78
 8000690:	d038      	beq.n	8000704 <SystemClock_Config_HSE+0x9c>
 8000692:	2b78      	cmp	r3, #120	; 0x78
 8000694:	dc7c      	bgt.n	8000790 <SystemClock_Config_HSE+0x128>
 8000696:	2b32      	cmp	r3, #50	; 0x32
 8000698:	d002      	beq.n	80006a0 <SystemClock_Config_HSE+0x38>
 800069a:	2b54      	cmp	r3, #84	; 0x54
 800069c:	d019      	beq.n	80006d2 <SystemClock_Config_HSE+0x6a>
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
          flash_latency = 3;
	     break;

	  default:
	   return ;
 800069e:	e077      	b.n	8000790 <SystemClock_Config_HSE+0x128>
		  Osc_Init.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 50;
 80006a4:	2332      	movs	r3, #50	; 0x32
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
          flash_latency = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 80006d0:	e032      	b.n	8000738 <SystemClock_Config_HSE+0xd0>
		  Osc_Init.PLL.PLLM = 4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 84;
 80006d6:	2354      	movs	r3, #84	; 0x54
 80006d8:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
          flash_latency = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 8000702:	e019      	b.n	8000738 <SystemClock_Config_HSE+0xd0>
		  Osc_Init.PLL.PLLM = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 120;
 8000708:	2378      	movs	r3, #120	; 0x78
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2302      	movs	r3, #2
 800071e:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000724:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000728:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800072a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072e:	61bb      	str	r3, [r7, #24]
          flash_latency = 3;
 8000730:	2303      	movs	r3, #3
 8000732:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 8000736:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fff3 	bl	8002728 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config_HSE+0xe4>
	{
			Error_handler();
 8000748:	f000 fd12 	bl	8001170 <Error_handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 800074c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f972 	bl	8001a40 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config_HSE+0xfe>
	{
		Error_handler();
 8000762:	f000 fd05 	bl	8001170 <Error_handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000766:	f001 fa51 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 800076a:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 800076c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SystemClock_Config_HSE+0x130>)
 8000770:	fba2 2303 	umull	r2, r3, r2, r3
 8000774:	099b      	lsrs	r3, r3, #6
 8000776:	4618      	mov	r0, r3
 8000778:	f000 ff7f 	bl	800167a <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800077c:	2004      	movs	r0, #4
 800077e:	f000 ff89 	bl	8001694 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800078a:	f000 ff4c 	bl	8001626 <HAL_NVIC_SetPriority>
 800078e:	e000      	b.n	8000792 <SystemClock_Config_HSE+0x12a>
	   return ;
 8000790:	bf00      	nop



 }
 8000792:	3758      	adds	r7, #88	; 0x58
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	10624dd3 	.word	0x10624dd3

0800079c <GPIO_Init>:




void GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <GPIO_Init+0x80>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a1c      	ldr	r2, [pc, #112]	; (800081c <GPIO_Init+0x80>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <GPIO_Init+0x80>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <GPIO_Init+0x80>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a15      	ldr	r2, [pc, #84]	; (800081c <GPIO_Init+0x80>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <GPIO_Init+0x80>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]


	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 80007da:	2320      	movs	r3, #32
 80007dc:	60fb      	str	r3, [r7, #12]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	613b      	str	r3, [r7, #16]
	ledgpio.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4619      	mov	r1, r3
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <GPIO_Init+0x84>)
 80007ee:	f000 ff7b 	bl	80016e8 <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_13;
 80007f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f6:	60fb      	str	r3, [r7, #12]
	ledgpio.Mode = GPIO_MODE_IT_FALLING;
 80007f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007fc:	613b      	str	r3, [r7, #16]
	ledgpio.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC,&ledgpio);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4619      	mov	r1, r3
 8000808:	4806      	ldr	r0, [pc, #24]	; (8000824 <GPIO_Init+0x88>)
 800080a:	f000 ff6d 	bl	80016e8 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800080e:	2028      	movs	r0, #40	; 0x28
 8000810:	f000 ff25 	bl	800165e <HAL_NVIC_EnableIRQ>


}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40020000 	.word	0x40020000
 8000824:	40020800 	.word	0x40020800

08000828 <RTC_Init>:

}


void RTC_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	hrtc.Instance = RTC;
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <RTC_Init+0x48>)
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <RTC_Init+0x4c>)
 8000830:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat     = RTC_HOURFORMAT_24;
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <RTC_Init+0x48>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv   = RTC_ASYNCH_PREDIV;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <RTC_Init+0x48>)
 800083a:	227f      	movs	r2, #127	; 0x7f
 800083c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv    = RTC_SYNCH_PREDIV;
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <RTC_Init+0x48>)
 8000840:	22ff      	movs	r2, #255	; 0xff
 8000842:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut         = RTC_OUTPUT_DISABLE;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <RTC_Init+0x48>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <RTC_Init+0x48>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <RTC_Init+0x48>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
	__HAL_RTC_RESET_HANDLE_STATE(&hrtc);
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <RTC_Init+0x48>)
 8000858:	2200      	movs	r2, #0
 800085a:	775a      	strb	r2, [r3, #29]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <RTC_Init+0x48>)
 800085e:	f002 fa01 	bl	8002c64 <HAL_RTC_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <RTC_Init+0x44>
	{
		/* Initialization Error */
		Error_handler();
 8000868:	f000 fc82 	bl	8001170 <Error_handler>
	}
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000138 	.word	0x20000138
 8000874:	40002800 	.word	0x40002800

08000878 <UART2_Init>:
	    Error_handler();
	  }

}
void UART2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <UART2_Init+0x44>)
 800087e:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <UART2_Init+0x48>)
 8000880:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <UART2_Init+0x44>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <UART2_Init+0x44>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <UART2_Init+0x44>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <UART2_Init+0x44>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <UART2_Init+0x44>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <UART2_Init+0x44>)
 80008a4:	220c      	movs	r2, #12
 80008a6:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <UART2_Init+0x44>)
 80008aa:	f002 fe51 	bl	8003550 <HAL_UART_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 80008b4:	f000 fc5c 	bl	8001170 <Error_handler>
	}


}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000ac 	.word	0x200000ac
 80008c0:	40004400 	.word	0x40004400

080008c4 <HAL_TIM_PeriodElapsedCallback>:




 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

 }
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <HAL_GPIO_EXTI_Callback>:
   * @brief  EXTI line detection callbacks.
   * @param  GPIO_Pin Specifies the pins connected EXTI line
   * @retval None
   */
  void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b098      	sub	sp, #96	; 0x60
 80008dc:	af02      	add	r7, sp, #8
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
	  char showtime[50];
	  RTC_DateTypeDef sdatestructureget;
	   RTC_TimeTypeDef stimestructureget;

	   memset(&sdatestructureget,0,sizeof(sdatestructureget));
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	2204      	movs	r2, #4
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 fabe 	bl	8003e6c <memset>
	   memset(&stimestructureget,0,sizeof(stimestructureget));
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	2214      	movs	r2, #20
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 fab7 	bl	8003e6c <memset>
	   /* Get the RTC current Time */
	   HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2200      	movs	r2, #0
 8000904:	4619      	mov	r1, r3
 8000906:	4827      	ldr	r0, [pc, #156]	; (80009a4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000908:	f002 fafa 	bl	8002f00 <HAL_RTC_GetTime>
	   /* Get the RTC current Date */
	   HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	2200      	movs	r2, #0
 8000912:	4619      	mov	r1, r3
 8000914:	4823      	ldr	r0, [pc, #140]	; (80009a4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000916:	f002 fbf8 	bl	800310a <HAL_RTC_GetDate>
	   /* Display time Format : hh:mm:ss */
	   sprintf((char*)showtime,"%02d:%02d:%02d  ",stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 800091a:	7b3b      	ldrb	r3, [r7, #12]
 800091c:	461a      	mov	r2, r3
 800091e:	7b7b      	ldrb	r3, [r7, #13]
 8000920:	4619      	mov	r1, r3
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	460b      	mov	r3, r1
 800092c:	491e      	ldr	r1, [pc, #120]	; (80009a8 <HAL_GPIO_EXTI_Callback+0xd0>)
 800092e:	f003 faa5 	bl	8003e7c <siprintf>
	   HAL_UART_Transmit(&huart2,(uint8_t*)showtime,strlen(showtime),HAL_MAX_DELAY);
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fc6a 	bl	8000210 <strlen>
 800093c:	4603      	mov	r3, r0
 800093e:	b29a      	uxth	r2, r3
 8000940:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000948:	4818      	ldr	r0, [pc, #96]	; (80009ac <HAL_GPIO_EXTI_Callback+0xd4>)
 800094a:	f002 fe4e 	bl	80035ea <HAL_UART_Transmit>
	   memset(showtime,0,sizeof(showtime));
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	2232      	movs	r2, #50	; 0x32
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f003 fa88 	bl	8003e6c <memset>
	   sprintf((char*)showtime,"%02d-%2d-%2d\r\n",sdatestructureget.Month, sdatestructureget.Date, 2000 + sdatestructureget.Year);
 800095c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000960:	461a      	mov	r2, r3
 8000962:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000966:	4619      	mov	r1, r3
 8000968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800096c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000970:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	460b      	mov	r3, r1
 8000978:	490d      	ldr	r1, [pc, #52]	; (80009b0 <HAL_GPIO_EXTI_Callback+0xd8>)
 800097a:	f003 fa7f 	bl	8003e7c <siprintf>
	   HAL_UART_Transmit(&huart2,(uint8_t*)showtime,strlen(showtime),HAL_MAX_DELAY);
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fc44 	bl	8000210 <strlen>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_GPIO_EXTI_Callback+0xd4>)
 8000996:	f002 fe28 	bl	80035ea <HAL_UART_Transmit>
 }
 800099a:	bf00      	nop
 800099c:	3758      	adds	r7, #88	; 0x58
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000138 	.word	0x20000138
 80009a8:	080047b0 	.word	0x080047b0
 80009ac:	200000ac 	.word	0x200000ac
 80009b0:	080047c4 	.word	0x080047c4

080009b4 <PrintUserMenu>:


uint8_t PrintUserMenu(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
	uint32_t cnt=0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
   printmsg("RTC Demo Application\r\n");
 80009be:	4855      	ldr	r0, [pc, #340]	; (8000b14 <PrintUserMenu+0x160>)
 80009c0:	f7ff fe1a 	bl	80005f8 <printmsg>
   printmsg("Calendar Demo--> 1\r\n");
 80009c4:	4854      	ldr	r0, [pc, #336]	; (8000b18 <PrintUserMenu+0x164>)
 80009c6:	f7ff fe17 	bl	80005f8 <printmsg>
   printmsg("Alarm Demo--> 2\r\n");
 80009ca:	4854      	ldr	r0, [pc, #336]	; (8000b1c <PrintUserMenu+0x168>)
 80009cc:	f7ff fe14 	bl	80005f8 <printmsg>
   printmsg("Time-Stamp Demo-->3\r\n");
 80009d0:	4853      	ldr	r0, [pc, #332]	; (8000b20 <PrintUserMenu+0x16c>)
 80009d2:	f7ff fe11 	bl	80005f8 <printmsg>
   printmsg("Low-Power Modes Demo-->4\r\n");
 80009d6:	4853      	ldr	r0, [pc, #332]	; (8000b24 <PrintUserMenu+0x170>)
 80009d8:	f7ff fe0e 	bl	80005f8 <printmsg>
   printmsg("Exit this app-->0\r\n");
 80009dc:	4852      	ldr	r0, [pc, #328]	; (8000b28 <PrintUserMenu+0x174>)
 80009de:	f7ff fe0b 	bl	80005f8 <printmsg>
   printmsg("Type your option here :");
 80009e2:	4852      	ldr	r0, [pc, #328]	; (8000b2c <PrintUserMenu+0x178>)
 80009e4:	f7ff fe08 	bl	80005f8 <printmsg>


   while(data_user != '\r')
 80009e8:	e010      	b.n	8000a0c <PrintUserMenu+0x58>
   {
 	  HAL_UART_Receive(&huart2, (uint8_t*)&data_user, 1, HAL_MAX_DELAY);
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ee:	2201      	movs	r2, #1
 80009f0:	494f      	ldr	r1, [pc, #316]	; (8000b30 <PrintUserMenu+0x17c>)
 80009f2:	4850      	ldr	r0, [pc, #320]	; (8000b34 <PrintUserMenu+0x180>)
 80009f4:	f002 fe8b 	bl	800370e <HAL_UART_Receive>
 	  user_input[cnt]=data_user;
 80009f8:	4b4d      	ldr	r3, [pc, #308]	; (8000b30 <PrintUserMenu+0x17c>)
 80009fa:	7819      	ldrb	r1, [r3, #0]
 80009fc:	4a4e      	ldr	r2, [pc, #312]	; (8000b38 <PrintUserMenu+0x184>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	460a      	mov	r2, r1
 8000a04:	701a      	strb	r2, [r3, #0]
 	  cnt++;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
   while(data_user != '\r')
 8000a0c:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <PrintUserMenu+0x17c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b0d      	cmp	r3, #13
 8000a12:	d1ea      	bne.n	80009ea <PrintUserMenu+0x36>
   }
   printmsg("\r\n received inputs %d %d \r\n",user_input[0],user_input[1]);
 8000a14:	4b48      	ldr	r3, [pc, #288]	; (8000b38 <PrintUserMenu+0x184>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4b47      	ldr	r3, [pc, #284]	; (8000b38 <PrintUserMenu+0x184>)
 8000a1c:	785b      	ldrb	r3, [r3, #1]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4846      	ldr	r0, [pc, #280]	; (8000b3c <PrintUserMenu+0x188>)
 8000a22:	f7ff fde9 	bl	80005f8 <printmsg>


   switch(user_input[0])
 8000a26:	4b44      	ldr	r3, [pc, #272]	; (8000b38 <PrintUserMenu+0x184>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	3b30      	subs	r3, #48	; 0x30
 8000a2c:	2b04      	cmp	r3, #4
 8000a2e:	d868      	bhi.n	8000b02 <PrintUserMenu+0x14e>
 8000a30:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <PrintUserMenu+0x84>)
 8000a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a36:	bf00      	nop
 8000a38:	08000af9 	.word	0x08000af9
 8000a3c:	08000a4d 	.word	0x08000a4d
 8000a40:	08000a7f 	.word	0x08000a7f
 8000a44:	08000aa9 	.word	0x08000aa9
 8000a48:	08000acf 	.word	0x08000acf
   {
   uint8_t arg,ret;
   case '1':
	   arg = CalendarDemoMenuPrint();
 8000a4c:	f000 f9da 	bl	8000e04 <CalendarDemoMenuPrint>
 8000a50:	4603      	mov	r3, r0
 8000a52:	70bb      	strb	r3, [r7, #2]
       ret = Calendar_Demo(arg);
 8000a54:	78bb      	ldrb	r3, [r7, #2]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f884 	bl	8000b64 <Calendar_Demo>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	70fb      	strb	r3, [r7, #3]
       while(ret)
 8000a60:	e009      	b.n	8000a76 <PrintUserMenu+0xc2>
       {
    	   arg = CalendarDemoMenuPrint();
 8000a62:	f000 f9cf 	bl	8000e04 <CalendarDemoMenuPrint>
 8000a66:	4603      	mov	r3, r0
 8000a68:	70bb      	strb	r3, [r7, #2]
    	   ret = Calendar_Demo(arg);
 8000a6a:	78bb      	ldrb	r3, [r7, #2]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f879 	bl	8000b64 <Calendar_Demo>
 8000a72:	4603      	mov	r3, r0
 8000a74:	70fb      	strb	r3, [r7, #3]
       while(ret)
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1f2      	bne.n	8000a62 <PrintUserMenu+0xae>
       }
       break;
 8000a7c:	e044      	b.n	8000b08 <PrintUserMenu+0x154>
   case '2':
	   arg = Alarm_DemoPrint();
 8000a7e:	f000 fa3b 	bl	8000ef8 <Alarm_DemoPrint>
 8000a82:	4603      	mov	r3, r0
 8000a84:	70bb      	strb	r3, [r7, #2]
       ret = Alarm_Demo(arg);
 8000a86:	78bb      	ldrb	r3, [r7, #2]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f997 	bl	8000dbc <Alarm_Demo>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	70fb      	strb	r3, [r7, #3]
       while(ret)
 8000a92:	e005      	b.n	8000aa0 <PrintUserMenu+0xec>
       {
    	   ret = Alarm_Demo(arg);
 8000a94:	78bb      	ldrb	r3, [r7, #2]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f990 	bl	8000dbc <Alarm_Demo>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	70fb      	strb	r3, [r7, #3]
       while(ret)
 8000aa0:	78fb      	ldrb	r3, [r7, #3]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1f6      	bne.n	8000a94 <PrintUserMenu+0xe0>
       }
	   break;
 8000aa6:	e02f      	b.n	8000b08 <PrintUserMenu+0x154>
   case '3':
	   printmsg("This is time stamp Demo\r\n");
 8000aa8:	4825      	ldr	r0, [pc, #148]	; (8000b40 <PrintUserMenu+0x18c>)
 8000aaa:	f7ff fda5 	bl	80005f8 <printmsg>

	   if(is_valid_time_set())
 8000aae:	f000 f851 	bl	8000b54 <is_valid_time_set>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d006      	beq.n	8000ac6 <PrintUserMenu+0x112>
	   {
		   printmsg("press the user button to know the time stamp\r\n");
 8000ab8:	4822      	ldr	r0, [pc, #136]	; (8000b44 <PrintUserMenu+0x190>)
 8000aba:	f7ff fd9d 	bl	80005f8 <printmsg>
		   TimeStamp_Demo(0);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 f994 	bl	8000dec <TimeStamp_Demo>
	   }
	   else
	   {
		   printmsg("Valid time is not set: first set time and try this demo\r\n");
	   }
	   break;
 8000ac4:	e020      	b.n	8000b08 <PrintUserMenu+0x154>
		   printmsg("Valid time is not set: first set time and try this demo\r\n");
 8000ac6:	4820      	ldr	r0, [pc, #128]	; (8000b48 <PrintUserMenu+0x194>)
 8000ac8:	f7ff fd96 	bl	80005f8 <printmsg>
	   break;
 8000acc:	e01c      	b.n	8000b08 <PrintUserMenu+0x154>
   case '4':

	   arg = LowPowerDemoMenuPrint();
 8000ace:	f000 f9e5 	bl	8000e9c <LowPowerDemoMenuPrint>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	70bb      	strb	r3, [r7, #2]
       ret = LowPowerDemo(arg);
 8000ad6:	78bb      	ldrb	r3, [r7, #2]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f97b 	bl	8000dd4 <LowPowerDemo>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	70fb      	strb	r3, [r7, #3]
       while(ret)
 8000ae2:	e005      	b.n	8000af0 <PrintUserMenu+0x13c>
       {
    	   ret = LowPowerDemo(arg);
 8000ae4:	78bb      	ldrb	r3, [r7, #2]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f974 	bl	8000dd4 <LowPowerDemo>
 8000aec:	4603      	mov	r3, r0
 8000aee:	70fb      	strb	r3, [r7, #3]
       while(ret)
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1f6      	bne.n	8000ae4 <PrintUserMenu+0x130>
       }
	   break;
 8000af6:	e007      	b.n	8000b08 <PrintUserMenu+0x154>
   case '0' :
	   printmsg("Exiting this app\r\n");
 8000af8:	4814      	ldr	r0, [pc, #80]	; (8000b4c <PrintUserMenu+0x198>)
 8000afa:	f7ff fd7d 	bl	80005f8 <printmsg>
	   return 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e003      	b.n	8000b0a <PrintUserMenu+0x156>
	   break;
   default:
	   printmsg("\r\nInvalid option.. try again\r\r");
 8000b02:	4813      	ldr	r0, [pc, #76]	; (8000b50 <PrintUserMenu+0x19c>)
 8000b04:	f7ff fd78 	bl	80005f8 <printmsg>

   }

   return 0;
 8000b08:	2300      	movs	r3, #0

}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	080047d4 	.word	0x080047d4
 8000b18:	080047ec 	.word	0x080047ec
 8000b1c:	08004804 	.word	0x08004804
 8000b20:	08004818 	.word	0x08004818
 8000b24:	08004830 	.word	0x08004830
 8000b28:	0800484c 	.word	0x0800484c
 8000b2c:	08004860 	.word	0x08004860
 8000b30:	200000aa 	.word	0x200000aa
 8000b34:	200000ac 	.word	0x200000ac
 8000b38:	2000008c 	.word	0x2000008c
 8000b3c:	08004878 	.word	0x08004878
 8000b40:	08004894 	.word	0x08004894
 8000b44:	080048b0 	.word	0x080048b0
 8000b48:	080048e0 	.word	0x080048e0
 8000b4c:	0800491c 	.word	0x0800491c
 8000b50:	08004930 	.word	0x08004930

08000b54 <is_valid_time_set>:


uint8_t is_valid_time_set(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
	return 1;
 8000b58:	2301      	movs	r3, #1
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <Calendar_Demo>:

uint8_t Calendar_Demo(uint8_t arg)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b08d      	sub	sp, #52	; 0x34
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
uint8_t time_format,seconds,minutes,hour,date,month,year,ampm;
uint8_t user_input[6];
uint32_t cnt=0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
	switch(arg)
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	3b30      	subs	r3, #48	; 0x30
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	f200 80f3 	bhi.w	8000d62 <Calendar_Demo+0x1fe>
 8000b7c:	a201      	add	r2, pc, #4	; (adr r2, 8000b84 <Calendar_Demo+0x20>)
 8000b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b82:	bf00      	nop
 8000b84:	08000d5f 	.word	0x08000d5f
 8000b88:	08000b95 	.word	0x08000b95
 8000b8c:	08000cc1 	.word	0x08000cc1
 8000b90:	08000d55 	.word	0x08000d55
	{
	case '1':
		printmsg("Which time format do you want ?\r\n");
 8000b94:	4877      	ldr	r0, [pc, #476]	; (8000d74 <Calendar_Demo+0x210>)
 8000b96:	f7ff fd2f 	bl	80005f8 <printmsg>
		printmsg("24h-->0\r\n");
 8000b9a:	4877      	ldr	r0, [pc, #476]	; (8000d78 <Calendar_Demo+0x214>)
 8000b9c:	f7ff fd2c 	bl	80005f8 <printmsg>
		printmsg("12h-->1\r\n");
 8000ba0:	4876      	ldr	r0, [pc, #472]	; (8000d7c <Calendar_Demo+0x218>)
 8000ba2:	f7ff fd29 	bl	80005f8 <printmsg>
		printmsg("Type your option here :");
 8000ba6:	4876      	ldr	r0, [pc, #472]	; (8000d80 <Calendar_Demo+0x21c>)
 8000ba8:	f7ff fd26 	bl	80005f8 <printmsg>

		  while(data_user != '\r')
 8000bac:	e011      	b.n	8000bd2 <Calendar_Demo+0x6e>
		   {
		 	  HAL_UART_Receive(&huart2, (uint8_t*)&data_user, 1, HAL_MAX_DELAY);
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4973      	ldr	r1, [pc, #460]	; (8000d84 <Calendar_Demo+0x220>)
 8000bb6:	4874      	ldr	r0, [pc, #464]	; (8000d88 <Calendar_Demo+0x224>)
 8000bb8:	f002 fda9 	bl	800370e <HAL_UART_Receive>
		 	  user_input[cnt]=data_user;
 8000bbc:	4b71      	ldr	r3, [pc, #452]	; (8000d84 <Calendar_Demo+0x220>)
 8000bbe:	7819      	ldrb	r1, [r3, #0]
 8000bc0:	f107 0214 	add.w	r2, r7, #20
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	4413      	add	r3, r2
 8000bc8:	460a      	mov	r2, r1
 8000bca:	701a      	strb	r2, [r3, #0]
		 	  cnt++;
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	3301      	adds	r3, #1
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
		  while(data_user != '\r')
 8000bd2:	4b6c      	ldr	r3, [pc, #432]	; (8000d84 <Calendar_Demo+0x220>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b0d      	cmp	r3, #13
 8000bd8:	d1e9      	bne.n	8000bae <Calendar_Demo+0x4a>
		   }
		printmsg("\r\n received inputs %d %d \r\n",user_input[0],user_input[1]);
 8000bda:	7d3b      	ldrb	r3, [r7, #20]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	7d7b      	ldrb	r3, [r7, #21]
 8000be0:	461a      	mov	r2, r3
 8000be2:	486a      	ldr	r0, [pc, #424]	; (8000d8c <Calendar_Demo+0x228>)
 8000be4:	f7ff fd08 	bl	80005f8 <printmsg>
		time_format = (user_input[0]-48);
 8000be8:	7d3b      	ldrb	r3, [r7, #20]
 8000bea:	3b30      	subs	r3, #48	; 0x30
 8000bec:	77fb      	strb	r3, [r7, #31]
		printmsg("Enter Hour value here(1-12) or (1-24) :");
 8000bee:	4868      	ldr	r0, [pc, #416]	; (8000d90 <Calendar_Demo+0x22c>)
 8000bf0:	f7ff fd02 	bl	80005f8 <printmsg>
		  while(data_user != '\r')
 8000bf4:	e011      	b.n	8000c1a <Calendar_Demo+0xb6>
		   {
		 	  HAL_UART_Receive(&huart2, (uint8_t*)&data_user, 1, HAL_MAX_DELAY);
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4961      	ldr	r1, [pc, #388]	; (8000d84 <Calendar_Demo+0x220>)
 8000bfe:	4862      	ldr	r0, [pc, #392]	; (8000d88 <Calendar_Demo+0x224>)
 8000c00:	f002 fd85 	bl	800370e <HAL_UART_Receive>
		 	  user_input[cnt]=data_user;
 8000c04:	4b5f      	ldr	r3, [pc, #380]	; (8000d84 <Calendar_Demo+0x220>)
 8000c06:	7819      	ldrb	r1, [r3, #0]
 8000c08:	f107 0214 	add.w	r2, r7, #20
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	4413      	add	r3, r2
 8000c10:	460a      	mov	r2, r1
 8000c12:	701a      	strb	r2, [r3, #0]
		 	  cnt++;
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	3301      	adds	r3, #1
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
		  while(data_user != '\r')
 8000c1a:	4b5a      	ldr	r3, [pc, #360]	; (8000d84 <Calendar_Demo+0x220>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b0d      	cmp	r3, #13
 8000c20:	d1e9      	bne.n	8000bf6 <Calendar_Demo+0x92>
		   }
	    printmsg("\r\n received inputs %d %d \r",user_input[0],user_input[1]);
 8000c22:	7d3b      	ldrb	r3, [r7, #20]
 8000c24:	4619      	mov	r1, r3
 8000c26:	7d7b      	ldrb	r3, [r7, #21]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	485a      	ldr	r0, [pc, #360]	; (8000d94 <Calendar_Demo+0x230>)
 8000c2c:	f7ff fce4 	bl	80005f8 <printmsg>
	    hour = user_input[0];
 8000c30:	7d3b      	ldrb	r3, [r7, #20]
 8000c32:	77bb      	strb	r3, [r7, #30]
		printmsg("Enter minutes value here( 0 to 59 :");
 8000c34:	4858      	ldr	r0, [pc, #352]	; (8000d98 <Calendar_Demo+0x234>)
 8000c36:	f7ff fcdf 	bl	80005f8 <printmsg>
		HAL_UART_Receive(&huart2,user_input,2,HAL_MAX_DELAY);
 8000c3a:	f107 0114 	add.w	r1, r7, #20
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c42:	2202      	movs	r2, #2
 8000c44:	4850      	ldr	r0, [pc, #320]	; (8000d88 <Calendar_Demo+0x224>)
 8000c46:	f002 fd62 	bl	800370e <HAL_UART_Receive>
		printmsg("\r\n received inputs %d %d \r",user_input[0],user_input[1]);
 8000c4a:	7d3b      	ldrb	r3, [r7, #20]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	7d7b      	ldrb	r3, [r7, #21]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4850      	ldr	r0, [pc, #320]	; (8000d94 <Calendar_Demo+0x230>)
 8000c54:	f7ff fcd0 	bl	80005f8 <printmsg>
		minutes = user_input[0];
 8000c58:	7d3b      	ldrb	r3, [r7, #20]
 8000c5a:	777b      	strb	r3, [r7, #29]
		printmsg("Enter seconds value here( 0 to 59 :");
 8000c5c:	484f      	ldr	r0, [pc, #316]	; (8000d9c <Calendar_Demo+0x238>)
 8000c5e:	f7ff fccb 	bl	80005f8 <printmsg>
		HAL_UART_Receive(&huart2,user_input,2,HAL_MAX_DELAY);
 8000c62:	f107 0114 	add.w	r1, r7, #20
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	4846      	ldr	r0, [pc, #280]	; (8000d88 <Calendar_Demo+0x224>)
 8000c6e:	f002 fd4e 	bl	800370e <HAL_UART_Receive>
		printmsg("\r\n received inputs %d %d \r",user_input[0],user_input[1]);
 8000c72:	7d3b      	ldrb	r3, [r7, #20]
 8000c74:	4619      	mov	r1, r3
 8000c76:	7d7b      	ldrb	r3, [r7, #21]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4846      	ldr	r0, [pc, #280]	; (8000d94 <Calendar_Demo+0x230>)
 8000c7c:	f7ff fcbc 	bl	80005f8 <printmsg>
		seconds = user_input[0];
 8000c80:	7d3b      	ldrb	r3, [r7, #20]
 8000c82:	773b      	strb	r3, [r7, #28]
		printmsg("is it AM(1)/PM(0)?:");
 8000c84:	4846      	ldr	r0, [pc, #280]	; (8000da0 <Calendar_Demo+0x23c>)
 8000c86:	f7ff fcb7 	bl	80005f8 <printmsg>
		HAL_UART_Receive(&huart2,user_input,2,HAL_MAX_DELAY);
 8000c8a:	f107 0114 	add.w	r1, r7, #20
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c92:	2202      	movs	r2, #2
 8000c94:	483c      	ldr	r0, [pc, #240]	; (8000d88 <Calendar_Demo+0x224>)
 8000c96:	f002 fd3a 	bl	800370e <HAL_UART_Receive>
		ampm = user_input[0];
 8000c9a:	7d3b      	ldrb	r3, [r7, #20]
 8000c9c:	76fb      	strb	r3, [r7, #27]
		RTC_Init();
 8000c9e:	f7ff fdc3 	bl	8000828 <RTC_Init>
		RTC_configureUserGivenTime(seconds,minutes,hour,ampm,time_format);
 8000ca2:	7efc      	ldrb	r4, [r7, #27]
 8000ca4:	7fba      	ldrb	r2, [r7, #30]
 8000ca6:	7f79      	ldrb	r1, [r7, #29]
 8000ca8:	7f38      	ldrb	r0, [r7, #28]
 8000caa:	7ffb      	ldrb	r3, [r7, #31]
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	4623      	mov	r3, r4
 8000cb0:	f000 f956 	bl	8000f60 <RTC_configureUserGivenTime>
		printmsg("\r\nTime set Successful !\r\n");
 8000cb4:	483b      	ldr	r0, [pc, #236]	; (8000da4 <Calendar_Demo+0x240>)
 8000cb6:	f7ff fc9f 	bl	80005f8 <printmsg>
		RTC_DisplayCurrentTime();
 8000cba:	f000 f9b7 	bl	800102c <RTC_DisplayCurrentTime>
		break;
 8000cbe:	e053      	b.n	8000d68 <Calendar_Demo+0x204>
	case '2':
		printmsg("Enter Date(1 to 31) value here :");
 8000cc0:	4839      	ldr	r0, [pc, #228]	; (8000da8 <Calendar_Demo+0x244>)
 8000cc2:	f7ff fc99 	bl	80005f8 <printmsg>
		HAL_UART_Receive(&huart2,user_input,2,HAL_MAX_DELAY);
 8000cc6:	f107 0114 	add.w	r1, r7, #20
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cce:	2202      	movs	r2, #2
 8000cd0:	482d      	ldr	r0, [pc, #180]	; (8000d88 <Calendar_Demo+0x224>)
 8000cd2:	f002 fd1c 	bl	800370e <HAL_UART_Receive>
	    printmsg("\r\n received inputs %d %d \r\n",user_input[0],user_input[1]);
 8000cd6:	7d3b      	ldrb	r3, [r7, #20]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	7d7b      	ldrb	r3, [r7, #21]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	482b      	ldr	r0, [pc, #172]	; (8000d8c <Calendar_Demo+0x228>)
 8000ce0:	f7ff fc8a 	bl	80005f8 <printmsg>
	    date = user_input[0];
 8000ce4:	7d3b      	ldrb	r3, [r7, #20]
 8000ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		printmsg("Enter month value here( 1-12) :");
 8000cea:	4830      	ldr	r0, [pc, #192]	; (8000dac <Calendar_Demo+0x248>)
 8000cec:	f7ff fc84 	bl	80005f8 <printmsg>
		HAL_UART_Receive(&huart2,user_input,2,HAL_MAX_DELAY);
 8000cf0:	f107 0114 	add.w	r1, r7, #20
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	4823      	ldr	r0, [pc, #140]	; (8000d88 <Calendar_Demo+0x224>)
 8000cfc:	f002 fd07 	bl	800370e <HAL_UART_Receive>
		printmsg("\r\n received inputs %d %d \r\n",user_input[0],user_input[1]);
 8000d00:	7d3b      	ldrb	r3, [r7, #20]
 8000d02:	4619      	mov	r1, r3
 8000d04:	7d7b      	ldrb	r3, [r7, #21]
 8000d06:	461a      	mov	r2, r3
 8000d08:	4820      	ldr	r0, [pc, #128]	; (8000d8c <Calendar_Demo+0x228>)
 8000d0a:	f7ff fc75 	bl	80005f8 <printmsg>
		month = user_input[0];
 8000d0e:	7d3b      	ldrb	r3, [r7, #20]
 8000d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		printmsg("Enter year value here :");
 8000d14:	4826      	ldr	r0, [pc, #152]	; (8000db0 <Calendar_Demo+0x24c>)
 8000d16:	f7ff fc6f 	bl	80005f8 <printmsg>
		uint8_t year[5];
		HAL_UART_Receive(&huart2,year,5,HAL_MAX_DELAY);
 8000d1a:	f107 010c 	add.w	r1, r7, #12
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d22:	2205      	movs	r2, #5
 8000d24:	4818      	ldr	r0, [pc, #96]	; (8000d88 <Calendar_Demo+0x224>)
 8000d26:	f002 fcf2 	bl	800370e <HAL_UART_Receive>
		uint16_t year_16t = getYear(year);
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f9e8 	bl	8001104 <getYear>
 8000d34:	4603      	mov	r3, r0
 8000d36:	843b      	strh	r3, [r7, #32]
		RTC_configureUserGivenDate(year_16t,month,date);
 8000d38:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d3c:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8000d40:	8c3b      	ldrh	r3, [r7, #32]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f944 	bl	8000fd0 <RTC_configureUserGivenDate>
		printmsg("Date is set !\r\n");
 8000d48:	481a      	ldr	r0, [pc, #104]	; (8000db4 <Calendar_Demo+0x250>)
 8000d4a:	f7ff fc55 	bl	80005f8 <printmsg>
		RTC_DisplayCurrentDate();
 8000d4e:	f000 f9a1 	bl	8001094 <RTC_DisplayCurrentDate>
		break;
 8000d52:	e009      	b.n	8000d68 <Calendar_Demo+0x204>
	case '3':
		RTC_DisplayCurrentTime();
 8000d54:	f000 f96a 	bl	800102c <RTC_DisplayCurrentTime>
		RTC_DisplayCurrentDate();
 8000d58:	f000 f99c 	bl	8001094 <RTC_DisplayCurrentDate>
		break;
 8000d5c:	e004      	b.n	8000d68 <Calendar_Demo+0x204>
	case '0':
		return 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e003      	b.n	8000d6a <Calendar_Demo+0x206>

	default :
		printmsg("Enter valid option\r\n");
 8000d62:	4815      	ldr	r0, [pc, #84]	; (8000db8 <Calendar_Demo+0x254>)
 8000d64:	f7ff fc48 	bl	80005f8 <printmsg>

	}
	return 1;
 8000d68:	2301      	movs	r3, #1

}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	372c      	adds	r7, #44	; 0x2c
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd90      	pop	{r4, r7, pc}
 8000d72:	bf00      	nop
 8000d74:	08004950 	.word	0x08004950
 8000d78:	08004974 	.word	0x08004974
 8000d7c:	08004980 	.word	0x08004980
 8000d80:	08004860 	.word	0x08004860
 8000d84:	200000aa 	.word	0x200000aa
 8000d88:	200000ac 	.word	0x200000ac
 8000d8c:	08004878 	.word	0x08004878
 8000d90:	0800498c 	.word	0x0800498c
 8000d94:	080049b4 	.word	0x080049b4
 8000d98:	080049d0 	.word	0x080049d0
 8000d9c:	080049f4 	.word	0x080049f4
 8000da0:	08004a18 	.word	0x08004a18
 8000da4:	08004a2c 	.word	0x08004a2c
 8000da8:	08004a48 	.word	0x08004a48
 8000dac:	08004a6c 	.word	0x08004a6c
 8000db0:	08004a8c 	.word	0x08004a8c
 8000db4:	08004aa4 	.word	0x08004aa4
 8000db8:	08004ab4 	.word	0x08004ab4

08000dbc <Alarm_Demo>:

uint8_t Alarm_Demo(uint8_t arg)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]

	return 0;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <LowPowerDemo>:
uint8_t LowPowerDemo(uint8_t arg)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]

	return 0;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <TimeStamp_Demo>:

uint8_t  TimeStamp_Demo(uint8_t arg)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]

	return 0;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <CalendarDemoMenuPrint>:

uint8_t CalendarDemoMenuPrint(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	uint32_t cnt=0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
	printmsg("This is calendar Demo\r\n");
 8000e0e:	481a      	ldr	r0, [pc, #104]	; (8000e78 <CalendarDemoMenuPrint+0x74>)
 8000e10:	f7ff fbf2 	bl	80005f8 <printmsg>
	printmsg("Set time-->1\r\n");
 8000e14:	4819      	ldr	r0, [pc, #100]	; (8000e7c <CalendarDemoMenuPrint+0x78>)
 8000e16:	f7ff fbef 	bl	80005f8 <printmsg>
	printmsg("Set date-->2\r\n");
 8000e1a:	4819      	ldr	r0, [pc, #100]	; (8000e80 <CalendarDemoMenuPrint+0x7c>)
 8000e1c:	f7ff fbec 	bl	80005f8 <printmsg>
	printmsg("Display current time and date-->3\r\n");
 8000e20:	4818      	ldr	r0, [pc, #96]	; (8000e84 <CalendarDemoMenuPrint+0x80>)
 8000e22:	f7ff fbe9 	bl	80005f8 <printmsg>
	printmsg("Go back to main menu -->0\r\n");
 8000e26:	4818      	ldr	r0, [pc, #96]	; (8000e88 <CalendarDemoMenuPrint+0x84>)
 8000e28:	f7ff fbe6 	bl	80005f8 <printmsg>
	printmsg("Type your option here :");
 8000e2c:	4817      	ldr	r0, [pc, #92]	; (8000e8c <CalendarDemoMenuPrint+0x88>)
 8000e2e:	f7ff fbe3 	bl	80005f8 <printmsg>
	uint8_t user_input[2];
	  while(data_user != '\r')
 8000e32:	e010      	b.n	8000e56 <CalendarDemoMenuPrint+0x52>
	   {
	 	  HAL_UART_Receive(&huart2, (uint8_t*)&data_user, 1, HAL_MAX_DELAY);
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4915      	ldr	r1, [pc, #84]	; (8000e90 <CalendarDemoMenuPrint+0x8c>)
 8000e3c:	4815      	ldr	r0, [pc, #84]	; (8000e94 <CalendarDemoMenuPrint+0x90>)
 8000e3e:	f002 fc66 	bl	800370e <HAL_UART_Receive>
	 	  user_input[cnt]=data_user;
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <CalendarDemoMenuPrint+0x8c>)
 8000e44:	7819      	ldrb	r1, [r3, #0]
 8000e46:	463a      	mov	r2, r7
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	460a      	mov	r2, r1
 8000e4e:	701a      	strb	r2, [r3, #0]
	 	  cnt++;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3301      	adds	r3, #1
 8000e54:	607b      	str	r3, [r7, #4]
	  while(data_user != '\r')
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <CalendarDemoMenuPrint+0x8c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b0d      	cmp	r3, #13
 8000e5c:	d1ea      	bne.n	8000e34 <CalendarDemoMenuPrint+0x30>
	   }

	printmsg("\r\n received inputs %d %d \r\n",user_input[0],user_input[1]);
 8000e5e:	783b      	ldrb	r3, [r7, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	787b      	ldrb	r3, [r7, #1]
 8000e64:	461a      	mov	r2, r3
 8000e66:	480c      	ldr	r0, [pc, #48]	; (8000e98 <CalendarDemoMenuPrint+0x94>)
 8000e68:	f7ff fbc6 	bl	80005f8 <printmsg>

	return user_input[0];
 8000e6c:	783b      	ldrb	r3, [r7, #0]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	08004acc 	.word	0x08004acc
 8000e7c:	08004ae4 	.word	0x08004ae4
 8000e80:	08004af4 	.word	0x08004af4
 8000e84:	08004b04 	.word	0x08004b04
 8000e88:	08004b28 	.word	0x08004b28
 8000e8c:	08004860 	.word	0x08004860
 8000e90:	200000aa 	.word	0x200000aa
 8000e94:	200000ac 	.word	0x200000ac
 8000e98:	08004878 	.word	0x08004878

08000e9c <LowPowerDemoMenuPrint>:

uint8_t LowPowerDemoMenuPrint(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
	printmsg("This is LOW power demo\r\n");
 8000ea2:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <LowPowerDemoMenuPrint+0x44>)
 8000ea4:	f7ff fba8 	bl	80005f8 <printmsg>
	printmsg("STOP mode demo+ RTC alarm\r\n");
 8000ea8:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <LowPowerDemoMenuPrint+0x48>)
 8000eaa:	f7ff fba5 	bl	80005f8 <printmsg>
	printmsg("STANDBY mode demo + RTC wakeup timer\r\n");
 8000eae:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <LowPowerDemoMenuPrint+0x4c>)
 8000eb0:	f7ff fba2 	bl	80005f8 <printmsg>
	printmsg("Type your option here :");
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LowPowerDemoMenuPrint+0x50>)
 8000eb6:	f7ff fb9f 	bl	80005f8 <printmsg>
	uint8_t user_input[2];
	HAL_UART_Receive(&huart2,user_input,2,HAL_MAX_DELAY);
 8000eba:	1d39      	adds	r1, r7, #4
 8000ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <LowPowerDemoMenuPrint+0x54>)
 8000ec4:	f002 fc23 	bl	800370e <HAL_UART_Receive>
	printmsg("\r\n received inputs %d %d \r",user_input[0],user_input[1]);
 8000ec8:	793b      	ldrb	r3, [r7, #4]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	797b      	ldrb	r3, [r7, #5]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <LowPowerDemoMenuPrint+0x58>)
 8000ed2:	f7ff fb91 	bl	80005f8 <printmsg>

	return user_input[0];
 8000ed6:	793b      	ldrb	r3, [r7, #4]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	08004b44 	.word	0x08004b44
 8000ee4:	08004b60 	.word	0x08004b60
 8000ee8:	08004b7c 	.word	0x08004b7c
 8000eec:	08004860 	.word	0x08004860
 8000ef0:	200000ac 	.word	0x200000ac
 8000ef4:	080049b4 	.word	0x080049b4

08000ef8 <Alarm_DemoPrint>:
uint8_t Alarm_DemoPrint(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
	printmsg("This is alarm Demo\r\n");
 8000efe:	4811      	ldr	r0, [pc, #68]	; (8000f44 <Alarm_DemoPrint+0x4c>)
 8000f00:	f7ff fb7a 	bl	80005f8 <printmsg>
	printmsg("Display already set alarm\r\n");
 8000f04:	4810      	ldr	r0, [pc, #64]	; (8000f48 <Alarm_DemoPrint+0x50>)
 8000f06:	f7ff fb77 	bl	80005f8 <printmsg>
	printmsg("Delete an alarm\r\n");
 8000f0a:	4810      	ldr	r0, [pc, #64]	; (8000f4c <Alarm_DemoPrint+0x54>)
 8000f0c:	f7ff fb74 	bl	80005f8 <printmsg>
	printmsg("Set new Alarm\r\r");
 8000f10:	480f      	ldr	r0, [pc, #60]	; (8000f50 <Alarm_DemoPrint+0x58>)
 8000f12:	f7ff fb71 	bl	80005f8 <printmsg>
	printmsg("Type your option here :");
 8000f16:	480f      	ldr	r0, [pc, #60]	; (8000f54 <Alarm_DemoPrint+0x5c>)
 8000f18:	f7ff fb6e 	bl	80005f8 <printmsg>
	uint8_t user_input[2];
	HAL_UART_Receive(&huart2,user_input,2,HAL_MAX_DELAY);
 8000f1c:	1d39      	adds	r1, r7, #4
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f22:	2202      	movs	r2, #2
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <Alarm_DemoPrint+0x60>)
 8000f26:	f002 fbf2 	bl	800370e <HAL_UART_Receive>
	printmsg("\r\n received inputs %d %d \r",user_input[0],user_input[1]);
 8000f2a:	793b      	ldrb	r3, [r7, #4]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	797b      	ldrb	r3, [r7, #5]
 8000f30:	461a      	mov	r2, r3
 8000f32:	480a      	ldr	r0, [pc, #40]	; (8000f5c <Alarm_DemoPrint+0x64>)
 8000f34:	f7ff fb60 	bl	80005f8 <printmsg>

	return user_input[0];
 8000f38:	793b      	ldrb	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	08004ba4 	.word	0x08004ba4
 8000f48:	08004bbc 	.word	0x08004bbc
 8000f4c:	08004bd8 	.word	0x08004bd8
 8000f50:	08004bec 	.word	0x08004bec
 8000f54:	08004860 	.word	0x08004860
 8000f58:	200000ac 	.word	0x200000ac
 8000f5c:	080049b4 	.word	0x080049b4

08000f60 <RTC_configureUserGivenTime>:

void RTC_configureUserGivenTime(uint8_t seconds,uint8_t minutes,uint8_t hour,uint8_t AMPM, uint8_t format)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4604      	mov	r4, r0
 8000f68:	4608      	mov	r0, r1
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4623      	mov	r3, r4
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	4603      	mov	r3, r0
 8000f74:	71bb      	strb	r3, [r7, #6]
 8000f76:	460b      	mov	r3, r1
 8000f78:	717b      	strb	r3, [r7, #5]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	713b      	strb	r3, [r7, #4]



	  /*##-2- Configure the Time #################################################*/
	  /* Set Time: 02:20:00 */
	  stimestructure.Hours = hour;
 8000f7e:	797b      	ldrb	r3, [r7, #5]
 8000f80:	723b      	strb	r3, [r7, #8]
	  stimestructure.Minutes = minutes;
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	727b      	strb	r3, [r7, #9]
	  stimestructure.Seconds = seconds;
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	72bb      	strb	r3, [r7, #10]
	  if(format)
 8000f8a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d007      	beq.n	8000fa2 <RTC_configureUserGivenTime+0x42>
	  {
		  if(AMPM)
 8000f92:	793b      	ldrb	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <RTC_configureUserGivenTime+0x3e>
			  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	72fb      	strb	r3, [r7, #11]
 8000f9c:	e001      	b.n	8000fa2 <RTC_configureUserGivenTime+0x42>
		  else
			  stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 8000f9e:	2340      	movs	r3, #64	; 0x40
 8000fa0:	72fb      	strb	r3, [r7, #11]
	  }
	  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
	  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]

	  if(HAL_RTC_SetTime(&hrtc,&stimestructure,RTC_FORMAT_BCD) != HAL_OK)
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <RTC_configureUserGivenTime+0x6c>)
 8000fb4:	f001 fee7 	bl	8002d86 <HAL_RTC_SetTime>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <RTC_configureUserGivenTime+0x62>
	  {
	    /* Initialization Error */
	    Error_handler();
 8000fbe:	f000 f8d7 	bl	8001170 <Error_handler>
	  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000138 	.word	0x20000138

08000fd0 <RTC_configureUserGivenDate>:
void RTC_configureUserGivenDate(uint16_t year,uint8_t month,uint8_t date)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	717b      	strb	r3, [r7, #5]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef sdatestructure;


	year = year % 100;
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <RTC_configureUserGivenDate+0x54>)
 8000fe6:	fba2 1203 	umull	r1, r2, r2, r3
 8000fea:	0952      	lsrs	r2, r2, #5
 8000fec:	2164      	movs	r1, #100	; 0x64
 8000fee:	fb01 f202 	mul.w	r2, r1, r2
 8000ff2:	1a9b      	subs	r3, r3, r2
 8000ff4:	80fb      	strh	r3, [r7, #6]

	  /*##-1- Configure the Date #################################################*/
	  /* Set Date: Tuesday February 18th 2014 */
	  sdatestructure.Year = year;
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	73fb      	strb	r3, [r7, #15]
	  sdatestructure.Month = month;
 8000ffc:	797b      	ldrb	r3, [r7, #5]
 8000ffe:	737b      	strb	r3, [r7, #13]
	  sdatestructure.Date = date;
 8001000:	793b      	ldrb	r3, [r7, #4]
 8001002:	73bb      	strb	r3, [r7, #14]
	  //sdatestructure.WeekDay = RTC_WEEKDAY_THURSDAY;

	  if(HAL_RTC_SetDate(&hrtc,&sdatestructure,RTC_FORMAT_BCD) != HAL_OK)
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2201      	movs	r2, #1
 800100a:	4619      	mov	r1, r3
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <RTC_configureUserGivenDate+0x58>)
 800100e:	f001 ffd5 	bl	8002fbc <HAL_RTC_SetDate>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <RTC_configureUserGivenDate+0x4c>
	  {
	    /* Initialization Error */
	    Error_handler();
 8001018:	f000 f8aa 	bl	8001170 <Error_handler>
	  }
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	51eb851f 	.word	0x51eb851f
 8001028:	20000138 	.word	0x20000138

0800102c <RTC_DisplayCurrentTime>:
void RTC_DisplayCurrentTime(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b094      	sub	sp, #80	; 0x50
 8001030:	af02      	add	r7, sp, #8
	char showtime[50];

	RTC_TimeTypeDef stimestructureget;

	memset(&stimestructureget,0,sizeof(stimestructureget));
 8001032:	463b      	mov	r3, r7
 8001034:	2214      	movs	r2, #20
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f002 ff17 	bl	8003e6c <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	4619      	mov	r1, r3
 8001044:	4810      	ldr	r0, [pc, #64]	; (8001088 <RTC_DisplayCurrentTime+0x5c>)
 8001046:	f001 ff5b 	bl	8002f00 <HAL_RTC_GetTime>

	/* Display time Format : hh:mm:ss */
	sprintf((char*)showtime,"Current Time is : %02d:%02d:%02d\r\n",stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 800104a:	783b      	ldrb	r3, [r7, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	787b      	ldrb	r3, [r7, #1]
 8001050:	4619      	mov	r1, r3
 8001052:	78bb      	ldrb	r3, [r7, #2]
 8001054:	f107 0014 	add.w	r0, r7, #20
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	460b      	mov	r3, r1
 800105c:	490b      	ldr	r1, [pc, #44]	; (800108c <RTC_DisplayCurrentTime+0x60>)
 800105e:	f002 ff0d 	bl	8003e7c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)showtime,strlen(showtime),HAL_MAX_DELAY);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f8d2 	bl	8000210 <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	b29a      	uxth	r2, r3
 8001070:	f107 0114 	add.w	r1, r7, #20
 8001074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <RTC_DisplayCurrentTime+0x64>)
 800107a:	f002 fab6 	bl	80035ea <HAL_UART_Transmit>

}
 800107e:	bf00      	nop
 8001080:	3748      	adds	r7, #72	; 0x48
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000138 	.word	0x20000138
 800108c:	08004bfc 	.word	0x08004bfc
 8001090:	200000ac 	.word	0x200000ac

08001094 <RTC_DisplayCurrentDate>:
void RTC_DisplayCurrentDate(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b090      	sub	sp, #64	; 0x40
 8001098:	af02      	add	r7, sp, #8
	char showtime[50];

	RTC_DateTypeDef sdatestructureget;

	memset(&sdatestructureget,0,sizeof(sdatestructureget));
 800109a:	463b      	mov	r3, r7
 800109c:	2204      	movs	r2, #4
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 fee3 	bl	8003e6c <memset>

	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 80010a6:	463b      	mov	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	4619      	mov	r1, r3
 80010ac:	4812      	ldr	r0, [pc, #72]	; (80010f8 <RTC_DisplayCurrentDate+0x64>)
 80010ae:	f002 f82c 	bl	800310a <HAL_RTC_GetDate>

	memset(showtime,0,sizeof(showtime));
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2232      	movs	r2, #50	; 0x32
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fed7 	bl	8003e6c <memset>
	sprintf((char*)showtime,"Current Date is : %02d-%2d-%2d\r\n",sdatestructureget.Month, sdatestructureget.Date, 2000 + sdatestructureget.Year);
 80010be:	787b      	ldrb	r3, [r7, #1]
 80010c0:	461a      	mov	r2, r3
 80010c2:	78bb      	ldrb	r3, [r7, #2]
 80010c4:	4619      	mov	r1, r3
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010cc:	1d38      	adds	r0, r7, #4
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	460b      	mov	r3, r1
 80010d2:	490a      	ldr	r1, [pc, #40]	; (80010fc <RTC_DisplayCurrentDate+0x68>)
 80010d4:	f002 fed2 	bl	8003e7c <siprintf>

	HAL_UART_Transmit(&huart2,(uint8_t*)showtime,strlen(showtime),HAL_MAX_DELAY);
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f898 	bl	8000210 <strlen>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	1d39      	adds	r1, r7, #4
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <RTC_DisplayCurrentDate+0x6c>)
 80010ec:	f002 fa7d 	bl	80035ea <HAL_UART_Transmit>
}
 80010f0:	bf00      	nop
 80010f2:	3738      	adds	r7, #56	; 0x38
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000138 	.word	0x20000138
 80010fc:	08004c20 	.word	0x08004c20
 8001100:	200000ac 	.word	0x200000ac

08001104 <getYear>:


uint16_t getYear(uint8_t *year)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
   uint32_t i =0;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
   uint8_t value=0;
 8001110:	2300      	movs	r3, #0
 8001112:	727b      	strb	r3, [r7, #9]
   uint16_t sum=0;
 8001114:	2300      	movs	r3, #0
 8001116:	817b      	strh	r3, [r7, #10]
   for( i = 0 ; i < 4 ; i++)
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	e01e      	b.n	800115c <getYear+0x58>
   {
	   value =  year[i] - 48;
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	3b30      	subs	r3, #48	; 0x30
 8001128:	727b      	strb	r3, [r7, #9]
	   if(value  >= 0 && value <=9 )
 800112a:	7a7b      	ldrb	r3, [r7, #9]
 800112c:	2b09      	cmp	r3, #9
 800112e:	d810      	bhi.n	8001152 <getYear+0x4e>
	   {
           sum  = sum + value * (1000 /(10 ^i));
 8001130:	7a7b      	ldrb	r3, [r7, #9]
 8001132:	b29a      	uxth	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f083 030a 	eor.w	r3, r3, #10
 800113a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800113e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	fb12 f303 	smulbb	r3, r2, r3
 8001148:	b29a      	uxth	r2, r3
 800114a:	897b      	ldrh	r3, [r7, #10]
 800114c:	4413      	add	r3, r2
 800114e:	817b      	strh	r3, [r7, #10]
 8001150:	e001      	b.n	8001156 <getYear+0x52>
	   }
	   else
	   {
		   return 0;
 8001152:	2300      	movs	r3, #0
 8001154:	e006      	b.n	8001164 <getYear+0x60>
   for( i = 0 ; i < 4 ; i++)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3301      	adds	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d9dd      	bls.n	800111e <getYear+0x1a>
	   }
   }

   return sum;
 8001162:	897b      	ldrh	r3, [r7, #10]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <Error_handler>:

void Error_handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	while(1);
 8001174:	e7fe      	b.n	8001174 <Error_handler+0x4>
	...

08001178 <HAL_MspInit>:
#include "main_app.h"

extern void Error_handler(void);

void HAL_MspInit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 fa47 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_MspInit+0x40>)
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <HAL_MspInit+0x40>)
 8001188:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800118c:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	f06f 000b 	mvn.w	r0, #11
 8001196:	f000 fa46 	bl	8001626 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	f06f 000a 	mvn.w	r0, #10
 80011a2:	f000 fa40 	bl	8001626 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	f06f 0009 	mvn.w	r0, #9
 80011ae:	f000 fa3a 	bl	8001626 <HAL_NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <HAL_UART_MspInit>:

 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4a16      	ldr	r2, [pc, #88]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 80011fc:	2304      	movs	r3, #4
 80011fe:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8001204:	2301      	movs	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 800120c:	2307      	movs	r3, #7
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <HAL_UART_MspInit+0x8c>)
 8001218:	f000 fa66 	bl	80016e8 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 800121c:	2308      	movs	r3, #8
 800121e:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4808      	ldr	r0, [pc, #32]	; (8001248 <HAL_UART_MspInit+0x8c>)
 8001228:	f000 fa5e 	bl	80016e8 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 800122c:	2026      	movs	r0, #38	; 0x26
 800122e:	f000 fa16 	bl	800165e <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8001232:	2200      	movs	r2, #0
 8001234:	210f      	movs	r1, #15
 8001236:	2026      	movs	r0, #38	; 0x26
 8001238:	f000 f9f5 	bl	8001626 <HAL_NVIC_SetPriority>

}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	; 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000

0800124c <HAL_RTC_MspInit>:
    * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
    *                the configuration information for RTC.
    * @retval None
    */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b0a6      	sub	sp, #152	; 0x98
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
	  {
	    Error_Handler();
	  }
	#elif defined (RTC_CLOCK_SOURCE_LSI)
	  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 8001254:	230c      	movs	r3, #12
 8001256:	667b      	str	r3, [r7, #100]	; 0x64
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001258:	2300      	movs	r3, #0
 800125a:	67fb      	str	r3, [r7, #124]	; 0x7c
	  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800125c:	2301      	movs	r3, #1
 800125e:	67bb      	str	r3, [r7, #120]	; 0x78
	  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001260:	2300      	movs	r3, #0
 8001262:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001268:	4618      	mov	r0, r3
 800126a:	f001 fa5d 	bl	8002728 <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_RTC_MspInit+0x2c>
	  {
	    Error_handler();
 8001274:	f7ff ff7c 	bl	8001170 <Error_handler>
	  }

	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001278:	2320      	movs	r3, #32
 800127a:	60bb      	str	r3, [r7, #8]
	  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800127c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001280:	64bb      	str	r3, [r7, #72]	; 0x48
	  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fcf4 	bl	8001c74 <HAL_RCCEx_PeriphCLKConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_RTC_MspInit+0x4a>
	  {
	    Error_handler();
 8001292:	f7ff ff6d 	bl	8001170 <Error_handler>
	#error Please select the RTC Clock source inside the main.h file
	#endif /*RTC_CLOCK_SOURCE_LSE*/

	  /*##-2- Enable RTC peripheral Clocks #######################################*/
	  /* Enable RTC Clock */
	  __HAL_RCC_RTC_ENABLE();
 8001296:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_RTC_MspInit+0x58>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]

}
 800129c:	bf00      	nop
 800129e:	3798      	adds	r7, #152	; 0x98
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	42470e3c 	.word	0x42470e3c

080012a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b0:	4a14      	ldr	r2, [pc, #80]	; (8001304 <_sbrk+0x5c>)
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <_sbrk+0x60>)
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <_sbrk+0x64>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <_sbrk+0x68>)
 80012c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d207      	bcs.n	80012e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d8:	f002 fd9e 	bl	8003e18 <__errno>
 80012dc:	4603      	mov	r3, r0
 80012de:	220c      	movs	r2, #12
 80012e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e6:	e009      	b.n	80012fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a05      	ldr	r2, [pc, #20]	; (800130c <_sbrk+0x64>)
 80012f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fa:	68fb      	ldr	r3, [r7, #12]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20020000 	.word	0x20020000
 8001308:	00000400 	.word	0x00000400
 800130c:	20000158 	.word	0x20000158
 8001310:	20000170 	.word	0x20000170

08001314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <SystemInit+0x20>)
 800131a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <SystemInit+0x20>)
 8001320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001370 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800133c:	480d      	ldr	r0, [pc, #52]	; (8001374 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800133e:	490e      	ldr	r1, [pc, #56]	; (8001378 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001340:	4a0e      	ldr	r2, [pc, #56]	; (800137c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001354:	4c0b      	ldr	r4, [pc, #44]	; (8001384 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001362:	f7ff ffd7 	bl	8001314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001366:	f002 fd5d 	bl	8003e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136a:	f7ff f96b 	bl	8000644 <main>
  bx  lr    
 800136e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001378:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800137c:	08004ca0 	.word	0x08004ca0
  ldr r2, =_sbss
 8001380:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001384:	20000170 	.word	0x20000170

08001388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001388:	e7fe      	b.n	8001388 <ADC_IRQHandler>
	...

0800138c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <HAL_Init+0x40>)
 8001396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_Init+0x40>)
 80013a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_Init+0x40>)
 80013ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 f92b 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 f808 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c0:	f7ff feda 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023c00 	.word	0x40023c00

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x54>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x58>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f943 	bl	800167a <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800140c:	f000 f90b 	bl	8001626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_InitTick+0x5c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000000 	.word	0x20000000
 8001428:	20000008 	.word	0x20000008
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x20>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x24>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_IncTick+0x24>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000008 	.word	0x20000008
 8001454:	2000015c 	.word	0x2000015c

08001458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_GetTick+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	2000015c 	.word	0x2000015c

08001470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800149c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a2:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db0b      	blt.n	80014fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 021f 	and.w	r2, r3, #31
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <__NVIC_EnableIRQ+0x38>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	2001      	movs	r0, #1
 80014f6:	fa00 f202 	lsl.w	r2, r0, r2
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f0:	f7ff ff8e 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff29 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001638:	f7ff ff3e 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff8e 	bl	8001564 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5d 	bl	8001510 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff31 	bl	80014d4 <__NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffa2 	bl	80015cc <SysTick_Config>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d106      	bne.n	80016b0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80016ae:	e005      	b.n	80016bc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80016b6:	f023 0304 	bic.w	r3, r3, #4
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e010 	.word	0xe000e010

080016cc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80016d0:	f000 f802 	bl	80016d8 <HAL_SYSTICK_Callback>
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
 8001702:	e165      	b.n	80019d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001704:	2201      	movs	r2, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	429a      	cmp	r2, r3
 800171e:	f040 8154 	bne.w	80019ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	2b01      	cmp	r3, #1
 800172c:	d005      	beq.n	800173a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001736:	2b02      	cmp	r3, #2
 8001738:	d130      	bne.n	800179c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	2203      	movs	r2, #3
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001770:	2201      	movs	r2, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 0201 	and.w	r2, r3, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d017      	beq.n	80017d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d123      	bne.n	800182c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3208      	adds	r2, #8
 80017ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	220f      	movs	r2, #15
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	08da      	lsrs	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3208      	adds	r2, #8
 8001826:	69b9      	ldr	r1, [r7, #24]
 8001828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0203 	and.w	r2, r3, #3
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 80ae 	beq.w	80019ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b5d      	ldr	r3, [pc, #372]	; (80019e8 <HAL_GPIO_Init+0x300>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a5c      	ldr	r2, [pc, #368]	; (80019e8 <HAL_GPIO_Init+0x300>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b5a      	ldr	r3, [pc, #360]	; (80019e8 <HAL_GPIO_Init+0x300>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800188a:	4a58      	ldr	r2, [pc, #352]	; (80019ec <HAL_GPIO_Init+0x304>)
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	3302      	adds	r3, #2
 8001892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	220f      	movs	r2, #15
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4f      	ldr	r2, [pc, #316]	; (80019f0 <HAL_GPIO_Init+0x308>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d025      	beq.n	8001902 <HAL_GPIO_Init+0x21a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4e      	ldr	r2, [pc, #312]	; (80019f4 <HAL_GPIO_Init+0x30c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d01f      	beq.n	80018fe <HAL_GPIO_Init+0x216>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4d      	ldr	r2, [pc, #308]	; (80019f8 <HAL_GPIO_Init+0x310>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d019      	beq.n	80018fa <HAL_GPIO_Init+0x212>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a4c      	ldr	r2, [pc, #304]	; (80019fc <HAL_GPIO_Init+0x314>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <HAL_GPIO_Init+0x20e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a4b      	ldr	r2, [pc, #300]	; (8001a00 <HAL_GPIO_Init+0x318>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00d      	beq.n	80018f2 <HAL_GPIO_Init+0x20a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4a      	ldr	r2, [pc, #296]	; (8001a04 <HAL_GPIO_Init+0x31c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d007      	beq.n	80018ee <HAL_GPIO_Init+0x206>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a49      	ldr	r2, [pc, #292]	; (8001a08 <HAL_GPIO_Init+0x320>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d101      	bne.n	80018ea <HAL_GPIO_Init+0x202>
 80018e6:	2306      	movs	r3, #6
 80018e8:	e00c      	b.n	8001904 <HAL_GPIO_Init+0x21c>
 80018ea:	2307      	movs	r3, #7
 80018ec:	e00a      	b.n	8001904 <HAL_GPIO_Init+0x21c>
 80018ee:	2305      	movs	r3, #5
 80018f0:	e008      	b.n	8001904 <HAL_GPIO_Init+0x21c>
 80018f2:	2304      	movs	r3, #4
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x21c>
 80018f6:	2303      	movs	r3, #3
 80018f8:	e004      	b.n	8001904 <HAL_GPIO_Init+0x21c>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_Init+0x21c>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_GPIO_Init+0x21c>
 8001902:	2300      	movs	r3, #0
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	f002 0203 	and.w	r2, r2, #3
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	4093      	lsls	r3, r2
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001914:	4935      	ldr	r1, [pc, #212]	; (80019ec <HAL_GPIO_Init+0x304>)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001922:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <HAL_GPIO_Init+0x324>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001946:	4a31      	ldr	r2, [pc, #196]	; (8001a0c <HAL_GPIO_Init+0x324>)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800194c:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <HAL_GPIO_Init+0x324>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001970:	4a26      	ldr	r2, [pc, #152]	; (8001a0c <HAL_GPIO_Init+0x324>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001976:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <HAL_GPIO_Init+0x324>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199a:	4a1c      	ldr	r2, [pc, #112]	; (8001a0c <HAL_GPIO_Init+0x324>)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <HAL_GPIO_Init+0x324>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c4:	4a11      	ldr	r2, [pc, #68]	; (8001a0c <HAL_GPIO_Init+0x324>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3301      	adds	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	2b0f      	cmp	r3, #15
 80019d4:	f67f ae96 	bls.w	8001704 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40013800 	.word	0x40013800
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40020400 	.word	0x40020400
 80019f8:	40020800 	.word	0x40020800
 80019fc:	40020c00 	.word	0x40020c00
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40021400 	.word	0x40021400
 8001a08:	40021800 	.word	0x40021800
 8001a0c:	40013c00 	.word	0x40013c00

08001a10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe ff52 	bl	80008d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40013c00 	.word	0x40013c00

08001a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0cc      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d90c      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b63      	ldr	r3, [pc, #396]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0b8      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d020      	beq.n	8001aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a94:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a58      	ldr	r2, [pc, #352]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aac:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a52      	ldr	r2, [pc, #328]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab8:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	494d      	ldr	r1, [pc, #308]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d044      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d119      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e07f      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d003      	beq.n	8001afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e06f      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e067      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1e:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 0203 	bic.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4934      	ldr	r1, [pc, #208]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b30:	f7ff fc92 	bl	8001458 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7ff fc8e 	bl	8001458 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e04f      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 020c 	and.w	r2, r3, #12
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1eb      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d20c      	bcs.n	8001b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e032      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4916      	ldr	r1, [pc, #88]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d009      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	490e      	ldr	r1, [pc, #56]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc6:	f000 fb7f 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	490a      	ldr	r1, [pc, #40]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	5ccb      	ldrb	r3, [r1, r3]
 8001bda:	fa22 f303 	lsr.w	r3, r2, r3
 8001bde:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fbf2 	bl	80013d0 <HAL_InitTick>

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	08004c44 	.word	0x08004c44
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000000 	.word	0x20000000

08001c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c28:	f7ff fff0 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	0a9b      	lsrs	r3, r3, #10
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	08004c54 	.word	0x08004c54

08001c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c50:	f7ff ffdc 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0b5b      	lsrs	r3, r3, #13
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4903      	ldr	r1, [pc, #12]	; (8001c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	08004c54 	.word	0x08004c54

08001c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d010      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001cac:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cb2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	496c      	ldr	r1, [pc, #432]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d010      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001cda:	4b64      	ldr	r3, [pc, #400]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ce0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce8:	4960      	ldr	r1, [pc, #384]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d017      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d08:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4955      	ldr	r1, [pc, #340]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d26:	d101      	bne.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001d34:	2301      	movs	r3, #1
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d017      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d44:	4b49      	ldr	r3, [pc, #292]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d52:	4946      	ldr	r1, [pc, #280]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d62:	d101      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001d64:	2301      	movs	r3, #1
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001d70:	2301      	movs	r3, #1
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0320 	and.w	r3, r3, #32
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 808a 	beq.w	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a38      	ldr	r2, [pc, #224]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d9e:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a33      	ldr	r2, [pc, #204]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001daa:	f7ff fb55 	bl	8001458 <HAL_GetTick>
 8001dae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001db2:	f7ff fb51 	bl	8001458 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e278      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d02f      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de8:	6a3a      	ldr	r2, [r7, #32]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d028      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dee:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d114      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff fb1f 	bl	8001458 <HAL_GetTick>
 8001e1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7ff fb1b 	bl	8001458 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e240      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ee      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e4c:	d114      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e62:	4902      	ldr	r1, [pc, #8]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]
 8001e68:	e00c      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40007000 	.word	0x40007000
 8001e74:	42470e40 	.word	0x42470e40
 8001e78:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a49      	ldr	r2, [pc, #292]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e82:	6093      	str	r3, [r2, #8]
 8001e84:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e90:	4944      	ldr	r1, [pc, #272]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d004      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001ea8:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001eaa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	4937      	ldr	r1, [pc, #220]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001eda:	4b32      	ldr	r3, [pc, #200]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee8:	492e      	ldr	r1, [pc, #184]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d011      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f02:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0a:	4926      	ldr	r1, [pc, #152]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	491a      	ldr	r1, [pc, #104]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d011      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f54:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5c:	4911      	ldr	r1, [pc, #68]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d005      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f80:	f040 80ff 	bne.w	8002182 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f8a:	f7ff fa65 	bl	8001458 <HAL_GetTick>
 8001f8e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f90:	e00e      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f92:	f7ff fa61 	bl	8001458 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d907      	bls.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e188      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	424711e0 	.word	0x424711e0
 8001fac:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fb0:	4b7e      	ldr	r3, [pc, #504]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ea      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d009      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d028      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d124      	bne.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001fe4:	4b71      	ldr	r3, [pc, #452]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fea:	0c1b      	lsrs	r3, r3, #16
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ff6:	4b6d      	ldr	r3, [pc, #436]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ffc:	0e1b      	lsrs	r3, r3, #24
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	019b      	lsls	r3, r3, #6
 800200e:	431a      	orrs	r2, r3
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	3b01      	subs	r3, #1
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	431a      	orrs	r2, r3
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	071b      	lsls	r3, r3, #28
 8002026:	4961      	ldr	r1, [pc, #388]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	2b00      	cmp	r3, #0
 8002038:	d004      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800204c:	2b00      	cmp	r3, #0
 800204e:	d035      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002058:	d130      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800205a:	4b54      	ldr	r3, [pc, #336]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800205c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	3301      	adds	r3, #1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800206c:	4b4f      	ldr	r3, [pc, #316]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800206e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002072:	0f1b      	lsrs	r3, r3, #28
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	019b      	lsls	r3, r3, #6
 8002084:	431a      	orrs	r2, r3
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	3b01      	subs	r3, #1
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	061b      	lsls	r3, r3, #24
 8002096:	431a      	orrs	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	071b      	lsls	r3, r3, #28
 800209c:	4943      	ldr	r1, [pc, #268]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80020a4:	4b41      	ldr	r3, [pc, #260]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020aa:	f023 021f 	bic.w	r2, r3, #31
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	3b01      	subs	r3, #1
 80020b4:	493d      	ldr	r1, [pc, #244]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d029      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020d0:	d124      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80020d2:	4b36      	ldr	r3, [pc, #216]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	3301      	adds	r3, #1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ea:	0f1b      	lsrs	r3, r3, #28
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	019b      	lsls	r3, r3, #6
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	3b01      	subs	r3, #1
 8002106:	041b      	lsls	r3, r3, #16
 8002108:	431a      	orrs	r2, r3
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	431a      	orrs	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	071b      	lsls	r3, r3, #28
 8002114:	4925      	ldr	r1, [pc, #148]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002124:	2b00      	cmp	r3, #0
 8002126:	d016      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	019b      	lsls	r3, r3, #6
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	3b01      	subs	r3, #1
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	071b      	lsls	r3, r3, #28
 800214e:	4917      	ldr	r1, [pc, #92]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002156:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800215c:	f7ff f97c 	bl	8001458 <HAL_GetTick>
 8002160:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002164:	f7ff f978 	bl	8001458 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e09f      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002184:	2b01      	cmp	r3, #1
 8002186:	f040 8095 	bne.w	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002190:	f7ff f962 	bl	8001458 <HAL_GetTick>
 8002194:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002196:	e00f      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002198:	f7ff f95e 	bl	8001458 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d908      	bls.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e085      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	42470068 	.word	0x42470068
 80021b4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021b8:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021c4:	d0e8      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x566>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d02b      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d127      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80021ee:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f4:	0c1b      	lsrs	r3, r3, #16
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	3301      	adds	r3, #1
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	019b      	lsls	r3, r3, #6
 800220a:	431a      	orrs	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	3b01      	subs	r3, #1
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	061b      	lsls	r3, r3, #24
 800221c:	4928      	ldr	r1, [pc, #160]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002224:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800222a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	3b01      	subs	r3, #1
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	4922      	ldr	r1, [pc, #136]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d01d      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002252:	d118      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	0e1b      	lsrs	r3, r3, #24
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	019b      	lsls	r3, r3, #6
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	085b      	lsrs	r3, r3, #1
 8002274:	3b01      	subs	r3, #1
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	431a      	orrs	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	061b      	lsls	r3, r3, #24
 800227e:	4910      	ldr	r1, [pc, #64]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800228c:	f7ff f8e4 	bl	8001458 <HAL_GetTick>
 8002290:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002294:	f7ff f8e0 	bl	8001458 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e007      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022b2:	d1ef      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3730      	adds	r7, #48	; 0x30
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	42470070 	.word	0x42470070

080022c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022cc:	b0ae      	sub	sp, #184	; 0xb8
 80022ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ee:	4bcb      	ldr	r3, [pc, #812]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	f200 8206 	bhi.w	8002708 <HAL_RCC_GetSysClockFreq+0x440>
 80022fc:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <HAL_RCC_GetSysClockFreq+0x3c>)
 80022fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002302:	bf00      	nop
 8002304:	08002339 	.word	0x08002339
 8002308:	08002709 	.word	0x08002709
 800230c:	08002709 	.word	0x08002709
 8002310:	08002709 	.word	0x08002709
 8002314:	08002341 	.word	0x08002341
 8002318:	08002709 	.word	0x08002709
 800231c:	08002709 	.word	0x08002709
 8002320:	08002709 	.word	0x08002709
 8002324:	08002349 	.word	0x08002349
 8002328:	08002709 	.word	0x08002709
 800232c:	08002709 	.word	0x08002709
 8002330:	08002709 	.word	0x08002709
 8002334:	08002539 	.word	0x08002539
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4bb9      	ldr	r3, [pc, #740]	; (8002620 <HAL_RCC_GetSysClockFreq+0x358>)
 800233a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800233e:	e1e7      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002340:	4bb8      	ldr	r3, [pc, #736]	; (8002624 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002342:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002346:	e1e3      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002348:	4bb4      	ldr	r3, [pc, #720]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002354:	4bb1      	ldr	r3, [pc, #708]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d071      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002360:	4bae      	ldr	r3, [pc, #696]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	099b      	lsrs	r3, r3, #6
 8002366:	2200      	movs	r2, #0
 8002368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800236c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002382:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002386:	4622      	mov	r2, r4
 8002388:	462b      	mov	r3, r5
 800238a:	f04f 0000 	mov.w	r0, #0
 800238e:	f04f 0100 	mov.w	r1, #0
 8002392:	0159      	lsls	r1, r3, #5
 8002394:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002398:	0150      	lsls	r0, r2, #5
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4621      	mov	r1, r4
 80023a0:	1a51      	subs	r1, r2, r1
 80023a2:	6439      	str	r1, [r7, #64]	; 0x40
 80023a4:	4629      	mov	r1, r5
 80023a6:	eb63 0301 	sbc.w	r3, r3, r1
 80023aa:	647b      	str	r3, [r7, #68]	; 0x44
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80023b8:	4649      	mov	r1, r9
 80023ba:	018b      	lsls	r3, r1, #6
 80023bc:	4641      	mov	r1, r8
 80023be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023c2:	4641      	mov	r1, r8
 80023c4:	018a      	lsls	r2, r1, #6
 80023c6:	4641      	mov	r1, r8
 80023c8:	1a51      	subs	r1, r2, r1
 80023ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80023cc:	4649      	mov	r1, r9
 80023ce:	eb63 0301 	sbc.w	r3, r3, r1
 80023d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80023e0:	4649      	mov	r1, r9
 80023e2:	00cb      	lsls	r3, r1, #3
 80023e4:	4641      	mov	r1, r8
 80023e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ea:	4641      	mov	r1, r8
 80023ec:	00ca      	lsls	r2, r1, #3
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	4603      	mov	r3, r0
 80023f4:	4622      	mov	r2, r4
 80023f6:	189b      	adds	r3, r3, r2
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
 80023fa:	462b      	mov	r3, r5
 80023fc:	460a      	mov	r2, r1
 80023fe:	eb42 0303 	adc.w	r3, r2, r3
 8002402:	637b      	str	r3, [r7, #52]	; 0x34
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002410:	4629      	mov	r1, r5
 8002412:	024b      	lsls	r3, r1, #9
 8002414:	4621      	mov	r1, r4
 8002416:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800241a:	4621      	mov	r1, r4
 800241c:	024a      	lsls	r2, r1, #9
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002426:	2200      	movs	r2, #0
 8002428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800242c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002430:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002434:	f7fd ff44 	bl	80002c0 <__aeabi_uldivmod>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4613      	mov	r3, r2
 800243e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002442:	e067      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002444:	4b75      	ldr	r3, [pc, #468]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	2200      	movs	r2, #0
 800244c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002450:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002454:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245c:	67bb      	str	r3, [r7, #120]	; 0x78
 800245e:	2300      	movs	r3, #0
 8002460:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002462:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002466:	4622      	mov	r2, r4
 8002468:	462b      	mov	r3, r5
 800246a:	f04f 0000 	mov.w	r0, #0
 800246e:	f04f 0100 	mov.w	r1, #0
 8002472:	0159      	lsls	r1, r3, #5
 8002474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002478:	0150      	lsls	r0, r2, #5
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4621      	mov	r1, r4
 8002480:	1a51      	subs	r1, r2, r1
 8002482:	62b9      	str	r1, [r7, #40]	; 0x28
 8002484:	4629      	mov	r1, r5
 8002486:	eb63 0301 	sbc.w	r3, r3, r1
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002498:	4649      	mov	r1, r9
 800249a:	018b      	lsls	r3, r1, #6
 800249c:	4641      	mov	r1, r8
 800249e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024a2:	4641      	mov	r1, r8
 80024a4:	018a      	lsls	r2, r1, #6
 80024a6:	4641      	mov	r1, r8
 80024a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80024ac:	4649      	mov	r1, r9
 80024ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024c6:	4692      	mov	sl, r2
 80024c8:	469b      	mov	fp, r3
 80024ca:	4623      	mov	r3, r4
 80024cc:	eb1a 0303 	adds.w	r3, sl, r3
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	462b      	mov	r3, r5
 80024d4:	eb4b 0303 	adc.w	r3, fp, r3
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024e6:	4629      	mov	r1, r5
 80024e8:	028b      	lsls	r3, r1, #10
 80024ea:	4621      	mov	r1, r4
 80024ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f0:	4621      	mov	r1, r4
 80024f2:	028a      	lsls	r2, r1, #10
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024fc:	2200      	movs	r2, #0
 80024fe:	673b      	str	r3, [r7, #112]	; 0x70
 8002500:	677a      	str	r2, [r7, #116]	; 0x74
 8002502:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002506:	f7fd fedb 	bl	80002c0 <__aeabi_uldivmod>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4613      	mov	r3, r2
 8002510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002514:	4b41      	ldr	r3, [pc, #260]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002526:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800252a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002536:	e0eb      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002538:	4b38      	ldr	r3, [pc, #224]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002544:	4b35      	ldr	r3, [pc, #212]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d06b      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002550:	4b32      	ldr	r3, [pc, #200]	; (800261c <HAL_RCC_GetSysClockFreq+0x354>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	099b      	lsrs	r3, r3, #6
 8002556:	2200      	movs	r2, #0
 8002558:	66bb      	str	r3, [r7, #104]	; 0x68
 800255a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800255c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800255e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002562:	663b      	str	r3, [r7, #96]	; 0x60
 8002564:	2300      	movs	r3, #0
 8002566:	667b      	str	r3, [r7, #100]	; 0x64
 8002568:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800256c:	4622      	mov	r2, r4
 800256e:	462b      	mov	r3, r5
 8002570:	f04f 0000 	mov.w	r0, #0
 8002574:	f04f 0100 	mov.w	r1, #0
 8002578:	0159      	lsls	r1, r3, #5
 800257a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800257e:	0150      	lsls	r0, r2, #5
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4621      	mov	r1, r4
 8002586:	1a51      	subs	r1, r2, r1
 8002588:	61b9      	str	r1, [r7, #24]
 800258a:	4629      	mov	r1, r5
 800258c:	eb63 0301 	sbc.w	r3, r3, r1
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800259e:	4659      	mov	r1, fp
 80025a0:	018b      	lsls	r3, r1, #6
 80025a2:	4651      	mov	r1, sl
 80025a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025a8:	4651      	mov	r1, sl
 80025aa:	018a      	lsls	r2, r1, #6
 80025ac:	4651      	mov	r1, sl
 80025ae:	ebb2 0801 	subs.w	r8, r2, r1
 80025b2:	4659      	mov	r1, fp
 80025b4:	eb63 0901 	sbc.w	r9, r3, r1
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025cc:	4690      	mov	r8, r2
 80025ce:	4699      	mov	r9, r3
 80025d0:	4623      	mov	r3, r4
 80025d2:	eb18 0303 	adds.w	r3, r8, r3
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	462b      	mov	r3, r5
 80025da:	eb49 0303 	adc.w	r3, r9, r3
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025ec:	4629      	mov	r1, r5
 80025ee:	024b      	lsls	r3, r1, #9
 80025f0:	4621      	mov	r1, r4
 80025f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025f6:	4621      	mov	r1, r4
 80025f8:	024a      	lsls	r2, r1, #9
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002602:	2200      	movs	r2, #0
 8002604:	65bb      	str	r3, [r7, #88]	; 0x58
 8002606:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002608:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800260c:	f7fd fe58 	bl	80002c0 <__aeabi_uldivmod>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4613      	mov	r3, r2
 8002616:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800261a:	e065      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x420>
 800261c:	40023800 	.word	0x40023800
 8002620:	00f42400 	.word	0x00f42400
 8002624:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002628:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <HAL_RCC_GetSysClockFreq+0x458>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	2200      	movs	r2, #0
 8002630:	4618      	mov	r0, r3
 8002632:	4611      	mov	r1, r2
 8002634:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002638:	653b      	str	r3, [r7, #80]	; 0x50
 800263a:	2300      	movs	r3, #0
 800263c:	657b      	str	r3, [r7, #84]	; 0x54
 800263e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002642:	4642      	mov	r2, r8
 8002644:	464b      	mov	r3, r9
 8002646:	f04f 0000 	mov.w	r0, #0
 800264a:	f04f 0100 	mov.w	r1, #0
 800264e:	0159      	lsls	r1, r3, #5
 8002650:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002654:	0150      	lsls	r0, r2, #5
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4641      	mov	r1, r8
 800265c:	1a51      	subs	r1, r2, r1
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	4649      	mov	r1, r9
 8002662:	eb63 0301 	sbc.w	r3, r3, r1
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002674:	4659      	mov	r1, fp
 8002676:	018b      	lsls	r3, r1, #6
 8002678:	4651      	mov	r1, sl
 800267a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800267e:	4651      	mov	r1, sl
 8002680:	018a      	lsls	r2, r1, #6
 8002682:	4651      	mov	r1, sl
 8002684:	1a54      	subs	r4, r2, r1
 8002686:	4659      	mov	r1, fp
 8002688:	eb63 0501 	sbc.w	r5, r3, r1
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	00eb      	lsls	r3, r5, #3
 8002696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800269a:	00e2      	lsls	r2, r4, #3
 800269c:	4614      	mov	r4, r2
 800269e:	461d      	mov	r5, r3
 80026a0:	4643      	mov	r3, r8
 80026a2:	18e3      	adds	r3, r4, r3
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	464b      	mov	r3, r9
 80026a8:	eb45 0303 	adc.w	r3, r5, r3
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ba:	4629      	mov	r1, r5
 80026bc:	028b      	lsls	r3, r1, #10
 80026be:	4621      	mov	r1, r4
 80026c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026c4:	4621      	mov	r1, r4
 80026c6:	028a      	lsls	r2, r1, #10
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026d0:	2200      	movs	r2, #0
 80026d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80026d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026da:	f7fd fdf1 	bl	80002c0 <__aeabi_uldivmod>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4613      	mov	r3, r2
 80026e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026e8:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <HAL_RCC_GetSysClockFreq+0x458>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	0f1b      	lsrs	r3, r3, #28
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80026f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002702:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002706:	e003      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCC_GetSysClockFreq+0x45c>)
 800270a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800270e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002710:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002714:	4618      	mov	r0, r3
 8002716:	37b8      	adds	r7, #184	; 0xb8
 8002718:	46bd      	mov	sp, r7
 800271a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	00f42400 	.word	0x00f42400

08002728 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e28d      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8083 	beq.w	800284e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002748:	4b94      	ldr	r3, [pc, #592]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b04      	cmp	r3, #4
 8002752:	d019      	beq.n	8002788 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002754:	4b91      	ldr	r3, [pc, #580]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800275c:	2b08      	cmp	r3, #8
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002760:	4b8e      	ldr	r3, [pc, #568]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276c:	d00c      	beq.n	8002788 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276e:	4b8b      	ldr	r3, [pc, #556]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d112      	bne.n	80027a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277a:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002786:	d10b      	bne.n	80027a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	4b84      	ldr	r3, [pc, #528]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d05b      	beq.n	800284c <HAL_RCC_OscConfig+0x124>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d157      	bne.n	800284c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e25a      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a8:	d106      	bne.n	80027b8 <HAL_RCC_OscConfig+0x90>
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7b      	ldr	r2, [pc, #492]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e01d      	b.n	80027f4 <HAL_RCC_OscConfig+0xcc>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0xb4>
 80027c2:	4b76      	ldr	r3, [pc, #472]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a75      	ldr	r2, [pc, #468]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	4b73      	ldr	r3, [pc, #460]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a72      	ldr	r2, [pc, #456]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e00b      	b.n	80027f4 <HAL_RCC_OscConfig+0xcc>
 80027dc:	4b6f      	ldr	r3, [pc, #444]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a6e      	ldr	r2, [pc, #440]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b6c      	ldr	r3, [pc, #432]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a6b      	ldr	r2, [pc, #428]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80027ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe fe2c 	bl	8001458 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002804:	f7fe fe28 	bl	8001458 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e21f      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b61      	ldr	r3, [pc, #388]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0xdc>
 8002822:	e014      	b.n	800284e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7fe fe18 	bl	8001458 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800282c:	f7fe fe14 	bl	8001458 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e20b      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x104>
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d06f      	beq.n	800293a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800285a:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b00      	cmp	r3, #0
 8002864:	d017      	beq.n	8002896 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002866:	4b4d      	ldr	r3, [pc, #308]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800286e:	2b08      	cmp	r3, #8
 8002870:	d105      	bne.n	800287e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002872:	4b4a      	ldr	r3, [pc, #296]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d11c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288a:	4b44      	ldr	r3, [pc, #272]	; (800299c <HAL_RCC_OscConfig+0x274>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d116      	bne.n	80028c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_RCC_OscConfig+0x186>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e1d3      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4937      	ldr	r1, [pc, #220]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c2:	e03a      	b.n	800293a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d020      	beq.n	800290e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028cc:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <HAL_RCC_OscConfig+0x278>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe fdc1 	bl	8001458 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028da:	f7fe fdbd 	bl	8001458 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1b4      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	4b2b      	ldr	r3, [pc, #172]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	4b28      	ldr	r3, [pc, #160]	; (800299c <HAL_RCC_OscConfig+0x274>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4925      	ldr	r1, [pc, #148]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
 800290c:	e015      	b.n	800293a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290e:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_RCC_OscConfig+0x278>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fda0 	bl	8001458 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800291c:	f7fe fd9c 	bl	8001458 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e193      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d036      	beq.n	80029b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d016      	beq.n	800297c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_RCC_OscConfig+0x27c>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe fd80 	bl	8001458 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295c:	f7fe fd7c 	bl	8001458 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e173      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x234>
 800297a:	e01b      	b.n	80029b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_RCC_OscConfig+0x27c>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7fe fd69 	bl	8001458 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002988:	e00e      	b.n	80029a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298a:	f7fe fd65 	bl	8001458 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d907      	bls.n	80029a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e15c      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
 800299c:	40023800 	.word	0x40023800
 80029a0:	42470000 	.word	0x42470000
 80029a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	4b8a      	ldr	r3, [pc, #552]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ea      	bne.n	800298a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 8097 	beq.w	8002af0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c6:	4b83      	ldr	r3, [pc, #524]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10f      	bne.n	80029f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	4b7f      	ldr	r3, [pc, #508]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a7e      	ldr	r2, [pc, #504]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b7c      	ldr	r3, [pc, #496]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ee:	2301      	movs	r3, #1
 80029f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f2:	4b79      	ldr	r3, [pc, #484]	; (8002bd8 <HAL_RCC_OscConfig+0x4b0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d118      	bne.n	8002a30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fe:	4b76      	ldr	r3, [pc, #472]	; (8002bd8 <HAL_RCC_OscConfig+0x4b0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a75      	ldr	r2, [pc, #468]	; (8002bd8 <HAL_RCC_OscConfig+0x4b0>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fd25 	bl	8001458 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a12:	f7fe fd21 	bl	8001458 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e118      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <HAL_RCC_OscConfig+0x4b0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x31e>
 8002a38:	4b66      	ldr	r3, [pc, #408]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	4a65      	ldr	r2, [pc, #404]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6713      	str	r3, [r2, #112]	; 0x70
 8002a44:	e01c      	b.n	8002a80 <HAL_RCC_OscConfig+0x358>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x340>
 8002a4e:	4b61      	ldr	r3, [pc, #388]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	4a60      	ldr	r2, [pc, #384]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5a:	4b5e      	ldr	r3, [pc, #376]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a5d      	ldr	r2, [pc, #372]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0x358>
 8002a68:	4b5a      	ldr	r3, [pc, #360]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	4a59      	ldr	r2, [pc, #356]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
 8002a74:	4b57      	ldr	r3, [pc, #348]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a56      	ldr	r2, [pc, #344]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002a7a:	f023 0304 	bic.w	r3, r3, #4
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d015      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe fce6 	bl	8001458 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe fce2 	bl	8001458 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e0d7      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa6:	4b4b      	ldr	r3, [pc, #300]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0ee      	beq.n	8002a90 <HAL_RCC_OscConfig+0x368>
 8002ab2:	e014      	b.n	8002ade <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fcd0 	bl	8001458 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	f7fe fccc 	bl	8001458 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0c1      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad2:	4b40      	ldr	r3, [pc, #256]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1ee      	bne.n	8002abc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ade:	7dfb      	ldrb	r3, [r7, #23]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae4:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	4a3a      	ldr	r2, [pc, #232]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80ad 	beq.w	8002c54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002afa:	4b36      	ldr	r3, [pc, #216]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d060      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d145      	bne.n	8002b9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0e:	4b33      	ldr	r3, [pc, #204]	; (8002bdc <HAL_RCC_OscConfig+0x4b4>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe fca0 	bl	8001458 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe fc9c 	bl	8001458 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e093      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2e:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	019b      	lsls	r3, r3, #6
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	3b01      	subs	r3, #1
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	071b      	lsls	r3, r3, #28
 8002b66:	491b      	ldr	r1, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_RCC_OscConfig+0x4b4>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7fe fc71 	bl	8001458 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7fe fc6d 	bl	8001458 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e064      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x452>
 8002b98:	e05c      	b.n	8002c54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_RCC_OscConfig+0x4b4>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fc5a 	bl	8001458 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe fc56 	bl	8001458 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e04d      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_RCC_OscConfig+0x4ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x480>
 8002bc6:	e045      	b.n	8002c54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e040      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be0:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d030      	beq.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d129      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d122      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c10:	4013      	ands	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d119      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	085b      	lsrs	r3, r3, #1
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d10f      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800

08002c64 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e083      	b.n	8002d7e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7f5b      	ldrb	r3, [r3, #29]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe fae0 	bl	800124c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	22ca      	movs	r2, #202	; 0xca
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2253      	movs	r2, #83	; 0x53
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 faa8 	bl	80031f8 <RTC_EnterInitMode>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	22ff      	movs	r2, #255	; 0xff
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e05e      	b.n	8002d7e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6899      	ldr	r1, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68d2      	ldr	r2, [r2, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6919      	ldr	r1, [r3, #16]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	041a      	lsls	r2, r3, #16
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d1e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10e      	bne.n	8002d4c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fa3a 	bl	80031a8 <HAL_RTC_WaitForSynchro>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	22ff      	movs	r2, #255	; 0xff
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2204      	movs	r2, #4
 8002d46:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e018      	b.n	8002d7e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	22ff      	movs	r2, #255	; 0xff
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d86:	b590      	push	{r4, r7, lr}
 8002d88:	b087      	sub	sp, #28
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	7f1b      	ldrb	r3, [r3, #28]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_RTC_SetTime+0x1c>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e0aa      	b.n	8002ef8 <HAL_RTC_SetTime+0x172>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2202      	movs	r2, #2
 8002dac:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d126      	bne.n	8002e02 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d102      	bne.n	8002dc8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fa3f 	bl	8003250 <RTC_ByteToBcd2>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	785b      	ldrb	r3, [r3, #1]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fa38 	bl	8003250 <RTC_ByteToBcd2>
 8002de0:	4603      	mov	r3, r0
 8002de2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002de4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	789b      	ldrb	r3, [r3, #2]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fa30 	bl	8003250 <RTC_ByteToBcd2>
 8002df0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002df2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	78db      	ldrb	r3, [r3, #3]
 8002dfa:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	e018      	b.n	8002e34 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2200      	movs	r2, #0
 8002e14:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	785b      	ldrb	r3, [r3, #1]
 8002e20:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e22:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002e28:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	78db      	ldrb	r3, [r3, #3]
 8002e2e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	22ca      	movs	r2, #202	; 0xca
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2253      	movs	r2, #83	; 0x53
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f9d7 	bl	80031f8 <RTC_EnterInitMode>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00b      	beq.n	8002e68 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	22ff      	movs	r2, #255	; 0xff
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e047      	b.n	8002ef8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e72:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e76:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e86:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6899      	ldr	r1, [r3, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d111      	bne.n	8002ee2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f972 	bl	80031a8 <HAL_RTC_WaitForSynchro>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	22ff      	movs	r2, #255	; 0xff
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	22ff      	movs	r2, #255	; 0xff
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
  }
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd90      	pop	{r4, r7, pc}

08002f00 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f32:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f36:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	0c1b      	lsrs	r3, r3, #16
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d11a      	bne.n	8002fb2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 f983 	bl	800328c <RTC_Bcd2ToByte>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	785b      	ldrb	r3, [r3, #1]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f97a 	bl	800328c <RTC_Bcd2ToByte>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	789b      	ldrb	r3, [r3, #2]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 f971 	bl	800328c <RTC_Bcd2ToByte>
 8002faa:	4603      	mov	r3, r0
 8002fac:	461a      	mov	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	7f1b      	ldrb	r3, [r3, #28]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RTC_SetDate+0x1c>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e094      	b.n	8003102 <HAL_RTC_SetDate+0x146>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10e      	bne.n	8003008 <HAL_RTC_SetDate+0x4c>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	785b      	ldrb	r3, [r3, #1]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	785b      	ldrb	r3, [r3, #1]
 8002ffa:	f023 0310 	bic.w	r3, r3, #16
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	330a      	adds	r3, #10
 8003002:	b2da      	uxtb	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d11c      	bne.n	8003048 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	78db      	ldrb	r3, [r3, #3]
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f91c 	bl	8003250 <RTC_ByteToBcd2>
 8003018:	4603      	mov	r3, r0
 800301a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	785b      	ldrb	r3, [r3, #1]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 f915 	bl	8003250 <RTC_ByteToBcd2>
 8003026:	4603      	mov	r3, r0
 8003028:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800302a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	789b      	ldrb	r3, [r3, #2]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f90d 	bl	8003250 <RTC_ByteToBcd2>
 8003036:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003038:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	e00e      	b.n	8003066 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	78db      	ldrb	r3, [r3, #3]
 800304c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	785b      	ldrb	r3, [r3, #1]
 8003052:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003054:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800305a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	22ca      	movs	r2, #202	; 0xca
 800306c:	625a      	str	r2, [r3, #36]	; 0x24
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2253      	movs	r2, #83	; 0x53
 8003074:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f8be 	bl	80031f8 <RTC_EnterInitMode>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00b      	beq.n	800309a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	22ff      	movs	r2, #255	; 0xff
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2204      	movs	r2, #4
 800308e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e033      	b.n	8003102 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030b8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d111      	bne.n	80030ec <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f86d 	bl	80031a8 <HAL_RTC_WaitForSynchro>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00b      	beq.n	80030ec <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	22ff      	movs	r2, #255	; 0xff
 80030da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2204      	movs	r2, #4
 80030e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e00a      	b.n	8003102 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	22ff      	movs	r2, #255	; 0xff
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003100:	2300      	movs	r3, #0
  }
}
 8003102:	4618      	mov	r0, r3
 8003104:	371c      	adds	r7, #28
 8003106:	46bd      	mov	sp, r7
 8003108:	bd90      	pop	{r4, r7, pc}

0800310a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003124:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003128:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	b2da      	uxtb	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	b2da      	uxtb	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	0b5b      	lsrs	r3, r3, #13
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11a      	bne.n	800319e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	78db      	ldrb	r3, [r3, #3]
 800316c:	4618      	mov	r0, r3
 800316e:	f000 f88d 	bl	800328c <RTC_Bcd2ToByte>
 8003172:	4603      	mov	r3, r0
 8003174:	461a      	mov	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	785b      	ldrb	r3, [r3, #1]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f884 	bl	800328c <RTC_Bcd2ToByte>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	789b      	ldrb	r3, [r3, #2]
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f87b 	bl	800328c <RTC_Bcd2ToByte>
 8003196:	4603      	mov	r3, r0
 8003198:	461a      	mov	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031c2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031c4:	f7fe f948 	bl	8001458 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80031ca:	e009      	b.n	80031e0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80031cc:	f7fe f944 	bl	8001458 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031da:	d901      	bls.n	80031e0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e007      	b.n	80031f0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0ee      	beq.n	80031cc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d119      	bne.n	8003246 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800321a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800321c:	f7fe f91c 	bl	8001458 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003222:	e009      	b.n	8003238 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003224:	f7fe f918 	bl	8001458 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003232:	d901      	bls.n	8003238 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e007      	b.n	8003248 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0ee      	beq.n	8003224 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800325e:	e005      	b.n	800326c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3301      	adds	r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	3b0a      	subs	r3, #10
 800326a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	2b09      	cmp	r3, #9
 8003270:	d8f6      	bhi.n	8003260 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	b2da      	uxtb	r2, r3
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	4313      	orrs	r3, r2
 800327e:	b2db      	uxtb	r3, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	b2db      	uxtb	r3, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d122      	bne.n	8003324 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d11b      	bne.n	8003324 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0202 	mvn.w	r2, #2
 80032f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f8ee 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 8003310:	e005      	b.n	800331e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f8e0 	bl	80034d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f8f1 	bl	8003500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b04      	cmp	r3, #4
 8003330:	d122      	bne.n	8003378 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b04      	cmp	r3, #4
 800333e:	d11b      	bne.n	8003378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0204 	mvn.w	r2, #4
 8003348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f8c4 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 8003364:	e005      	b.n	8003372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f8b6 	bl	80034d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f8c7 	bl	8003500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b08      	cmp	r3, #8
 8003384:	d122      	bne.n	80033cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b08      	cmp	r3, #8
 8003392:	d11b      	bne.n	80033cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0208 	mvn.w	r2, #8
 800339c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2204      	movs	r2, #4
 80033a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f89a 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 80033b8:	e005      	b.n	80033c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f88c 	bl	80034d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f89d 	bl	8003500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d122      	bne.n	8003420 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d11b      	bne.n	8003420 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0210 	mvn.w	r2, #16
 80033f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2208      	movs	r2, #8
 80033f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f870 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f862 	bl	80034d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f873 	bl	8003500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d10e      	bne.n	800344c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b01      	cmp	r3, #1
 800343a:	d107      	bne.n	800344c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0201 	mvn.w	r2, #1
 8003444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd fa3c 	bl	80008c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003456:	2b80      	cmp	r3, #128	; 0x80
 8003458:	d10e      	bne.n	8003478 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b80      	cmp	r3, #128	; 0x80
 8003466:	d107      	bne.n	8003478 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f862 	bl	800353c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d10e      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d107      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f838 	bl	8003514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d107      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0220 	mvn.w	r2, #32
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f82c 	bl	8003528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e03f      	b.n	80035e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fd fe20 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2224      	movs	r2, #36	; 0x24
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003592:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f9cb 	bl	8003930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b08a      	sub	sp, #40	; 0x28
 80035ee:	af02      	add	r7, sp, #8
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	603b      	str	r3, [r7, #0]
 80035f6:	4613      	mov	r3, r2
 80035f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b20      	cmp	r3, #32
 8003608:	d17c      	bne.n	8003704 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <HAL_UART_Transmit+0x2c>
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e075      	b.n	8003706 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_UART_Transmit+0x3e>
 8003624:	2302      	movs	r3, #2
 8003626:	e06e      	b.n	8003706 <HAL_UART_Transmit+0x11c>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2221      	movs	r2, #33	; 0x21
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800363e:	f7fd ff0b 	bl	8001458 <HAL_GetTick>
 8003642:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	88fa      	ldrh	r2, [r7, #6]
 8003648:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	88fa      	ldrh	r2, [r7, #6]
 800364e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003658:	d108      	bne.n	800366c <HAL_UART_Transmit+0x82>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d104      	bne.n	800366c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	e003      	b.n	8003674 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003670:	2300      	movs	r3, #0
 8003672:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800367c:	e02a      	b.n	80036d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2200      	movs	r2, #0
 8003686:	2180      	movs	r1, #128	; 0x80
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f8e2 	bl	8003852 <UART_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e036      	b.n	8003706 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10b      	bne.n	80036b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	3302      	adds	r3, #2
 80036b2:	61bb      	str	r3, [r7, #24]
 80036b4:	e007      	b.n	80036c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	3301      	adds	r3, #1
 80036c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1cf      	bne.n	800367e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2200      	movs	r2, #0
 80036e6:	2140      	movs	r1, #64	; 0x40
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f8b2 	bl	8003852 <UART_WaitOnFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e006      	b.n	8003706 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b08a      	sub	sp, #40	; 0x28
 8003712:	af02      	add	r7, sp, #8
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	603b      	str	r3, [r7, #0]
 800371a:	4613      	mov	r3, r2
 800371c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b20      	cmp	r3, #32
 800372c:	f040 808c 	bne.w	8003848 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <HAL_UART_Receive+0x2e>
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e084      	b.n	800384a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_UART_Receive+0x40>
 800374a:	2302      	movs	r3, #2
 800374c:	e07d      	b.n	800384a <HAL_UART_Receive+0x13c>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2222      	movs	r2, #34	; 0x22
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800376a:	f7fd fe75 	bl	8001458 <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	88fa      	ldrh	r2, [r7, #6]
 800377a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003784:	d108      	bne.n	8003798 <HAL_UART_Receive+0x8a>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d104      	bne.n	8003798 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	e003      	b.n	80037a0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800379c:	2300      	movs	r3, #0
 800379e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80037a8:	e043      	b.n	8003832 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2200      	movs	r2, #0
 80037b2:	2120      	movs	r1, #32
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f84c 	bl	8003852 <UART_WaitOnFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e042      	b.n	800384a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10c      	bne.n	80037e4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	3302      	adds	r3, #2
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	e01f      	b.n	8003824 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ec:	d007      	beq.n	80037fe <HAL_UART_Receive+0xf0>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <HAL_UART_Receive+0xfe>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	b2da      	uxtb	r2, r3
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	e008      	b.n	800381e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003818:	b2da      	uxtb	r2, r3
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3301      	adds	r3, #1
 8003822:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1b6      	bne.n	80037aa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	e000      	b.n	800384a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003848:	2302      	movs	r3, #2
  }
}
 800384a:	4618      	mov	r0, r3
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b090      	sub	sp, #64	; 0x40
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	4613      	mov	r3, r2
 8003860:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003862:	e050      	b.n	8003906 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800386a:	d04c      	beq.n	8003906 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800386c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800386e:	2b00      	cmp	r3, #0
 8003870:	d007      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0x30>
 8003872:	f7fd fdf1 	bl	8001458 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800387e:	429a      	cmp	r2, r3
 8003880:	d241      	bcs.n	8003906 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038a2:	637a      	str	r2, [r7, #52]	; 0x34
 80038a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e5      	bne.n	8003882 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3314      	adds	r3, #20
 80038bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	613b      	str	r3, [r7, #16]
   return(result);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3314      	adds	r3, #20
 80038d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038d6:	623a      	str	r2, [r7, #32]
 80038d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	69f9      	ldr	r1, [r7, #28]
 80038dc:	6a3a      	ldr	r2, [r7, #32]
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e5      	bne.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e00f      	b.n	8003926 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4013      	ands	r3, r2
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	429a      	cmp	r2, r3
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	429a      	cmp	r2, r3
 8003922:	d09f      	beq.n	8003864 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3740      	adds	r7, #64	; 0x40
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003934:	b0c0      	sub	sp, #256	; 0x100
 8003936:	af00      	add	r7, sp, #0
 8003938:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	68d9      	ldr	r1, [r3, #12]
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	ea40 0301 	orr.w	r3, r0, r1
 8003958:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	431a      	orrs	r2, r3
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	431a      	orrs	r2, r3
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003988:	f021 010c 	bic.w	r1, r1, #12
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003996:	430b      	orrs	r3, r1
 8003998:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039aa:	6999      	ldr	r1, [r3, #24]
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	ea40 0301 	orr.w	r3, r0, r1
 80039b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4b8f      	ldr	r3, [pc, #572]	; (8003bfc <UART_SetConfig+0x2cc>)
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d005      	beq.n	80039d0 <UART_SetConfig+0xa0>
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4b8d      	ldr	r3, [pc, #564]	; (8003c00 <UART_SetConfig+0x2d0>)
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d104      	bne.n	80039da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039d0:	f7fe f93c 	bl	8001c4c <HAL_RCC_GetPCLK2Freq>
 80039d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039d8:	e003      	b.n	80039e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039da:	f7fe f923 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 80039de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ec:	f040 810c 	bne.w	8003c08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a02:	4622      	mov	r2, r4
 8003a04:	462b      	mov	r3, r5
 8003a06:	1891      	adds	r1, r2, r2
 8003a08:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a0a:	415b      	adcs	r3, r3
 8003a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a12:	4621      	mov	r1, r4
 8003a14:	eb12 0801 	adds.w	r8, r2, r1
 8003a18:	4629      	mov	r1, r5
 8003a1a:	eb43 0901 	adc.w	r9, r3, r1
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a32:	4690      	mov	r8, r2
 8003a34:	4699      	mov	r9, r3
 8003a36:	4623      	mov	r3, r4
 8003a38:	eb18 0303 	adds.w	r3, r8, r3
 8003a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a40:	462b      	mov	r3, r5
 8003a42:	eb49 0303 	adc.w	r3, r9, r3
 8003a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a5e:	460b      	mov	r3, r1
 8003a60:	18db      	adds	r3, r3, r3
 8003a62:	653b      	str	r3, [r7, #80]	; 0x50
 8003a64:	4613      	mov	r3, r2
 8003a66:	eb42 0303 	adc.w	r3, r2, r3
 8003a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a74:	f7fc fc24 	bl	80002c0 <__aeabi_uldivmod>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <UART_SetConfig+0x2d4>)
 8003a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	011c      	lsls	r4, r3, #4
 8003a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a98:	4642      	mov	r2, r8
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	1891      	adds	r1, r2, r2
 8003a9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003aa0:	415b      	adcs	r3, r3
 8003aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	eb12 0a01 	adds.w	sl, r2, r1
 8003aae:	4649      	mov	r1, r9
 8003ab0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ac0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ac4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ac8:	4692      	mov	sl, r2
 8003aca:	469b      	mov	fp, r3
 8003acc:	4643      	mov	r3, r8
 8003ace:	eb1a 0303 	adds.w	r3, sl, r3
 8003ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	eb4b 0303 	adc.w	r3, fp, r3
 8003adc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003af0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003af4:	460b      	mov	r3, r1
 8003af6:	18db      	adds	r3, r3, r3
 8003af8:	643b      	str	r3, [r7, #64]	; 0x40
 8003afa:	4613      	mov	r3, r2
 8003afc:	eb42 0303 	adc.w	r3, r2, r3
 8003b00:	647b      	str	r3, [r7, #68]	; 0x44
 8003b02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b0a:	f7fc fbd9 	bl	80002c0 <__aeabi_uldivmod>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	4b3b      	ldr	r3, [pc, #236]	; (8003c04 <UART_SetConfig+0x2d4>)
 8003b16:	fba3 2301 	umull	r2, r3, r3, r1
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2264      	movs	r2, #100	; 0x64
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	1acb      	subs	r3, r1, r3
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b2a:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <UART_SetConfig+0x2d4>)
 8003b2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b38:	441c      	add	r4, r3
 8003b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	464b      	mov	r3, r9
 8003b50:	1891      	adds	r1, r2, r2
 8003b52:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b54:	415b      	adcs	r3, r3
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b5c:	4641      	mov	r1, r8
 8003b5e:	1851      	adds	r1, r2, r1
 8003b60:	6339      	str	r1, [r7, #48]	; 0x30
 8003b62:	4649      	mov	r1, r9
 8003b64:	414b      	adcs	r3, r1
 8003b66:	637b      	str	r3, [r7, #52]	; 0x34
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b74:	4659      	mov	r1, fp
 8003b76:	00cb      	lsls	r3, r1, #3
 8003b78:	4651      	mov	r1, sl
 8003b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b7e:	4651      	mov	r1, sl
 8003b80:	00ca      	lsls	r2, r1, #3
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	4642      	mov	r2, r8
 8003b8a:	189b      	adds	r3, r3, r2
 8003b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b90:	464b      	mov	r3, r9
 8003b92:	460a      	mov	r2, r1
 8003b94:	eb42 0303 	adc.w	r3, r2, r3
 8003b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ba8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	18db      	adds	r3, r3, r3
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	eb42 0303 	adc.w	r3, r2, r3
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bc6:	f7fc fb7b 	bl	80002c0 <__aeabi_uldivmod>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <UART_SetConfig+0x2d4>)
 8003bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	2164      	movs	r1, #100	; 0x64
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	3332      	adds	r3, #50	; 0x32
 8003be2:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <UART_SetConfig+0x2d4>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	f003 0207 	and.w	r2, r3, #7
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4422      	add	r2, r4
 8003bf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bf8:	e105      	b.n	8003e06 <UART_SetConfig+0x4d6>
 8003bfa:	bf00      	nop
 8003bfc:	40011000 	.word	0x40011000
 8003c00:	40011400 	.word	0x40011400
 8003c04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c1a:	4642      	mov	r2, r8
 8003c1c:	464b      	mov	r3, r9
 8003c1e:	1891      	adds	r1, r2, r2
 8003c20:	6239      	str	r1, [r7, #32]
 8003c22:	415b      	adcs	r3, r3
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
 8003c26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c2a:	4641      	mov	r1, r8
 8003c2c:	1854      	adds	r4, r2, r1
 8003c2e:	4649      	mov	r1, r9
 8003c30:	eb43 0501 	adc.w	r5, r3, r1
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	00eb      	lsls	r3, r5, #3
 8003c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c42:	00e2      	lsls	r2, r4, #3
 8003c44:	4614      	mov	r4, r2
 8003c46:	461d      	mov	r5, r3
 8003c48:	4643      	mov	r3, r8
 8003c4a:	18e3      	adds	r3, r4, r3
 8003c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c50:	464b      	mov	r3, r9
 8003c52:	eb45 0303 	adc.w	r3, r5, r3
 8003c56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c76:	4629      	mov	r1, r5
 8003c78:	008b      	lsls	r3, r1, #2
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c80:	4621      	mov	r1, r4
 8003c82:	008a      	lsls	r2, r1, #2
 8003c84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c88:	f7fc fb1a 	bl	80002c0 <__aeabi_uldivmod>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4b60      	ldr	r3, [pc, #384]	; (8003e14 <UART_SetConfig+0x4e4>)
 8003c92:	fba3 2302 	umull	r2, r3, r3, r2
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	011c      	lsls	r4, r3, #4
 8003c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ca4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ca8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cac:	4642      	mov	r2, r8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	1891      	adds	r1, r2, r2
 8003cb2:	61b9      	str	r1, [r7, #24]
 8003cb4:	415b      	adcs	r3, r3
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	1851      	adds	r1, r2, r1
 8003cc0:	6139      	str	r1, [r7, #16]
 8003cc2:	4649      	mov	r1, r9
 8003cc4:	414b      	adcs	r3, r1
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cd4:	4659      	mov	r1, fp
 8003cd6:	00cb      	lsls	r3, r1, #3
 8003cd8:	4651      	mov	r1, sl
 8003cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cde:	4651      	mov	r1, sl
 8003ce0:	00ca      	lsls	r2, r1, #3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4642      	mov	r2, r8
 8003cea:	189b      	adds	r3, r3, r2
 8003cec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cf0:	464b      	mov	r3, r9
 8003cf2:	460a      	mov	r2, r1
 8003cf4:	eb42 0303 	adc.w	r3, r2, r3
 8003cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d14:	4649      	mov	r1, r9
 8003d16:	008b      	lsls	r3, r1, #2
 8003d18:	4641      	mov	r1, r8
 8003d1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d1e:	4641      	mov	r1, r8
 8003d20:	008a      	lsls	r2, r1, #2
 8003d22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d26:	f7fc facb 	bl	80002c0 <__aeabi_uldivmod>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4b39      	ldr	r3, [pc, #228]	; (8003e14 <UART_SetConfig+0x4e4>)
 8003d30:	fba3 1302 	umull	r1, r3, r3, r2
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	2164      	movs	r1, #100	; 0x64
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	3332      	adds	r3, #50	; 0x32
 8003d42:	4a34      	ldr	r2, [pc, #208]	; (8003e14 <UART_SetConfig+0x4e4>)
 8003d44:	fba2 2303 	umull	r2, r3, r2, r3
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d4e:	441c      	add	r4, r3
 8003d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d54:	2200      	movs	r2, #0
 8003d56:	673b      	str	r3, [r7, #112]	; 0x70
 8003d58:	677a      	str	r2, [r7, #116]	; 0x74
 8003d5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d5e:	4642      	mov	r2, r8
 8003d60:	464b      	mov	r3, r9
 8003d62:	1891      	adds	r1, r2, r2
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	415b      	adcs	r3, r3
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d6e:	4641      	mov	r1, r8
 8003d70:	1851      	adds	r1, r2, r1
 8003d72:	6039      	str	r1, [r7, #0]
 8003d74:	4649      	mov	r1, r9
 8003d76:	414b      	adcs	r3, r1
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d86:	4659      	mov	r1, fp
 8003d88:	00cb      	lsls	r3, r1, #3
 8003d8a:	4651      	mov	r1, sl
 8003d8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d90:	4651      	mov	r1, sl
 8003d92:	00ca      	lsls	r2, r1, #3
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4642      	mov	r2, r8
 8003d9c:	189b      	adds	r3, r3, r2
 8003d9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003da0:	464b      	mov	r3, r9
 8003da2:	460a      	mov	r2, r1
 8003da4:	eb42 0303 	adc.w	r3, r2, r3
 8003da8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	663b      	str	r3, [r7, #96]	; 0x60
 8003db4:	667a      	str	r2, [r7, #100]	; 0x64
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	008b      	lsls	r3, r1, #2
 8003dc6:	4641      	mov	r1, r8
 8003dc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dcc:	4641      	mov	r1, r8
 8003dce:	008a      	lsls	r2, r1, #2
 8003dd0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dd4:	f7fc fa74 	bl	80002c0 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <UART_SetConfig+0x4e4>)
 8003dde:	fba3 1302 	umull	r1, r3, r3, r2
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	2164      	movs	r1, #100	; 0x64
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	3332      	adds	r3, #50	; 0x32
 8003df0:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <UART_SetConfig+0x4e4>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	f003 020f 	and.w	r2, r3, #15
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4422      	add	r2, r4
 8003e04:	609a      	str	r2, [r3, #8]
}
 8003e06:	bf00      	nop
 8003e08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e12:	bf00      	nop
 8003e14:	51eb851f 	.word	0x51eb851f

08003e18 <__errno>:
 8003e18:	4b01      	ldr	r3, [pc, #4]	; (8003e20 <__errno+0x8>)
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	2000000c 	.word	0x2000000c

08003e24 <__libc_init_array>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	4d0d      	ldr	r5, [pc, #52]	; (8003e5c <__libc_init_array+0x38>)
 8003e28:	4c0d      	ldr	r4, [pc, #52]	; (8003e60 <__libc_init_array+0x3c>)
 8003e2a:	1b64      	subs	r4, r4, r5
 8003e2c:	10a4      	asrs	r4, r4, #2
 8003e2e:	2600      	movs	r6, #0
 8003e30:	42a6      	cmp	r6, r4
 8003e32:	d109      	bne.n	8003e48 <__libc_init_array+0x24>
 8003e34:	4d0b      	ldr	r5, [pc, #44]	; (8003e64 <__libc_init_array+0x40>)
 8003e36:	4c0c      	ldr	r4, [pc, #48]	; (8003e68 <__libc_init_array+0x44>)
 8003e38:	f000 fcae 	bl	8004798 <_init>
 8003e3c:	1b64      	subs	r4, r4, r5
 8003e3e:	10a4      	asrs	r4, r4, #2
 8003e40:	2600      	movs	r6, #0
 8003e42:	42a6      	cmp	r6, r4
 8003e44:	d105      	bne.n	8003e52 <__libc_init_array+0x2e>
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4c:	4798      	blx	r3
 8003e4e:	3601      	adds	r6, #1
 8003e50:	e7ee      	b.n	8003e30 <__libc_init_array+0xc>
 8003e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e56:	4798      	blx	r3
 8003e58:	3601      	adds	r6, #1
 8003e5a:	e7f2      	b.n	8003e42 <__libc_init_array+0x1e>
 8003e5c:	08004c98 	.word	0x08004c98
 8003e60:	08004c98 	.word	0x08004c98
 8003e64:	08004c98 	.word	0x08004c98
 8003e68:	08004c9c 	.word	0x08004c9c

08003e6c <memset>:
 8003e6c:	4402      	add	r2, r0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d100      	bne.n	8003e76 <memset+0xa>
 8003e74:	4770      	bx	lr
 8003e76:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7a:	e7f9      	b.n	8003e70 <memset+0x4>

08003e7c <siprintf>:
 8003e7c:	b40e      	push	{r1, r2, r3}
 8003e7e:	b500      	push	{lr}
 8003e80:	b09c      	sub	sp, #112	; 0x70
 8003e82:	ab1d      	add	r3, sp, #116	; 0x74
 8003e84:	9002      	str	r0, [sp, #8]
 8003e86:	9006      	str	r0, [sp, #24]
 8003e88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e8c:	4809      	ldr	r0, [pc, #36]	; (8003eb4 <siprintf+0x38>)
 8003e8e:	9107      	str	r1, [sp, #28]
 8003e90:	9104      	str	r1, [sp, #16]
 8003e92:	4909      	ldr	r1, [pc, #36]	; (8003eb8 <siprintf+0x3c>)
 8003e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e98:	9105      	str	r1, [sp, #20]
 8003e9a:	6800      	ldr	r0, [r0, #0]
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	a902      	add	r1, sp, #8
 8003ea0:	f000 f888 	bl	8003fb4 <_svfiprintf_r>
 8003ea4:	9b02      	ldr	r3, [sp, #8]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	b01c      	add	sp, #112	; 0x70
 8003eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eb0:	b003      	add	sp, #12
 8003eb2:	4770      	bx	lr
 8003eb4:	2000000c 	.word	0x2000000c
 8003eb8:	ffff0208 	.word	0xffff0208

08003ebc <_vsiprintf_r>:
 8003ebc:	b500      	push	{lr}
 8003ebe:	b09b      	sub	sp, #108	; 0x6c
 8003ec0:	9100      	str	r1, [sp, #0]
 8003ec2:	9104      	str	r1, [sp, #16]
 8003ec4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ec8:	9105      	str	r1, [sp, #20]
 8003eca:	9102      	str	r1, [sp, #8]
 8003ecc:	4905      	ldr	r1, [pc, #20]	; (8003ee4 <_vsiprintf_r+0x28>)
 8003ece:	9103      	str	r1, [sp, #12]
 8003ed0:	4669      	mov	r1, sp
 8003ed2:	f000 f86f 	bl	8003fb4 <_svfiprintf_r>
 8003ed6:	9b00      	ldr	r3, [sp, #0]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	b01b      	add	sp, #108	; 0x6c
 8003ede:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ee2:	bf00      	nop
 8003ee4:	ffff0208 	.word	0xffff0208

08003ee8 <vsiprintf>:
 8003ee8:	4613      	mov	r3, r2
 8003eea:	460a      	mov	r2, r1
 8003eec:	4601      	mov	r1, r0
 8003eee:	4802      	ldr	r0, [pc, #8]	; (8003ef8 <vsiprintf+0x10>)
 8003ef0:	6800      	ldr	r0, [r0, #0]
 8003ef2:	f7ff bfe3 	b.w	8003ebc <_vsiprintf_r>
 8003ef6:	bf00      	nop
 8003ef8:	2000000c 	.word	0x2000000c

08003efc <__ssputs_r>:
 8003efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f00:	688e      	ldr	r6, [r1, #8]
 8003f02:	429e      	cmp	r6, r3
 8003f04:	4682      	mov	sl, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	4690      	mov	r8, r2
 8003f0a:	461f      	mov	r7, r3
 8003f0c:	d838      	bhi.n	8003f80 <__ssputs_r+0x84>
 8003f0e:	898a      	ldrh	r2, [r1, #12]
 8003f10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f14:	d032      	beq.n	8003f7c <__ssputs_r+0x80>
 8003f16:	6825      	ldr	r5, [r4, #0]
 8003f18:	6909      	ldr	r1, [r1, #16]
 8003f1a:	eba5 0901 	sub.w	r9, r5, r1
 8003f1e:	6965      	ldr	r5, [r4, #20]
 8003f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f28:	3301      	adds	r3, #1
 8003f2a:	444b      	add	r3, r9
 8003f2c:	106d      	asrs	r5, r5, #1
 8003f2e:	429d      	cmp	r5, r3
 8003f30:	bf38      	it	cc
 8003f32:	461d      	movcc	r5, r3
 8003f34:	0553      	lsls	r3, r2, #21
 8003f36:	d531      	bpl.n	8003f9c <__ssputs_r+0xa0>
 8003f38:	4629      	mov	r1, r5
 8003f3a:	f000 fb63 	bl	8004604 <_malloc_r>
 8003f3e:	4606      	mov	r6, r0
 8003f40:	b950      	cbnz	r0, 8003f58 <__ssputs_r+0x5c>
 8003f42:	230c      	movs	r3, #12
 8003f44:	f8ca 3000 	str.w	r3, [sl]
 8003f48:	89a3      	ldrh	r3, [r4, #12]
 8003f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f4e:	81a3      	strh	r3, [r4, #12]
 8003f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f58:	6921      	ldr	r1, [r4, #16]
 8003f5a:	464a      	mov	r2, r9
 8003f5c:	f000 fabe 	bl	80044dc <memcpy>
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f6a:	81a3      	strh	r3, [r4, #12]
 8003f6c:	6126      	str	r6, [r4, #16]
 8003f6e:	6165      	str	r5, [r4, #20]
 8003f70:	444e      	add	r6, r9
 8003f72:	eba5 0509 	sub.w	r5, r5, r9
 8003f76:	6026      	str	r6, [r4, #0]
 8003f78:	60a5      	str	r5, [r4, #8]
 8003f7a:	463e      	mov	r6, r7
 8003f7c:	42be      	cmp	r6, r7
 8003f7e:	d900      	bls.n	8003f82 <__ssputs_r+0x86>
 8003f80:	463e      	mov	r6, r7
 8003f82:	6820      	ldr	r0, [r4, #0]
 8003f84:	4632      	mov	r2, r6
 8003f86:	4641      	mov	r1, r8
 8003f88:	f000 fab6 	bl	80044f8 <memmove>
 8003f8c:	68a3      	ldr	r3, [r4, #8]
 8003f8e:	1b9b      	subs	r3, r3, r6
 8003f90:	60a3      	str	r3, [r4, #8]
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	4433      	add	r3, r6
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	2000      	movs	r0, #0
 8003f9a:	e7db      	b.n	8003f54 <__ssputs_r+0x58>
 8003f9c:	462a      	mov	r2, r5
 8003f9e:	f000 fba5 	bl	80046ec <_realloc_r>
 8003fa2:	4606      	mov	r6, r0
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	d1e1      	bne.n	8003f6c <__ssputs_r+0x70>
 8003fa8:	6921      	ldr	r1, [r4, #16]
 8003faa:	4650      	mov	r0, sl
 8003fac:	f000 fabe 	bl	800452c <_free_r>
 8003fb0:	e7c7      	b.n	8003f42 <__ssputs_r+0x46>
	...

08003fb4 <_svfiprintf_r>:
 8003fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb8:	4698      	mov	r8, r3
 8003fba:	898b      	ldrh	r3, [r1, #12]
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	b09d      	sub	sp, #116	; 0x74
 8003fc0:	4607      	mov	r7, r0
 8003fc2:	460d      	mov	r5, r1
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	d50e      	bpl.n	8003fe6 <_svfiprintf_r+0x32>
 8003fc8:	690b      	ldr	r3, [r1, #16]
 8003fca:	b963      	cbnz	r3, 8003fe6 <_svfiprintf_r+0x32>
 8003fcc:	2140      	movs	r1, #64	; 0x40
 8003fce:	f000 fb19 	bl	8004604 <_malloc_r>
 8003fd2:	6028      	str	r0, [r5, #0]
 8003fd4:	6128      	str	r0, [r5, #16]
 8003fd6:	b920      	cbnz	r0, 8003fe2 <_svfiprintf_r+0x2e>
 8003fd8:	230c      	movs	r3, #12
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fe0:	e0d1      	b.n	8004186 <_svfiprintf_r+0x1d2>
 8003fe2:	2340      	movs	r3, #64	; 0x40
 8003fe4:	616b      	str	r3, [r5, #20]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8003fea:	2320      	movs	r3, #32
 8003fec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ff4:	2330      	movs	r3, #48	; 0x30
 8003ff6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80041a0 <_svfiprintf_r+0x1ec>
 8003ffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ffe:	f04f 0901 	mov.w	r9, #1
 8004002:	4623      	mov	r3, r4
 8004004:	469a      	mov	sl, r3
 8004006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800400a:	b10a      	cbz	r2, 8004010 <_svfiprintf_r+0x5c>
 800400c:	2a25      	cmp	r2, #37	; 0x25
 800400e:	d1f9      	bne.n	8004004 <_svfiprintf_r+0x50>
 8004010:	ebba 0b04 	subs.w	fp, sl, r4
 8004014:	d00b      	beq.n	800402e <_svfiprintf_r+0x7a>
 8004016:	465b      	mov	r3, fp
 8004018:	4622      	mov	r2, r4
 800401a:	4629      	mov	r1, r5
 800401c:	4638      	mov	r0, r7
 800401e:	f7ff ff6d 	bl	8003efc <__ssputs_r>
 8004022:	3001      	adds	r0, #1
 8004024:	f000 80aa 	beq.w	800417c <_svfiprintf_r+0x1c8>
 8004028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800402a:	445a      	add	r2, fp
 800402c:	9209      	str	r2, [sp, #36]	; 0x24
 800402e:	f89a 3000 	ldrb.w	r3, [sl]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80a2 	beq.w	800417c <_svfiprintf_r+0x1c8>
 8004038:	2300      	movs	r3, #0
 800403a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800403e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004042:	f10a 0a01 	add.w	sl, sl, #1
 8004046:	9304      	str	r3, [sp, #16]
 8004048:	9307      	str	r3, [sp, #28]
 800404a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800404e:	931a      	str	r3, [sp, #104]	; 0x68
 8004050:	4654      	mov	r4, sl
 8004052:	2205      	movs	r2, #5
 8004054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004058:	4851      	ldr	r0, [pc, #324]	; (80041a0 <_svfiprintf_r+0x1ec>)
 800405a:	f7fc f8e1 	bl	8000220 <memchr>
 800405e:	9a04      	ldr	r2, [sp, #16]
 8004060:	b9d8      	cbnz	r0, 800409a <_svfiprintf_r+0xe6>
 8004062:	06d0      	lsls	r0, r2, #27
 8004064:	bf44      	itt	mi
 8004066:	2320      	movmi	r3, #32
 8004068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800406c:	0711      	lsls	r1, r2, #28
 800406e:	bf44      	itt	mi
 8004070:	232b      	movmi	r3, #43	; 0x2b
 8004072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004076:	f89a 3000 	ldrb.w	r3, [sl]
 800407a:	2b2a      	cmp	r3, #42	; 0x2a
 800407c:	d015      	beq.n	80040aa <_svfiprintf_r+0xf6>
 800407e:	9a07      	ldr	r2, [sp, #28]
 8004080:	4654      	mov	r4, sl
 8004082:	2000      	movs	r0, #0
 8004084:	f04f 0c0a 	mov.w	ip, #10
 8004088:	4621      	mov	r1, r4
 800408a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800408e:	3b30      	subs	r3, #48	; 0x30
 8004090:	2b09      	cmp	r3, #9
 8004092:	d94e      	bls.n	8004132 <_svfiprintf_r+0x17e>
 8004094:	b1b0      	cbz	r0, 80040c4 <_svfiprintf_r+0x110>
 8004096:	9207      	str	r2, [sp, #28]
 8004098:	e014      	b.n	80040c4 <_svfiprintf_r+0x110>
 800409a:	eba0 0308 	sub.w	r3, r0, r8
 800409e:	fa09 f303 	lsl.w	r3, r9, r3
 80040a2:	4313      	orrs	r3, r2
 80040a4:	9304      	str	r3, [sp, #16]
 80040a6:	46a2      	mov	sl, r4
 80040a8:	e7d2      	b.n	8004050 <_svfiprintf_r+0x9c>
 80040aa:	9b03      	ldr	r3, [sp, #12]
 80040ac:	1d19      	adds	r1, r3, #4
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	9103      	str	r1, [sp, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bfbb      	ittet	lt
 80040b6:	425b      	neglt	r3, r3
 80040b8:	f042 0202 	orrlt.w	r2, r2, #2
 80040bc:	9307      	strge	r3, [sp, #28]
 80040be:	9307      	strlt	r3, [sp, #28]
 80040c0:	bfb8      	it	lt
 80040c2:	9204      	strlt	r2, [sp, #16]
 80040c4:	7823      	ldrb	r3, [r4, #0]
 80040c6:	2b2e      	cmp	r3, #46	; 0x2e
 80040c8:	d10c      	bne.n	80040e4 <_svfiprintf_r+0x130>
 80040ca:	7863      	ldrb	r3, [r4, #1]
 80040cc:	2b2a      	cmp	r3, #42	; 0x2a
 80040ce:	d135      	bne.n	800413c <_svfiprintf_r+0x188>
 80040d0:	9b03      	ldr	r3, [sp, #12]
 80040d2:	1d1a      	adds	r2, r3, #4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	9203      	str	r2, [sp, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bfb8      	it	lt
 80040dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80040e0:	3402      	adds	r4, #2
 80040e2:	9305      	str	r3, [sp, #20]
 80040e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041b0 <_svfiprintf_r+0x1fc>
 80040e8:	7821      	ldrb	r1, [r4, #0]
 80040ea:	2203      	movs	r2, #3
 80040ec:	4650      	mov	r0, sl
 80040ee:	f7fc f897 	bl	8000220 <memchr>
 80040f2:	b140      	cbz	r0, 8004106 <_svfiprintf_r+0x152>
 80040f4:	2340      	movs	r3, #64	; 0x40
 80040f6:	eba0 000a 	sub.w	r0, r0, sl
 80040fa:	fa03 f000 	lsl.w	r0, r3, r0
 80040fe:	9b04      	ldr	r3, [sp, #16]
 8004100:	4303      	orrs	r3, r0
 8004102:	3401      	adds	r4, #1
 8004104:	9304      	str	r3, [sp, #16]
 8004106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800410a:	4826      	ldr	r0, [pc, #152]	; (80041a4 <_svfiprintf_r+0x1f0>)
 800410c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004110:	2206      	movs	r2, #6
 8004112:	f7fc f885 	bl	8000220 <memchr>
 8004116:	2800      	cmp	r0, #0
 8004118:	d038      	beq.n	800418c <_svfiprintf_r+0x1d8>
 800411a:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <_svfiprintf_r+0x1f4>)
 800411c:	bb1b      	cbnz	r3, 8004166 <_svfiprintf_r+0x1b2>
 800411e:	9b03      	ldr	r3, [sp, #12]
 8004120:	3307      	adds	r3, #7
 8004122:	f023 0307 	bic.w	r3, r3, #7
 8004126:	3308      	adds	r3, #8
 8004128:	9303      	str	r3, [sp, #12]
 800412a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800412c:	4433      	add	r3, r6
 800412e:	9309      	str	r3, [sp, #36]	; 0x24
 8004130:	e767      	b.n	8004002 <_svfiprintf_r+0x4e>
 8004132:	fb0c 3202 	mla	r2, ip, r2, r3
 8004136:	460c      	mov	r4, r1
 8004138:	2001      	movs	r0, #1
 800413a:	e7a5      	b.n	8004088 <_svfiprintf_r+0xd4>
 800413c:	2300      	movs	r3, #0
 800413e:	3401      	adds	r4, #1
 8004140:	9305      	str	r3, [sp, #20]
 8004142:	4619      	mov	r1, r3
 8004144:	f04f 0c0a 	mov.w	ip, #10
 8004148:	4620      	mov	r0, r4
 800414a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800414e:	3a30      	subs	r2, #48	; 0x30
 8004150:	2a09      	cmp	r2, #9
 8004152:	d903      	bls.n	800415c <_svfiprintf_r+0x1a8>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0c5      	beq.n	80040e4 <_svfiprintf_r+0x130>
 8004158:	9105      	str	r1, [sp, #20]
 800415a:	e7c3      	b.n	80040e4 <_svfiprintf_r+0x130>
 800415c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004160:	4604      	mov	r4, r0
 8004162:	2301      	movs	r3, #1
 8004164:	e7f0      	b.n	8004148 <_svfiprintf_r+0x194>
 8004166:	ab03      	add	r3, sp, #12
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	462a      	mov	r2, r5
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <_svfiprintf_r+0x1f8>)
 800416e:	a904      	add	r1, sp, #16
 8004170:	4638      	mov	r0, r7
 8004172:	f3af 8000 	nop.w
 8004176:	1c42      	adds	r2, r0, #1
 8004178:	4606      	mov	r6, r0
 800417a:	d1d6      	bne.n	800412a <_svfiprintf_r+0x176>
 800417c:	89ab      	ldrh	r3, [r5, #12]
 800417e:	065b      	lsls	r3, r3, #25
 8004180:	f53f af2c 	bmi.w	8003fdc <_svfiprintf_r+0x28>
 8004184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004186:	b01d      	add	sp, #116	; 0x74
 8004188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418c:	ab03      	add	r3, sp, #12
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	462a      	mov	r2, r5
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <_svfiprintf_r+0x1f8>)
 8004194:	a904      	add	r1, sp, #16
 8004196:	4638      	mov	r0, r7
 8004198:	f000 f87a 	bl	8004290 <_printf_i>
 800419c:	e7eb      	b.n	8004176 <_svfiprintf_r+0x1c2>
 800419e:	bf00      	nop
 80041a0:	08004c5c 	.word	0x08004c5c
 80041a4:	08004c66 	.word	0x08004c66
 80041a8:	00000000 	.word	0x00000000
 80041ac:	08003efd 	.word	0x08003efd
 80041b0:	08004c62 	.word	0x08004c62

080041b4 <_printf_common>:
 80041b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b8:	4616      	mov	r6, r2
 80041ba:	4699      	mov	r9, r3
 80041bc:	688a      	ldr	r2, [r1, #8]
 80041be:	690b      	ldr	r3, [r1, #16]
 80041c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041c4:	4293      	cmp	r3, r2
 80041c6:	bfb8      	it	lt
 80041c8:	4613      	movlt	r3, r2
 80041ca:	6033      	str	r3, [r6, #0]
 80041cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041d0:	4607      	mov	r7, r0
 80041d2:	460c      	mov	r4, r1
 80041d4:	b10a      	cbz	r2, 80041da <_printf_common+0x26>
 80041d6:	3301      	adds	r3, #1
 80041d8:	6033      	str	r3, [r6, #0]
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	0699      	lsls	r1, r3, #26
 80041de:	bf42      	ittt	mi
 80041e0:	6833      	ldrmi	r3, [r6, #0]
 80041e2:	3302      	addmi	r3, #2
 80041e4:	6033      	strmi	r3, [r6, #0]
 80041e6:	6825      	ldr	r5, [r4, #0]
 80041e8:	f015 0506 	ands.w	r5, r5, #6
 80041ec:	d106      	bne.n	80041fc <_printf_common+0x48>
 80041ee:	f104 0a19 	add.w	sl, r4, #25
 80041f2:	68e3      	ldr	r3, [r4, #12]
 80041f4:	6832      	ldr	r2, [r6, #0]
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	42ab      	cmp	r3, r5
 80041fa:	dc26      	bgt.n	800424a <_printf_common+0x96>
 80041fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004200:	1e13      	subs	r3, r2, #0
 8004202:	6822      	ldr	r2, [r4, #0]
 8004204:	bf18      	it	ne
 8004206:	2301      	movne	r3, #1
 8004208:	0692      	lsls	r2, r2, #26
 800420a:	d42b      	bmi.n	8004264 <_printf_common+0xb0>
 800420c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004210:	4649      	mov	r1, r9
 8004212:	4638      	mov	r0, r7
 8004214:	47c0      	blx	r8
 8004216:	3001      	adds	r0, #1
 8004218:	d01e      	beq.n	8004258 <_printf_common+0xa4>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	68e5      	ldr	r5, [r4, #12]
 800421e:	6832      	ldr	r2, [r6, #0]
 8004220:	f003 0306 	and.w	r3, r3, #6
 8004224:	2b04      	cmp	r3, #4
 8004226:	bf08      	it	eq
 8004228:	1aad      	subeq	r5, r5, r2
 800422a:	68a3      	ldr	r3, [r4, #8]
 800422c:	6922      	ldr	r2, [r4, #16]
 800422e:	bf0c      	ite	eq
 8004230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004234:	2500      	movne	r5, #0
 8004236:	4293      	cmp	r3, r2
 8004238:	bfc4      	itt	gt
 800423a:	1a9b      	subgt	r3, r3, r2
 800423c:	18ed      	addgt	r5, r5, r3
 800423e:	2600      	movs	r6, #0
 8004240:	341a      	adds	r4, #26
 8004242:	42b5      	cmp	r5, r6
 8004244:	d11a      	bne.n	800427c <_printf_common+0xc8>
 8004246:	2000      	movs	r0, #0
 8004248:	e008      	b.n	800425c <_printf_common+0xa8>
 800424a:	2301      	movs	r3, #1
 800424c:	4652      	mov	r2, sl
 800424e:	4649      	mov	r1, r9
 8004250:	4638      	mov	r0, r7
 8004252:	47c0      	blx	r8
 8004254:	3001      	adds	r0, #1
 8004256:	d103      	bne.n	8004260 <_printf_common+0xac>
 8004258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800425c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004260:	3501      	adds	r5, #1
 8004262:	e7c6      	b.n	80041f2 <_printf_common+0x3e>
 8004264:	18e1      	adds	r1, r4, r3
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	2030      	movs	r0, #48	; 0x30
 800426a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800426e:	4422      	add	r2, r4
 8004270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004278:	3302      	adds	r3, #2
 800427a:	e7c7      	b.n	800420c <_printf_common+0x58>
 800427c:	2301      	movs	r3, #1
 800427e:	4622      	mov	r2, r4
 8004280:	4649      	mov	r1, r9
 8004282:	4638      	mov	r0, r7
 8004284:	47c0      	blx	r8
 8004286:	3001      	adds	r0, #1
 8004288:	d0e6      	beq.n	8004258 <_printf_common+0xa4>
 800428a:	3601      	adds	r6, #1
 800428c:	e7d9      	b.n	8004242 <_printf_common+0x8e>
	...

08004290 <_printf_i>:
 8004290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004294:	7e0f      	ldrb	r7, [r1, #24]
 8004296:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004298:	2f78      	cmp	r7, #120	; 0x78
 800429a:	4691      	mov	r9, r2
 800429c:	4680      	mov	r8, r0
 800429e:	460c      	mov	r4, r1
 80042a0:	469a      	mov	sl, r3
 80042a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042a6:	d807      	bhi.n	80042b8 <_printf_i+0x28>
 80042a8:	2f62      	cmp	r7, #98	; 0x62
 80042aa:	d80a      	bhi.n	80042c2 <_printf_i+0x32>
 80042ac:	2f00      	cmp	r7, #0
 80042ae:	f000 80d8 	beq.w	8004462 <_printf_i+0x1d2>
 80042b2:	2f58      	cmp	r7, #88	; 0x58
 80042b4:	f000 80a3 	beq.w	80043fe <_printf_i+0x16e>
 80042b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042c0:	e03a      	b.n	8004338 <_printf_i+0xa8>
 80042c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042c6:	2b15      	cmp	r3, #21
 80042c8:	d8f6      	bhi.n	80042b8 <_printf_i+0x28>
 80042ca:	a101      	add	r1, pc, #4	; (adr r1, 80042d0 <_printf_i+0x40>)
 80042cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042d0:	08004329 	.word	0x08004329
 80042d4:	0800433d 	.word	0x0800433d
 80042d8:	080042b9 	.word	0x080042b9
 80042dc:	080042b9 	.word	0x080042b9
 80042e0:	080042b9 	.word	0x080042b9
 80042e4:	080042b9 	.word	0x080042b9
 80042e8:	0800433d 	.word	0x0800433d
 80042ec:	080042b9 	.word	0x080042b9
 80042f0:	080042b9 	.word	0x080042b9
 80042f4:	080042b9 	.word	0x080042b9
 80042f8:	080042b9 	.word	0x080042b9
 80042fc:	08004449 	.word	0x08004449
 8004300:	0800436d 	.word	0x0800436d
 8004304:	0800442b 	.word	0x0800442b
 8004308:	080042b9 	.word	0x080042b9
 800430c:	080042b9 	.word	0x080042b9
 8004310:	0800446b 	.word	0x0800446b
 8004314:	080042b9 	.word	0x080042b9
 8004318:	0800436d 	.word	0x0800436d
 800431c:	080042b9 	.word	0x080042b9
 8004320:	080042b9 	.word	0x080042b9
 8004324:	08004433 	.word	0x08004433
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	1d1a      	adds	r2, r3, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	602a      	str	r2, [r5, #0]
 8004330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004338:	2301      	movs	r3, #1
 800433a:	e0a3      	b.n	8004484 <_printf_i+0x1f4>
 800433c:	6820      	ldr	r0, [r4, #0]
 800433e:	6829      	ldr	r1, [r5, #0]
 8004340:	0606      	lsls	r6, r0, #24
 8004342:	f101 0304 	add.w	r3, r1, #4
 8004346:	d50a      	bpl.n	800435e <_printf_i+0xce>
 8004348:	680e      	ldr	r6, [r1, #0]
 800434a:	602b      	str	r3, [r5, #0]
 800434c:	2e00      	cmp	r6, #0
 800434e:	da03      	bge.n	8004358 <_printf_i+0xc8>
 8004350:	232d      	movs	r3, #45	; 0x2d
 8004352:	4276      	negs	r6, r6
 8004354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004358:	485e      	ldr	r0, [pc, #376]	; (80044d4 <_printf_i+0x244>)
 800435a:	230a      	movs	r3, #10
 800435c:	e019      	b.n	8004392 <_printf_i+0x102>
 800435e:	680e      	ldr	r6, [r1, #0]
 8004360:	602b      	str	r3, [r5, #0]
 8004362:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004366:	bf18      	it	ne
 8004368:	b236      	sxthne	r6, r6
 800436a:	e7ef      	b.n	800434c <_printf_i+0xbc>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	6820      	ldr	r0, [r4, #0]
 8004370:	1d19      	adds	r1, r3, #4
 8004372:	6029      	str	r1, [r5, #0]
 8004374:	0601      	lsls	r1, r0, #24
 8004376:	d501      	bpl.n	800437c <_printf_i+0xec>
 8004378:	681e      	ldr	r6, [r3, #0]
 800437a:	e002      	b.n	8004382 <_printf_i+0xf2>
 800437c:	0646      	lsls	r6, r0, #25
 800437e:	d5fb      	bpl.n	8004378 <_printf_i+0xe8>
 8004380:	881e      	ldrh	r6, [r3, #0]
 8004382:	4854      	ldr	r0, [pc, #336]	; (80044d4 <_printf_i+0x244>)
 8004384:	2f6f      	cmp	r7, #111	; 0x6f
 8004386:	bf0c      	ite	eq
 8004388:	2308      	moveq	r3, #8
 800438a:	230a      	movne	r3, #10
 800438c:	2100      	movs	r1, #0
 800438e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004392:	6865      	ldr	r5, [r4, #4]
 8004394:	60a5      	str	r5, [r4, #8]
 8004396:	2d00      	cmp	r5, #0
 8004398:	bfa2      	ittt	ge
 800439a:	6821      	ldrge	r1, [r4, #0]
 800439c:	f021 0104 	bicge.w	r1, r1, #4
 80043a0:	6021      	strge	r1, [r4, #0]
 80043a2:	b90e      	cbnz	r6, 80043a8 <_printf_i+0x118>
 80043a4:	2d00      	cmp	r5, #0
 80043a6:	d04d      	beq.n	8004444 <_printf_i+0x1b4>
 80043a8:	4615      	mov	r5, r2
 80043aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80043ae:	fb03 6711 	mls	r7, r3, r1, r6
 80043b2:	5dc7      	ldrb	r7, [r0, r7]
 80043b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043b8:	4637      	mov	r7, r6
 80043ba:	42bb      	cmp	r3, r7
 80043bc:	460e      	mov	r6, r1
 80043be:	d9f4      	bls.n	80043aa <_printf_i+0x11a>
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d10b      	bne.n	80043dc <_printf_i+0x14c>
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	07de      	lsls	r6, r3, #31
 80043c8:	d508      	bpl.n	80043dc <_printf_i+0x14c>
 80043ca:	6923      	ldr	r3, [r4, #16]
 80043cc:	6861      	ldr	r1, [r4, #4]
 80043ce:	4299      	cmp	r1, r3
 80043d0:	bfde      	ittt	le
 80043d2:	2330      	movle	r3, #48	; 0x30
 80043d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80043dc:	1b52      	subs	r2, r2, r5
 80043de:	6122      	str	r2, [r4, #16]
 80043e0:	f8cd a000 	str.w	sl, [sp]
 80043e4:	464b      	mov	r3, r9
 80043e6:	aa03      	add	r2, sp, #12
 80043e8:	4621      	mov	r1, r4
 80043ea:	4640      	mov	r0, r8
 80043ec:	f7ff fee2 	bl	80041b4 <_printf_common>
 80043f0:	3001      	adds	r0, #1
 80043f2:	d14c      	bne.n	800448e <_printf_i+0x1fe>
 80043f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043f8:	b004      	add	sp, #16
 80043fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fe:	4835      	ldr	r0, [pc, #212]	; (80044d4 <_printf_i+0x244>)
 8004400:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004404:	6829      	ldr	r1, [r5, #0]
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	f851 6b04 	ldr.w	r6, [r1], #4
 800440c:	6029      	str	r1, [r5, #0]
 800440e:	061d      	lsls	r5, r3, #24
 8004410:	d514      	bpl.n	800443c <_printf_i+0x1ac>
 8004412:	07df      	lsls	r7, r3, #31
 8004414:	bf44      	itt	mi
 8004416:	f043 0320 	orrmi.w	r3, r3, #32
 800441a:	6023      	strmi	r3, [r4, #0]
 800441c:	b91e      	cbnz	r6, 8004426 <_printf_i+0x196>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	f023 0320 	bic.w	r3, r3, #32
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	2310      	movs	r3, #16
 8004428:	e7b0      	b.n	800438c <_printf_i+0xfc>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	f043 0320 	orr.w	r3, r3, #32
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	2378      	movs	r3, #120	; 0x78
 8004434:	4828      	ldr	r0, [pc, #160]	; (80044d8 <_printf_i+0x248>)
 8004436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800443a:	e7e3      	b.n	8004404 <_printf_i+0x174>
 800443c:	0659      	lsls	r1, r3, #25
 800443e:	bf48      	it	mi
 8004440:	b2b6      	uxthmi	r6, r6
 8004442:	e7e6      	b.n	8004412 <_printf_i+0x182>
 8004444:	4615      	mov	r5, r2
 8004446:	e7bb      	b.n	80043c0 <_printf_i+0x130>
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	6826      	ldr	r6, [r4, #0]
 800444c:	6961      	ldr	r1, [r4, #20]
 800444e:	1d18      	adds	r0, r3, #4
 8004450:	6028      	str	r0, [r5, #0]
 8004452:	0635      	lsls	r5, r6, #24
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	d501      	bpl.n	800445c <_printf_i+0x1cc>
 8004458:	6019      	str	r1, [r3, #0]
 800445a:	e002      	b.n	8004462 <_printf_i+0x1d2>
 800445c:	0670      	lsls	r0, r6, #25
 800445e:	d5fb      	bpl.n	8004458 <_printf_i+0x1c8>
 8004460:	8019      	strh	r1, [r3, #0]
 8004462:	2300      	movs	r3, #0
 8004464:	6123      	str	r3, [r4, #16]
 8004466:	4615      	mov	r5, r2
 8004468:	e7ba      	b.n	80043e0 <_printf_i+0x150>
 800446a:	682b      	ldr	r3, [r5, #0]
 800446c:	1d1a      	adds	r2, r3, #4
 800446e:	602a      	str	r2, [r5, #0]
 8004470:	681d      	ldr	r5, [r3, #0]
 8004472:	6862      	ldr	r2, [r4, #4]
 8004474:	2100      	movs	r1, #0
 8004476:	4628      	mov	r0, r5
 8004478:	f7fb fed2 	bl	8000220 <memchr>
 800447c:	b108      	cbz	r0, 8004482 <_printf_i+0x1f2>
 800447e:	1b40      	subs	r0, r0, r5
 8004480:	6060      	str	r0, [r4, #4]
 8004482:	6863      	ldr	r3, [r4, #4]
 8004484:	6123      	str	r3, [r4, #16]
 8004486:	2300      	movs	r3, #0
 8004488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800448c:	e7a8      	b.n	80043e0 <_printf_i+0x150>
 800448e:	6923      	ldr	r3, [r4, #16]
 8004490:	462a      	mov	r2, r5
 8004492:	4649      	mov	r1, r9
 8004494:	4640      	mov	r0, r8
 8004496:	47d0      	blx	sl
 8004498:	3001      	adds	r0, #1
 800449a:	d0ab      	beq.n	80043f4 <_printf_i+0x164>
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	079b      	lsls	r3, r3, #30
 80044a0:	d413      	bmi.n	80044ca <_printf_i+0x23a>
 80044a2:	68e0      	ldr	r0, [r4, #12]
 80044a4:	9b03      	ldr	r3, [sp, #12]
 80044a6:	4298      	cmp	r0, r3
 80044a8:	bfb8      	it	lt
 80044aa:	4618      	movlt	r0, r3
 80044ac:	e7a4      	b.n	80043f8 <_printf_i+0x168>
 80044ae:	2301      	movs	r3, #1
 80044b0:	4632      	mov	r2, r6
 80044b2:	4649      	mov	r1, r9
 80044b4:	4640      	mov	r0, r8
 80044b6:	47d0      	blx	sl
 80044b8:	3001      	adds	r0, #1
 80044ba:	d09b      	beq.n	80043f4 <_printf_i+0x164>
 80044bc:	3501      	adds	r5, #1
 80044be:	68e3      	ldr	r3, [r4, #12]
 80044c0:	9903      	ldr	r1, [sp, #12]
 80044c2:	1a5b      	subs	r3, r3, r1
 80044c4:	42ab      	cmp	r3, r5
 80044c6:	dcf2      	bgt.n	80044ae <_printf_i+0x21e>
 80044c8:	e7eb      	b.n	80044a2 <_printf_i+0x212>
 80044ca:	2500      	movs	r5, #0
 80044cc:	f104 0619 	add.w	r6, r4, #25
 80044d0:	e7f5      	b.n	80044be <_printf_i+0x22e>
 80044d2:	bf00      	nop
 80044d4:	08004c6d 	.word	0x08004c6d
 80044d8:	08004c7e 	.word	0x08004c7e

080044dc <memcpy>:
 80044dc:	440a      	add	r2, r1
 80044de:	4291      	cmp	r1, r2
 80044e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80044e4:	d100      	bne.n	80044e8 <memcpy+0xc>
 80044e6:	4770      	bx	lr
 80044e8:	b510      	push	{r4, lr}
 80044ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044f2:	4291      	cmp	r1, r2
 80044f4:	d1f9      	bne.n	80044ea <memcpy+0xe>
 80044f6:	bd10      	pop	{r4, pc}

080044f8 <memmove>:
 80044f8:	4288      	cmp	r0, r1
 80044fa:	b510      	push	{r4, lr}
 80044fc:	eb01 0402 	add.w	r4, r1, r2
 8004500:	d902      	bls.n	8004508 <memmove+0x10>
 8004502:	4284      	cmp	r4, r0
 8004504:	4623      	mov	r3, r4
 8004506:	d807      	bhi.n	8004518 <memmove+0x20>
 8004508:	1e43      	subs	r3, r0, #1
 800450a:	42a1      	cmp	r1, r4
 800450c:	d008      	beq.n	8004520 <memmove+0x28>
 800450e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004512:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004516:	e7f8      	b.n	800450a <memmove+0x12>
 8004518:	4402      	add	r2, r0
 800451a:	4601      	mov	r1, r0
 800451c:	428a      	cmp	r2, r1
 800451e:	d100      	bne.n	8004522 <memmove+0x2a>
 8004520:	bd10      	pop	{r4, pc}
 8004522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800452a:	e7f7      	b.n	800451c <memmove+0x24>

0800452c <_free_r>:
 800452c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800452e:	2900      	cmp	r1, #0
 8004530:	d044      	beq.n	80045bc <_free_r+0x90>
 8004532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004536:	9001      	str	r0, [sp, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f1a1 0404 	sub.w	r4, r1, #4
 800453e:	bfb8      	it	lt
 8004540:	18e4      	addlt	r4, r4, r3
 8004542:	f000 f913 	bl	800476c <__malloc_lock>
 8004546:	4a1e      	ldr	r2, [pc, #120]	; (80045c0 <_free_r+0x94>)
 8004548:	9801      	ldr	r0, [sp, #4]
 800454a:	6813      	ldr	r3, [r2, #0]
 800454c:	b933      	cbnz	r3, 800455c <_free_r+0x30>
 800454e:	6063      	str	r3, [r4, #4]
 8004550:	6014      	str	r4, [r2, #0]
 8004552:	b003      	add	sp, #12
 8004554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004558:	f000 b90e 	b.w	8004778 <__malloc_unlock>
 800455c:	42a3      	cmp	r3, r4
 800455e:	d908      	bls.n	8004572 <_free_r+0x46>
 8004560:	6825      	ldr	r5, [r4, #0]
 8004562:	1961      	adds	r1, r4, r5
 8004564:	428b      	cmp	r3, r1
 8004566:	bf01      	itttt	eq
 8004568:	6819      	ldreq	r1, [r3, #0]
 800456a:	685b      	ldreq	r3, [r3, #4]
 800456c:	1949      	addeq	r1, r1, r5
 800456e:	6021      	streq	r1, [r4, #0]
 8004570:	e7ed      	b.n	800454e <_free_r+0x22>
 8004572:	461a      	mov	r2, r3
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	b10b      	cbz	r3, 800457c <_free_r+0x50>
 8004578:	42a3      	cmp	r3, r4
 800457a:	d9fa      	bls.n	8004572 <_free_r+0x46>
 800457c:	6811      	ldr	r1, [r2, #0]
 800457e:	1855      	adds	r5, r2, r1
 8004580:	42a5      	cmp	r5, r4
 8004582:	d10b      	bne.n	800459c <_free_r+0x70>
 8004584:	6824      	ldr	r4, [r4, #0]
 8004586:	4421      	add	r1, r4
 8004588:	1854      	adds	r4, r2, r1
 800458a:	42a3      	cmp	r3, r4
 800458c:	6011      	str	r1, [r2, #0]
 800458e:	d1e0      	bne.n	8004552 <_free_r+0x26>
 8004590:	681c      	ldr	r4, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	6053      	str	r3, [r2, #4]
 8004596:	4421      	add	r1, r4
 8004598:	6011      	str	r1, [r2, #0]
 800459a:	e7da      	b.n	8004552 <_free_r+0x26>
 800459c:	d902      	bls.n	80045a4 <_free_r+0x78>
 800459e:	230c      	movs	r3, #12
 80045a0:	6003      	str	r3, [r0, #0]
 80045a2:	e7d6      	b.n	8004552 <_free_r+0x26>
 80045a4:	6825      	ldr	r5, [r4, #0]
 80045a6:	1961      	adds	r1, r4, r5
 80045a8:	428b      	cmp	r3, r1
 80045aa:	bf04      	itt	eq
 80045ac:	6819      	ldreq	r1, [r3, #0]
 80045ae:	685b      	ldreq	r3, [r3, #4]
 80045b0:	6063      	str	r3, [r4, #4]
 80045b2:	bf04      	itt	eq
 80045b4:	1949      	addeq	r1, r1, r5
 80045b6:	6021      	streq	r1, [r4, #0]
 80045b8:	6054      	str	r4, [r2, #4]
 80045ba:	e7ca      	b.n	8004552 <_free_r+0x26>
 80045bc:	b003      	add	sp, #12
 80045be:	bd30      	pop	{r4, r5, pc}
 80045c0:	20000160 	.word	0x20000160

080045c4 <sbrk_aligned>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	4e0e      	ldr	r6, [pc, #56]	; (8004600 <sbrk_aligned+0x3c>)
 80045c8:	460c      	mov	r4, r1
 80045ca:	6831      	ldr	r1, [r6, #0]
 80045cc:	4605      	mov	r5, r0
 80045ce:	b911      	cbnz	r1, 80045d6 <sbrk_aligned+0x12>
 80045d0:	f000 f8bc 	bl	800474c <_sbrk_r>
 80045d4:	6030      	str	r0, [r6, #0]
 80045d6:	4621      	mov	r1, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 f8b7 	bl	800474c <_sbrk_r>
 80045de:	1c43      	adds	r3, r0, #1
 80045e0:	d00a      	beq.n	80045f8 <sbrk_aligned+0x34>
 80045e2:	1cc4      	adds	r4, r0, #3
 80045e4:	f024 0403 	bic.w	r4, r4, #3
 80045e8:	42a0      	cmp	r0, r4
 80045ea:	d007      	beq.n	80045fc <sbrk_aligned+0x38>
 80045ec:	1a21      	subs	r1, r4, r0
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 f8ac 	bl	800474c <_sbrk_r>
 80045f4:	3001      	adds	r0, #1
 80045f6:	d101      	bne.n	80045fc <sbrk_aligned+0x38>
 80045f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80045fc:	4620      	mov	r0, r4
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	20000164 	.word	0x20000164

08004604 <_malloc_r>:
 8004604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004608:	1ccd      	adds	r5, r1, #3
 800460a:	f025 0503 	bic.w	r5, r5, #3
 800460e:	3508      	adds	r5, #8
 8004610:	2d0c      	cmp	r5, #12
 8004612:	bf38      	it	cc
 8004614:	250c      	movcc	r5, #12
 8004616:	2d00      	cmp	r5, #0
 8004618:	4607      	mov	r7, r0
 800461a:	db01      	blt.n	8004620 <_malloc_r+0x1c>
 800461c:	42a9      	cmp	r1, r5
 800461e:	d905      	bls.n	800462c <_malloc_r+0x28>
 8004620:	230c      	movs	r3, #12
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	2600      	movs	r6, #0
 8004626:	4630      	mov	r0, r6
 8004628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800462c:	4e2e      	ldr	r6, [pc, #184]	; (80046e8 <_malloc_r+0xe4>)
 800462e:	f000 f89d 	bl	800476c <__malloc_lock>
 8004632:	6833      	ldr	r3, [r6, #0]
 8004634:	461c      	mov	r4, r3
 8004636:	bb34      	cbnz	r4, 8004686 <_malloc_r+0x82>
 8004638:	4629      	mov	r1, r5
 800463a:	4638      	mov	r0, r7
 800463c:	f7ff ffc2 	bl	80045c4 <sbrk_aligned>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	4604      	mov	r4, r0
 8004644:	d14d      	bne.n	80046e2 <_malloc_r+0xde>
 8004646:	6834      	ldr	r4, [r6, #0]
 8004648:	4626      	mov	r6, r4
 800464a:	2e00      	cmp	r6, #0
 800464c:	d140      	bne.n	80046d0 <_malloc_r+0xcc>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	4631      	mov	r1, r6
 8004652:	4638      	mov	r0, r7
 8004654:	eb04 0803 	add.w	r8, r4, r3
 8004658:	f000 f878 	bl	800474c <_sbrk_r>
 800465c:	4580      	cmp	r8, r0
 800465e:	d13a      	bne.n	80046d6 <_malloc_r+0xd2>
 8004660:	6821      	ldr	r1, [r4, #0]
 8004662:	3503      	adds	r5, #3
 8004664:	1a6d      	subs	r5, r5, r1
 8004666:	f025 0503 	bic.w	r5, r5, #3
 800466a:	3508      	adds	r5, #8
 800466c:	2d0c      	cmp	r5, #12
 800466e:	bf38      	it	cc
 8004670:	250c      	movcc	r5, #12
 8004672:	4629      	mov	r1, r5
 8004674:	4638      	mov	r0, r7
 8004676:	f7ff ffa5 	bl	80045c4 <sbrk_aligned>
 800467a:	3001      	adds	r0, #1
 800467c:	d02b      	beq.n	80046d6 <_malloc_r+0xd2>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	442b      	add	r3, r5
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	e00e      	b.n	80046a4 <_malloc_r+0xa0>
 8004686:	6822      	ldr	r2, [r4, #0]
 8004688:	1b52      	subs	r2, r2, r5
 800468a:	d41e      	bmi.n	80046ca <_malloc_r+0xc6>
 800468c:	2a0b      	cmp	r2, #11
 800468e:	d916      	bls.n	80046be <_malloc_r+0xba>
 8004690:	1961      	adds	r1, r4, r5
 8004692:	42a3      	cmp	r3, r4
 8004694:	6025      	str	r5, [r4, #0]
 8004696:	bf18      	it	ne
 8004698:	6059      	strne	r1, [r3, #4]
 800469a:	6863      	ldr	r3, [r4, #4]
 800469c:	bf08      	it	eq
 800469e:	6031      	streq	r1, [r6, #0]
 80046a0:	5162      	str	r2, [r4, r5]
 80046a2:	604b      	str	r3, [r1, #4]
 80046a4:	4638      	mov	r0, r7
 80046a6:	f104 060b 	add.w	r6, r4, #11
 80046aa:	f000 f865 	bl	8004778 <__malloc_unlock>
 80046ae:	f026 0607 	bic.w	r6, r6, #7
 80046b2:	1d23      	adds	r3, r4, #4
 80046b4:	1af2      	subs	r2, r6, r3
 80046b6:	d0b6      	beq.n	8004626 <_malloc_r+0x22>
 80046b8:	1b9b      	subs	r3, r3, r6
 80046ba:	50a3      	str	r3, [r4, r2]
 80046bc:	e7b3      	b.n	8004626 <_malloc_r+0x22>
 80046be:	6862      	ldr	r2, [r4, #4]
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	bf0c      	ite	eq
 80046c4:	6032      	streq	r2, [r6, #0]
 80046c6:	605a      	strne	r2, [r3, #4]
 80046c8:	e7ec      	b.n	80046a4 <_malloc_r+0xa0>
 80046ca:	4623      	mov	r3, r4
 80046cc:	6864      	ldr	r4, [r4, #4]
 80046ce:	e7b2      	b.n	8004636 <_malloc_r+0x32>
 80046d0:	4634      	mov	r4, r6
 80046d2:	6876      	ldr	r6, [r6, #4]
 80046d4:	e7b9      	b.n	800464a <_malloc_r+0x46>
 80046d6:	230c      	movs	r3, #12
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	4638      	mov	r0, r7
 80046dc:	f000 f84c 	bl	8004778 <__malloc_unlock>
 80046e0:	e7a1      	b.n	8004626 <_malloc_r+0x22>
 80046e2:	6025      	str	r5, [r4, #0]
 80046e4:	e7de      	b.n	80046a4 <_malloc_r+0xa0>
 80046e6:	bf00      	nop
 80046e8:	20000160 	.word	0x20000160

080046ec <_realloc_r>:
 80046ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f0:	4680      	mov	r8, r0
 80046f2:	4614      	mov	r4, r2
 80046f4:	460e      	mov	r6, r1
 80046f6:	b921      	cbnz	r1, 8004702 <_realloc_r+0x16>
 80046f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046fc:	4611      	mov	r1, r2
 80046fe:	f7ff bf81 	b.w	8004604 <_malloc_r>
 8004702:	b92a      	cbnz	r2, 8004710 <_realloc_r+0x24>
 8004704:	f7ff ff12 	bl	800452c <_free_r>
 8004708:	4625      	mov	r5, r4
 800470a:	4628      	mov	r0, r5
 800470c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004710:	f000 f838 	bl	8004784 <_malloc_usable_size_r>
 8004714:	4284      	cmp	r4, r0
 8004716:	4607      	mov	r7, r0
 8004718:	d802      	bhi.n	8004720 <_realloc_r+0x34>
 800471a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800471e:	d812      	bhi.n	8004746 <_realloc_r+0x5a>
 8004720:	4621      	mov	r1, r4
 8004722:	4640      	mov	r0, r8
 8004724:	f7ff ff6e 	bl	8004604 <_malloc_r>
 8004728:	4605      	mov	r5, r0
 800472a:	2800      	cmp	r0, #0
 800472c:	d0ed      	beq.n	800470a <_realloc_r+0x1e>
 800472e:	42bc      	cmp	r4, r7
 8004730:	4622      	mov	r2, r4
 8004732:	4631      	mov	r1, r6
 8004734:	bf28      	it	cs
 8004736:	463a      	movcs	r2, r7
 8004738:	f7ff fed0 	bl	80044dc <memcpy>
 800473c:	4631      	mov	r1, r6
 800473e:	4640      	mov	r0, r8
 8004740:	f7ff fef4 	bl	800452c <_free_r>
 8004744:	e7e1      	b.n	800470a <_realloc_r+0x1e>
 8004746:	4635      	mov	r5, r6
 8004748:	e7df      	b.n	800470a <_realloc_r+0x1e>
	...

0800474c <_sbrk_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4d06      	ldr	r5, [pc, #24]	; (8004768 <_sbrk_r+0x1c>)
 8004750:	2300      	movs	r3, #0
 8004752:	4604      	mov	r4, r0
 8004754:	4608      	mov	r0, r1
 8004756:	602b      	str	r3, [r5, #0]
 8004758:	f7fc fda6 	bl	80012a8 <_sbrk>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d102      	bne.n	8004766 <_sbrk_r+0x1a>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	b103      	cbz	r3, 8004766 <_sbrk_r+0x1a>
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	20000168 	.word	0x20000168

0800476c <__malloc_lock>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__malloc_lock+0x8>)
 800476e:	f000 b811 	b.w	8004794 <__retarget_lock_acquire_recursive>
 8004772:	bf00      	nop
 8004774:	2000016c 	.word	0x2000016c

08004778 <__malloc_unlock>:
 8004778:	4801      	ldr	r0, [pc, #4]	; (8004780 <__malloc_unlock+0x8>)
 800477a:	f000 b80c 	b.w	8004796 <__retarget_lock_release_recursive>
 800477e:	bf00      	nop
 8004780:	2000016c 	.word	0x2000016c

08004784 <_malloc_usable_size_r>:
 8004784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004788:	1f18      	subs	r0, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	bfbc      	itt	lt
 800478e:	580b      	ldrlt	r3, [r1, r0]
 8004790:	18c0      	addlt	r0, r0, r3
 8004792:	4770      	bx	lr

08004794 <__retarget_lock_acquire_recursive>:
 8004794:	4770      	bx	lr

08004796 <__retarget_lock_release_recursive>:
 8004796:	4770      	bx	lr

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
