
RTC_AlarmA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080041a4  080041a4  000141a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042ec  080042ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080042ec  080042ec  000142ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042f4  080042f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042f4  080042f4  000142f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042f8  080042f8  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080042fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  0800436c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  0800436c  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6f4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a97  00000000  00000000  0002b794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002d230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002dae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ed9  00000000  00000000  0002e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9be  00000000  00000000  000501d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce3ef  00000000  00000000  0005bb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002730  00000000  00000000  00129fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800418c 	.word	0x0800418c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800418c 	.word	0x0800418c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <SysTick_Handler>:
#include "main_app.h"

extern RTC_HandleTypeDef hrtc;

void SysTick_Handler (void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005c8:	f000 fbde 	bl	8000d88 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005cc:	f000 fd4e 	bl	800106c <HAL_SYSTICK_IRQHandler>

}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80005d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005dc:	f000 ff02 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_RTC_AlarmIRQHandler(&hrtc);
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <RTC_Alarm_IRQHandler+0x10>)
 80005ea:	f002 fc8d 	bl	8002f08 <HAL_RTC_AlarmIRQHandler>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200000d0 	.word	0x200000d0

080005f8 <printmsg>:
void  RTC_AlarmConfig(void);
UART_HandleTypeDef huart2;
RTC_HandleTypeDef hrtc;

void printmsg(char *format,...)
{
 80005f8:	b40f      	push	{r0, r1, r2, r3}
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b096      	sub	sp, #88	; 0x58
 80005fe:	af00      	add	r7, sp, #0

	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000600:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000604:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800060e:	4618      	mov	r0, r3
 8000610:	f003 f964 	bl	80038dc <vsiprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fdf9 	bl	8000210 <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	b29a      	uxth	r2, r3
 8000622:	f107 0108 	add.w	r1, r7, #8
 8000626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <printmsg+0x48>)
 800062c:	f002 fd99 	bl	8003162 <HAL_UART_Transmit>
	va_end(args);

}
 8000630:	bf00      	nop
 8000632:	3758      	adds	r7, #88	; 0x58
 8000634:	46bd      	mov	sp, r7
 8000636:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800063a:	b004      	add	sp, #16
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	2000008c 	.word	0x2000008c

08000644 <main>:

int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

	HAL_Init();
 8000648:	f000 fb4c 	bl	8000ce4 <HAL_Init>

	GPIO_Init();
 800064c:	f000 f8f2 	bl	8000834 <GPIO_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000650:	2032      	movs	r0, #50	; 0x32
 8000652:	f000 f80b 	bl	800066c <SystemClock_Config_HSE>

	UART2_Init();
 8000656:	f000 f945 	bl	80008e4 <UART2_Init>

	RTC_Init();
 800065a:	f000 f8a1 	bl	80007a0 <RTC_Init>

	printmsg("This is RTC Alarm Test program\r\n");
 800065e:	4802      	ldr	r0, [pc, #8]	; (8000668 <main+0x24>)
 8000660:	f7ff ffca 	bl	80005f8 <printmsg>


	while(1);
 8000664:	e7fe      	b.n	8000664 <main+0x20>
 8000666:	bf00      	nop
 8000668:	080041e8 	.word	0x080041e8

0800066c <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b096      	sub	sp, #88	; 0x58
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 8000676:	2300      	movs	r3, #0
 8000678:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 800067c:	2301      	movs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
	Osc_Init.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	623b      	str	r3, [r7, #32]
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	2b78      	cmp	r3, #120	; 0x78
 8000694:	d038      	beq.n	8000708 <SystemClock_Config_HSE+0x9c>
 8000696:	2b78      	cmp	r3, #120	; 0x78
 8000698:	dc7c      	bgt.n	8000794 <SystemClock_Config_HSE+0x128>
 800069a:	2b32      	cmp	r3, #50	; 0x32
 800069c:	d002      	beq.n	80006a4 <SystemClock_Config_HSE+0x38>
 800069e:	2b54      	cmp	r3, #84	; 0x54
 80006a0:	d019      	beq.n	80006d6 <SystemClock_Config_HSE+0x6a>
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
          flash_latency = 3;
	     break;

	  default:
	   return ;
 80006a2:	e077      	b.n	8000794 <SystemClock_Config_HSE+0x128>
		  Osc_Init.PLL.PLLM = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 50;
 80006a8:	2332      	movs	r3, #50	; 0x32
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
          flash_latency = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 80006d4:	e032      	b.n	800073c <SystemClock_Config_HSE+0xd0>
		  Osc_Init.PLL.PLLM = 4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 84;
 80006da:	2354      	movs	r3, #84	; 0x54
 80006dc:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
          flash_latency = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 8000706:	e019      	b.n	800073c <SystemClock_Config_HSE+0xd0>
		  Osc_Init.PLL.PLLM = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 120;
 800070c:	2378      	movs	r3, #120	; 0x78
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072c:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000732:	61bb      	str	r3, [r7, #24]
          flash_latency = 3;
 8000734:	2303      	movs	r3, #3
 8000736:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 800073a:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fcdb 	bl	80020fc <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config_HSE+0xe4>
	{
			Error_handler();
 800074c:	f000 f9b6 	bl	8000abc <Error_handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000750:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	4611      	mov	r1, r2
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fe5a 	bl	8001414 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config_HSE+0xfe>
	{
		Error_handler();
 8000766:	f000 f9a9 	bl	8000abc <Error_handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 800076a:	f000 ff39 	bl	80015e0 <HAL_RCC_GetHCLKFreq>
 800076e:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 8000770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <SystemClock_Config_HSE+0x130>)
 8000774:	fba2 2303 	umull	r2, r3, r2, r3
 8000778:	099b      	lsrs	r3, r3, #6
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fc4d 	bl	800101a <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000780:	2004      	movs	r0, #4
 8000782:	f000 fc57 	bl	8001034 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800078e:	f000 fc1a 	bl	8000fc6 <HAL_NVIC_SetPriority>
 8000792:	e000      	b.n	8000796 <SystemClock_Config_HSE+0x12a>
	   return ;
 8000794:	bf00      	nop

 }
 8000796:	3758      	adds	r7, #88	; 0x58
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	10624dd3 	.word	0x10624dd3

080007a0 <RTC_Init>:


void RTC_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
   hrtc.Instance = RTC;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <RTC_Init+0x44>)
 80007a6:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <RTC_Init+0x48>)
 80007a8:	601a      	str	r2, [r3, #0]
   hrtc.Init.HourFormat =RTC_HOURFORMAT_24;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <RTC_Init+0x44>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
   hrtc.Init.AsynchPrediv = 0x7F;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <RTC_Init+0x44>)
 80007b2:	227f      	movs	r2, #127	; 0x7f
 80007b4:	609a      	str	r2, [r3, #8]
   hrtc.Init.SynchPrediv = 0xFF;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <RTC_Init+0x44>)
 80007b8:	22ff      	movs	r2, #255	; 0xff
 80007ba:	60da      	str	r2, [r3, #12]
   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <RTC_Init+0x44>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_LOW;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <RTC_Init+0x44>)
 80007c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007c8:	615a      	str	r2, [r3, #20]
   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <RTC_Init+0x44>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]

   if( HAL_RTC_Init(&hrtc) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <RTC_Init+0x44>)
 80007d2:	f001 ff31 	bl	8002638 <HAL_RTC_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <RTC_Init+0x40>
   {
	   Error_handler();
 80007dc:	f000 f96e 	bl	8000abc <Error_handler>
   }
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000d0 	.word	0x200000d0
 80007e8:	40002800 	.word	0x40002800

080007ec <RTC_CalendarConfig>:



void  RTC_CalendarConfig(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef RTC_TimeInit;
	RTC_DateTypeDef RTC_DateInit;
	//this function does RTC Calendar Config
	//Lets configure the calendar for Time : 12:11:10 PM Date : 12 june 2018 TUESDAY

	RTC_TimeInit.Hours = 12;
 80007f2:	230c      	movs	r3, #12
 80007f4:	713b      	strb	r3, [r7, #4]
	RTC_TimeInit.Minutes = 45;
 80007f6:	232d      	movs	r3, #45	; 0x2d
 80007f8:	717b      	strb	r3, [r7, #5]
	RTC_TimeInit.Seconds = 00;
 80007fa:	2300      	movs	r3, #0
 80007fc:	71bb      	strb	r3, [r7, #6]
	//RTC_TimeInit.TimeFormat = RTC_HOURFORMAT12_PM;
	HAL_RTC_SetTime(&hrtc, &RTC_TimeInit,RTC_FORMAT_BIN);
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	4619      	mov	r1, r3
 8000804:	480a      	ldr	r0, [pc, #40]	; (8000830 <RTC_CalendarConfig+0x44>)
 8000806:	f001 ffa8 	bl	800275a <HAL_RTC_SetTime>


	RTC_DateInit.Date = 12;
 800080a:	230c      	movs	r3, #12
 800080c:	70bb      	strb	r3, [r7, #2]
	RTC_DateInit.Month = RTC_MONTH_JUNE;
 800080e:	2306      	movs	r3, #6
 8000810:	707b      	strb	r3, [r7, #1]
	RTC_DateInit.Year = 18;
 8000812:	2312      	movs	r3, #18
 8000814:	70fb      	strb	r3, [r7, #3]
	RTC_DateInit.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000816:	2302      	movs	r3, #2
 8000818:	703b      	strb	r3, [r7, #0]

	HAL_RTC_SetDate(&hrtc,&RTC_DateInit,RTC_FORMAT_BIN);
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	4619      	mov	r1, r3
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <RTC_CalendarConfig+0x44>)
 8000822:	f002 f8b5 	bl	8002990 <HAL_RTC_SetDate>

}
 8000826:	bf00      	nop
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000d0 	.word	0x200000d0

08000834 <GPIO_Init>:

void GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <GPIO_Init+0xa4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a25      	ldr	r2, [pc, #148]	; (80008d8 <GPIO_Init+0xa4>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <GPIO_Init+0xa4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <GPIO_Init+0xa4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <GPIO_Init+0xa4>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <GPIO_Init+0xa4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]


	GPIO_InitTypeDef ledgpio , buttongpio;

	ledgpio.Pin = GPIO_PIN_5;
 8000872:	2320      	movs	r3, #32
 8000874:	61fb      	str	r3, [r7, #28]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
	ledgpio.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA,&ledgpio);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4815      	ldr	r0, [pc, #84]	; (80008dc <GPIO_Init+0xa8>)
 8000886:	f000 fbff 	bl	8001088 <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_8;
 800088a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088e:	61fb      	str	r3, [r7, #28]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	623b      	str	r3, [r7, #32]
	ledgpio.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	480f      	ldr	r0, [pc, #60]	; (80008dc <GPIO_Init+0xa8>)
 80008a0:	f000 fbf2 	bl	8001088 <HAL_GPIO_Init>

	buttongpio.Pin = GPIO_PIN_13;
 80008a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a8:	60bb      	str	r3, [r7, #8]
	buttongpio.Mode = GPIO_MODE_IT_FALLING;
 80008aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008ae:	60fb      	str	r3, [r7, #12]
	buttongpio.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC,&buttongpio);
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	4619      	mov	r1, r3
 80008ba:	4809      	ldr	r0, [pc, #36]	; (80008e0 <GPIO_Init+0xac>)
 80008bc:	f000 fbe4 	bl	8001088 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn,15,0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	210f      	movs	r1, #15
 80008c4:	2028      	movs	r0, #40	; 0x28
 80008c6:	f000 fb7e 	bl	8000fc6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ca:	2028      	movs	r0, #40	; 0x28
 80008cc:	f000 fb97 	bl	8000ffe <HAL_NVIC_EnableIRQ>


}
 80008d0:	bf00      	nop
 80008d2:	3730      	adds	r7, #48	; 0x30
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020800 	.word	0x40020800

080008e4 <UART2_Init>:

void UART2_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <UART2_Init+0x44>)
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <UART2_Init+0x48>)
 80008ec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate =115200;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <UART2_Init+0x44>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <UART2_Init+0x44>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <UART2_Init+0x44>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <UART2_Init+0x44>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <UART2_Init+0x44>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <UART2_Init+0x44>)
 8000910:	2208      	movs	r2, #8
 8000912:	615a      	str	r2, [r3, #20]


	if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <UART2_Init+0x44>)
 8000916:	f002 fbd7 	bl	80030c8 <HAL_UART_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 8000920:	f000 f8cc 	bl	8000abc <Error_handler>
	}

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000008c 	.word	0x2000008c
 800092c:	40004400 	.word	0x40004400

08000930 <getDayofweek>:


char* getDayofweek(uint8_t number)
{
 8000930:	b4b0      	push	{r4, r5, r7}
 8000932:	b08b      	sub	sp, #44	; 0x2c
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
	char *weekday[] = { "Monday", "TuesDay", "Wednesday","Thursday","Friday","Saturday","Sunday"};
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <getDayofweek+0x38>)
 800093c:	f107 040c 	add.w	r4, r7, #12
 8000940:	461d      	mov	r5, r3
 8000942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000946:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800094a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return weekday[number-1];
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	3b01      	subs	r3, #1
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	3328      	adds	r3, #40	; 0x28
 8000956:	443b      	add	r3, r7
 8000958:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 800095c:	4618      	mov	r0, r3
 800095e:	372c      	adds	r7, #44	; 0x2c
 8000960:	46bd      	mov	sp, r7
 8000962:	bcb0      	pop	{r4, r5, r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	0800420c 	.word	0x0800420c

0800096c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800096c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096e:	b08b      	sub	sp, #44	; 0x2c
 8000970:	af02      	add	r7, sp, #8
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
	 RTC_TimeTypeDef RTC_TimeRead;
	 RTC_DateTypeDef RTC_DateRead;

	 RTC_CalendarConfig();
 8000976:	f7ff ff39 	bl	80007ec <RTC_CalendarConfig>

	 HAL_RTC_GetTime(&hrtc,&RTC_TimeRead,RTC_FORMAT_BIN);
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	2200      	movs	r2, #0
 8000980:	4619      	mov	r1, r3
 8000982:	4815      	ldr	r0, [pc, #84]	; (80009d8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000984:	f001 ffa6 	bl	80028d4 <HAL_RTC_GetTime>

	 HAL_RTC_GetDate(&hrtc,&RTC_DateRead,RTC_FORMAT_BIN);
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2200      	movs	r2, #0
 800098e:	4619      	mov	r1, r3
 8000990:	4811      	ldr	r0, [pc, #68]	; (80009d8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000992:	f002 f8a4 	bl	8002ade <HAL_RTC_GetDate>

	 printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8000996:	7b3b      	ldrb	r3, [r7, #12]
 8000998:	4619      	mov	r1, r3
			 RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 800099a:	7b7b      	ldrb	r3, [r7, #13]
	 printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 800099c:	461a      	mov	r2, r3
			 RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 800099e:	7bbb      	ldrb	r3, [r7, #14]
	 printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 80009a0:	480e      	ldr	r0, [pc, #56]	; (80009dc <HAL_GPIO_EXTI_Callback+0x70>)
 80009a2:	f7ff fe29 	bl	80005f8 <printmsg>
	 printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",RTC_DateRead.Month,RTC_DateRead.Date,\
 80009a6:	7a7b      	ldrb	r3, [r7, #9]
 80009a8:	461c      	mov	r4, r3
 80009aa:	7abb      	ldrb	r3, [r7, #10]
 80009ac:	461d      	mov	r5, r3
			 RTC_DateRead.Year,getDayofweek(RTC_DateRead.WeekDay));
 80009ae:	7afb      	ldrb	r3, [r7, #11]
	 printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",RTC_DateRead.Month,RTC_DateRead.Date,\
 80009b0:	461e      	mov	r6, r3
 80009b2:	7a3b      	ldrb	r3, [r7, #8]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ffbb 	bl	8000930 <getDayofweek>
 80009ba:	4603      	mov	r3, r0
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	4633      	mov	r3, r6
 80009c0:	462a      	mov	r2, r5
 80009c2:	4621      	mov	r1, r4
 80009c4:	4806      	ldr	r0, [pc, #24]	; (80009e0 <HAL_GPIO_EXTI_Callback+0x74>)
 80009c6:	f7ff fe17 	bl	80005f8 <printmsg>

	 RTC_AlarmConfig();
 80009ca:	f000 f80b 	bl	80009e4 <RTC_AlarmConfig>

}
 80009ce:	bf00      	nop
 80009d0:	3724      	adds	r7, #36	; 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000d0 	.word	0x200000d0
 80009dc:	08004228 	.word	0x08004228
 80009e0:	0800424c 	.word	0x0800424c

080009e4 <RTC_AlarmConfig>:


void  RTC_AlarmConfig(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef AlarmA_Set;

	memset(&AlarmA_Set,0,sizeof(AlarmA_Set));
 80009ea:	463b      	mov	r3, r7
 80009ec:	2228      	movs	r2, #40	; 0x28
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 ff55 	bl	80038a0 <memset>

	HAL_RTC_DeactivateAlarm(&hrtc,RTC_ALARM_A);
 80009f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009fa:	4810      	ldr	r0, [pc, #64]	; (8000a3c <RTC_AlarmConfig+0x58>)
 80009fc:	f002 f9f6 	bl	8002dec <HAL_RTC_DeactivateAlarm>

	//xx:45:09
	AlarmA_Set.Alarm = RTC_ALARM_A;
 8000a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
	AlarmA_Set.AlarmTime.Minutes = 45;
 8000a06:	232d      	movs	r3, #45	; 0x2d
 8000a08:	707b      	strb	r3, [r7, #1]
	AlarmA_Set.AlarmTime.Seconds = 9;
 8000a0a:	2309      	movs	r3, #9
 8000a0c:	70bb      	strb	r3, [r7, #2]
	AlarmA_Set.AlarmMask = RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY ;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <RTC_AlarmConfig+0x5c>)
 8000a10:	617b      	str	r3, [r7, #20]
	AlarmA_Set.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000a12:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000a16:	61bb      	str	r3, [r7, #24]
	if ( HAL_RTC_SetAlarm_IT(&hrtc, &AlarmA_Set, RTC_FORMAT_BIN) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <RTC_AlarmConfig+0x58>)
 8000a20:	f002 f8ac 	bl	8002b7c <HAL_RTC_SetAlarm_IT>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <RTC_AlarmConfig+0x4a>
	{
		Error_handler();
 8000a2a:	f000 f847 	bl	8000abc <Error_handler>
	}

	printmsg("Alarm Set Successful\r\n");
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <RTC_AlarmConfig+0x60>)
 8000a30:	f7ff fde2 	bl	80005f8 <printmsg>

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000d0 	.word	0x200000d0
 8000a40:	80800000 	.word	0x80800000
 8000a44:	08004274 	.word	0x08004274

08000a48 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	printmsg("Alarm Triggered \r\n");
 8000a50:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <HAL_RTC_AlarmAEventCallback+0x68>)
 8000a52:	f7ff fdd1 	bl	80005f8 <printmsg>

	RTC_TimeTypeDef RTC_TimeRead;

	HAL_RTC_GetTime(hrtc,&RTC_TimeRead,RTC_FORMAT_BIN);
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f001 ff38 	bl	80028d4 <HAL_RTC_GetTime>

	printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8000a64:	7b3b      	ldrb	r3, [r7, #12]
 8000a66:	4619      	mov	r1, r3
	RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 8000a68:	7b7b      	ldrb	r3, [r7, #13]
	printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8000a6a:	461a      	mov	r2, r3
	RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 8000a6c:	7bbb      	ldrb	r3, [r7, #14]
	printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8000a6e:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8000a70:	f7ff fdc2 	bl	80005f8 <printmsg>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2120      	movs	r1, #32
 8000a78:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <HAL_RTC_AlarmAEventCallback+0x70>)
 8000a7a:	f000 fc99 	bl	80013b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <HAL_RTC_AlarmAEventCallback+0x70>)
 8000a86:	f000 fc93 	bl	80013b0 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000a8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a8e:	f000 f99b 	bl	8000dc8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2120      	movs	r1, #32
 8000a96:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <HAL_RTC_AlarmAEventCallback+0x70>)
 8000a98:	f000 fc8a 	bl	80013b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_RTC_AlarmAEventCallback+0x70>)
 8000aa4:	f000 fc84 	bl	80013b0 <HAL_GPIO_WritePin>

}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	0800428c 	.word	0x0800428c
 8000ab4:	08004228 	.word	0x08004228
 8000ab8:	40020000 	.word	0x40020000

08000abc <Error_handler>:

void Error_handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
	while(1);
 8000ac0:	e7fe      	b.n	8000ac0 <Error_handler+0x4>
	...

08000ac4 <HAL_MspInit>:


#include "main_app.h"

void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 fa71 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_MspInit+0x40>)
 8000ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad2:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <HAL_MspInit+0x40>)
 8000ad4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000ad8:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	f06f 000b 	mvn.w	r0, #11
 8000ae2:	f000 fa70 	bl	8000fc6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	f06f 000a 	mvn.w	r0, #10
 8000aee:	f000 fa6a 	bl	8000fc6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	f06f 0009 	mvn.w	r0, #9
 8000afa:	f000 fa64 	bl	8000fc6 <HAL_NVIC_SetPriority>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]

	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000b58:	2307      	movs	r3, #7
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	480c      	ldr	r0, [pc, #48]	; (8000b94 <HAL_UART_MspInit+0x8c>)
 8000b64:	f000 fa90 	bl	8001088 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000b68:	2308      	movs	r3, #8
 8000b6a:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	4808      	ldr	r0, [pc, #32]	; (8000b94 <HAL_UART_MspInit+0x8c>)
 8000b74:	f000 fa88 	bl	8001088 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b78:	2026      	movs	r0, #38	; 0x26
 8000b7a:	f000 fa40 	bl	8000ffe <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,0,0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2026      	movs	r0, #38	; 0x26
 8000b84:	f000 fa1f 	bl	8000fc6 <HAL_NVIC_SetPriority>
}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	; 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <HAL_RTC_MspInit>:

 void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
 {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0a6      	sub	sp, #152	; 0x98
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	  RCC_OscInitTypeDef        RCC_OscInitStruct;
	  RCC_PeriphCLKInitTypeDef RCC_RTCPeriClkInit;
	  //1. Turn on the LSE
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	667b      	str	r3, [r7, #100]	; 0x64
	  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	67fb      	str	r3, [r7, #124]	; 0x7c
	  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f001 faa3 	bl	80020fc <HAL_RCC_OscConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_RTC_MspInit+0x28>
	  {
		  Error_handler();
 8000bbc:	f7ff ff7e 	bl	8000abc <Error_handler>
	  }

	  //2. select LSE as RTCCLK
	  RCC_RTCPeriClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bc0:	2320      	movs	r3, #32
 8000bc2:	60bb      	str	r3, [r7, #8]
	  RCC_RTCPeriClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc8:	64bb      	str	r3, [r7, #72]	; 0x48
	  if( HAL_RCCEx_PeriphCLKConfig(&RCC_RTCPeriClkInit)!= HAL_OK)
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fd3a 	bl	8001648 <HAL_RCCEx_PeriphCLKConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_RTC_MspInit+0x46>
	  {
		  Error_handler();
 8000bda:	f7ff ff6f 	bl	8000abc <Error_handler>
	  }

	  //3. Enable the RTC Clock
	  __HAL_RCC_RTC_ENABLE();
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <HAL_RTC_MspInit+0x64>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]

	  //4. Enable the RTC Alarm IRQ in the NVIC
	  HAL_NVIC_SetPriority(RTC_Alarm_IRQn,15,0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	210f      	movs	r1, #15
 8000be8:	2029      	movs	r0, #41	; 0x29
 8000bea:	f000 f9ec 	bl	8000fc6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000bee:	2029      	movs	r0, #41	; 0x29
 8000bf0:	f000 fa05 	bl	8000ffe <HAL_NVIC_EnableIRQ>
 }
 8000bf4:	bf00      	nop
 8000bf6:	3798      	adds	r7, #152	; 0x98
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	42470e3c 	.word	0x42470e3c

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f002 fe0c 	bl	800384c <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20020000 	.word	0x20020000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	200000f0 	.word	0x200000f0
 8000c68:	20000108 	.word	0x20000108

08000c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c96:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cac:	4c0b      	ldr	r4, [pc, #44]	; (8000cdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cba:	f7ff ffd7 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f002 fdcb 	bl	8003858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fcbf 	bl	8000644 <main>
  bx  lr    
 8000cc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cd4:	080042fc 	.word	0x080042fc
  ldr r2, =_sbss
 8000cd8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cdc:	20000108 	.word	0x20000108

08000ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_Init+0x40>)
 8000cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_Init+0x40>)
 8000cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_Init+0x40>)
 8000d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f94f 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f808 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f7ff fed4 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f967 	bl	800101a <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d64:	f000 f92f 	bl	8000fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	200000f4 	.word	0x200000f4

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	200000f4 	.word	0x200000f4

08000dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff ffee 	bl	8000db0 <HAL_GetTick>
 8000dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000de0:	d005      	beq.n	8000dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_Delay+0x44>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dee:	bf00      	nop
 8000df0:	f7ff ffde 	bl	8000db0 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8f7      	bhi.n	8000df0 <HAL_Delay+0x28>
  {
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4907      	ldr	r1, [pc, #28]	; (8000eac <__NVIC_EnableIRQ+0x38>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff29 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff3e 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff8e 	bl	8000f04 <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5d 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff31 	bl	8000e74 <__NVIC_EnableIRQ>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffa2 	bl	8000f6c <SysTick_Config>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b04      	cmp	r3, #4
 8001040:	d106      	bne.n	8001050 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a08      	ldr	r2, [pc, #32]	; (8001068 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800104e:	e005      	b.n	800105c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001056:	f023 0304 	bic.w	r3, r3, #4
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001070:	f000 f802 	bl	8001078 <HAL_SYSTICK_Callback>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e165      	b.n	8001370 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	429a      	cmp	r2, r3
 80010be:	f040 8154 	bne.w	800136a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d005      	beq.n	80010da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d130      	bne.n	800113c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	f003 0201 	and.w	r2, r3, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b03      	cmp	r3, #3
 8001146:	d017      	beq.n	8001178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d123      	bne.n	80011cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	08da      	lsrs	r2, r3, #3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3208      	adds	r2, #8
 800118c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	220f      	movs	r2, #15
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	08da      	lsrs	r2, r3, #3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3208      	adds	r2, #8
 80011c6:	69b9      	ldr	r1, [r7, #24]
 80011c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0203 	and.w	r2, r3, #3
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 80ae 	beq.w	800136a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b5d      	ldr	r3, [pc, #372]	; (8001388 <HAL_GPIO_Init+0x300>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	4a5c      	ldr	r2, [pc, #368]	; (8001388 <HAL_GPIO_Init+0x300>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121c:	6453      	str	r3, [r2, #68]	; 0x44
 800121e:	4b5a      	ldr	r3, [pc, #360]	; (8001388 <HAL_GPIO_Init+0x300>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800122a:	4a58      	ldr	r2, [pc, #352]	; (800138c <HAL_GPIO_Init+0x304>)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4f      	ldr	r2, [pc, #316]	; (8001390 <HAL_GPIO_Init+0x308>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d025      	beq.n	80012a2 <HAL_GPIO_Init+0x21a>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4e      	ldr	r2, [pc, #312]	; (8001394 <HAL_GPIO_Init+0x30c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d01f      	beq.n	800129e <HAL_GPIO_Init+0x216>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4d      	ldr	r2, [pc, #308]	; (8001398 <HAL_GPIO_Init+0x310>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d019      	beq.n	800129a <HAL_GPIO_Init+0x212>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4c      	ldr	r2, [pc, #304]	; (800139c <HAL_GPIO_Init+0x314>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d013      	beq.n	8001296 <HAL_GPIO_Init+0x20e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4b      	ldr	r2, [pc, #300]	; (80013a0 <HAL_GPIO_Init+0x318>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d00d      	beq.n	8001292 <HAL_GPIO_Init+0x20a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4a      	ldr	r2, [pc, #296]	; (80013a4 <HAL_GPIO_Init+0x31c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d007      	beq.n	800128e <HAL_GPIO_Init+0x206>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a49      	ldr	r2, [pc, #292]	; (80013a8 <HAL_GPIO_Init+0x320>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d101      	bne.n	800128a <HAL_GPIO_Init+0x202>
 8001286:	2306      	movs	r3, #6
 8001288:	e00c      	b.n	80012a4 <HAL_GPIO_Init+0x21c>
 800128a:	2307      	movs	r3, #7
 800128c:	e00a      	b.n	80012a4 <HAL_GPIO_Init+0x21c>
 800128e:	2305      	movs	r3, #5
 8001290:	e008      	b.n	80012a4 <HAL_GPIO_Init+0x21c>
 8001292:	2304      	movs	r3, #4
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x21c>
 8001296:	2303      	movs	r3, #3
 8001298:	e004      	b.n	80012a4 <HAL_GPIO_Init+0x21c>
 800129a:	2302      	movs	r3, #2
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_Init+0x21c>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <HAL_GPIO_Init+0x21c>
 80012a2:	2300      	movs	r3, #0
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	f002 0203 	and.w	r2, r2, #3
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	4093      	lsls	r3, r2
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b4:	4935      	ldr	r1, [pc, #212]	; (800138c <HAL_GPIO_Init+0x304>)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3302      	adds	r3, #2
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c2:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <HAL_GPIO_Init+0x324>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e6:	4a31      	ldr	r2, [pc, #196]	; (80013ac <HAL_GPIO_Init+0x324>)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <HAL_GPIO_Init+0x324>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001310:	4a26      	ldr	r2, [pc, #152]	; (80013ac <HAL_GPIO_Init+0x324>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <HAL_GPIO_Init+0x324>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <HAL_GPIO_Init+0x324>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <HAL_GPIO_Init+0x324>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001364:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_GPIO_Init+0x324>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3301      	adds	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b0f      	cmp	r3, #15
 8001374:	f67f ae96 	bls.w	80010a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40013800 	.word	0x40013800
 8001390:	40020000 	.word	0x40020000
 8001394:	40020400 	.word	0x40020400
 8001398:	40020800 	.word	0x40020800
 800139c:	40020c00 	.word	0x40020c00
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40021400 	.word	0x40021400
 80013a8:	40021800 	.word	0x40021800
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013cc:	e003      	b.n	80013d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	041a      	lsls	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fab2 	bl	800096c <HAL_GPIO_EXTI_Callback>
  }
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40013c00 	.word	0x40013c00

08001414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0cc      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001428:	4b68      	ldr	r3, [pc, #416]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d90c      	bls.n	8001450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001436:	4b65      	ldr	r3, [pc, #404]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800143e:	4b63      	ldr	r3, [pc, #396]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d001      	beq.n	8001450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e0b8      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d020      	beq.n	800149e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001468:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	4a58      	ldr	r2, [pc, #352]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001480:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4a52      	ldr	r2, [pc, #328]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800148a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800148c:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	494d      	ldr	r1, [pc, #308]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	4313      	orrs	r3, r2
 800149c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d044      	beq.n	8001534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d107      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d119      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e07f      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d003      	beq.n	80014d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d2:	4b3f      	ldr	r3, [pc, #252]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d109      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e06f      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e2:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e067      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f2:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f023 0203 	bic.w	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4934      	ldr	r1, [pc, #208]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	4313      	orrs	r3, r2
 8001502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001504:	f7ff fc54 	bl	8000db0 <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150a:	e00a      	b.n	8001522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150c:	f7ff fc50 	bl	8000db0 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e04f      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 020c 	and.w	r2, r3, #12
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	429a      	cmp	r2, r3
 8001532:	d1eb      	bne.n	800150c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001534:	4b25      	ldr	r3, [pc, #148]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d20c      	bcs.n	800155c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e032      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	4916      	ldr	r1, [pc, #88]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	4313      	orrs	r3, r2
 8001578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d009      	beq.n	800159a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	490e      	ldr	r1, [pc, #56]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800159a:	f000 fb7f 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 800159e:	4602      	mov	r2, r0
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	490a      	ldr	r1, [pc, #40]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	5ccb      	ldrb	r3, [r1, r3]
 80015ae:	fa22 f303 	lsr.w	r3, r2, r3
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_RCC_ClockConfig+0x1c8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fbb4 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023c00 	.word	0x40023c00
 80015d0:	40023800 	.word	0x40023800
 80015d4:	080042a0 	.word	0x080042a0
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000004 	.word	0x20000004

080015e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000000 	.word	0x20000000

080015f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015fc:	f7ff fff0 	bl	80015e0 <HAL_RCC_GetHCLKFreq>
 8001600:	4602      	mov	r2, r0
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	0a9b      	lsrs	r3, r3, #10
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	4903      	ldr	r1, [pc, #12]	; (800161c <HAL_RCC_GetPCLK1Freq+0x24>)
 800160e:	5ccb      	ldrb	r3, [r1, r3]
 8001610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001614:	4618      	mov	r0, r3
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	080042b0 	.word	0x080042b0

08001620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001624:	f7ff ffdc 	bl	80015e0 <HAL_RCC_GetHCLKFreq>
 8001628:	4602      	mov	r2, r0
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	0b5b      	lsrs	r3, r3, #13
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	4903      	ldr	r1, [pc, #12]	; (8001644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001636:	5ccb      	ldrb	r3, [r1, r3]
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	080042b0 	.word	0x080042b0

08001648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d010      	beq.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001680:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001686:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	496c      	ldr	r1, [pc, #432]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001690:	4313      	orrs	r3, r2
 8001692:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800169e:	2301      	movs	r3, #1
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d010      	beq.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80016ae:	4b64      	ldr	r3, [pc, #400]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016b4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	4960      	ldr	r1, [pc, #384]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80016cc:	2301      	movs	r3, #1
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d017      	beq.n	800170c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016dc:	4b58      	ldr	r3, [pc, #352]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4955      	ldr	r1, [pc, #340]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016fa:	d101      	bne.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80016fc:	2301      	movs	r3, #1
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001708:	2301      	movs	r3, #1
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d017      	beq.n	8001748 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001718:	4b49      	ldr	r3, [pc, #292]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800171a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800171e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001726:	4946      	ldr	r1, [pc, #280]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001728:	4313      	orrs	r3, r2
 800172a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001736:	d101      	bne.n	800173c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001738:	2301      	movs	r3, #1
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001744:	2301      	movs	r3, #1
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 808a 	beq.w	800186a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b39      	ldr	r3, [pc, #228]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a38      	ldr	r2, [pc, #224]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b36      	ldr	r3, [pc, #216]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001772:	4b34      	ldr	r3, [pc, #208]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a33      	ldr	r2, [pc, #204]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800177e:	f7ff fb17 	bl	8000db0 <HAL_GetTick>
 8001782:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001786:	f7ff fb13 	bl	8000db0 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e278      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017a4:	4b26      	ldr	r3, [pc, #152]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ac:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d02f      	beq.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017bc:	6a3a      	ldr	r2, [r7, #32]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d028      	beq.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017c2:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ca:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80017d8:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d114      	bne.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fae1 	bl	8000db0 <HAL_GetTick>
 80017ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f0:	e00a      	b.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f7ff fadd 	bl	8000db0 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e240      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800180a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ee      	beq.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800181c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001820:	d114      	bne.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001836:	4902      	ldr	r1, [pc, #8]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]
 800183c:	e00c      	b.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000
 8001848:	42470e40 	.word	0x42470e40
 800184c:	4b4a      	ldr	r3, [pc, #296]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a49      	ldr	r2, [pc, #292]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001852:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001856:	6093      	str	r3, [r2, #8]
 8001858:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800185a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	4944      	ldr	r1, [pc, #272]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001866:	4313      	orrs	r3, r2
 8001868:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	d004      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800187c:	4b3f      	ldr	r3, [pc, #252]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800187e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00a      	beq.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800188c:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800188e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001892:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	4937      	ldr	r1, [pc, #220]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800189c:	4313      	orrs	r3, r2
 800189e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00a      	beq.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018ae:	4b32      	ldr	r3, [pc, #200]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018bc:	492e      	ldr	r1, [pc, #184]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d011      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018d0:	4b29      	ldr	r3, [pc, #164]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018de:	4926      	ldr	r1, [pc, #152]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018ee:	d101      	bne.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80018f0:	2301      	movs	r3, #1
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00a      	beq.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001906:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	491a      	ldr	r1, [pc, #104]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001910:	4313      	orrs	r3, r2
 8001912:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191e:	2b00      	cmp	r3, #0
 8001920:	d011      	beq.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001928:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001930:	4911      	ldr	r1, [pc, #68]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001932:	4313      	orrs	r3, r2
 8001934:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800193c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001940:	d101      	bne.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001942:	2301      	movs	r3, #1
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001948:	2b01      	cmp	r3, #1
 800194a:	d005      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001954:	f040 80ff 	bne.w	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800195e:	f7ff fa27 	bl	8000db0 <HAL_GetTick>
 8001962:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001964:	e00e      	b.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001966:	f7ff fa23 	bl	8000db0 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d907      	bls.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e188      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001978:	40023800 	.word	0x40023800
 800197c:	424711e0 	.word	0x424711e0
 8001980:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001984:	4b7e      	ldr	r3, [pc, #504]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1ea      	bne.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d009      	beq.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d028      	beq.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d124      	bne.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80019b8:	4b71      	ldr	r3, [pc, #452]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019be:	0c1b      	lsrs	r3, r3, #16
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	3301      	adds	r3, #1
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80019ca:	4b6d      	ldr	r3, [pc, #436]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019d0:	0e1b      	lsrs	r3, r3, #24
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	431a      	orrs	r2, r3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	085b      	lsrs	r3, r3, #1
 80019e8:	3b01      	subs	r3, #1
 80019ea:	041b      	lsls	r3, r3, #16
 80019ec:	431a      	orrs	r2, r3
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	071b      	lsls	r3, r3, #28
 80019fa:	4961      	ldr	r1, [pc, #388]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a16:	d00a      	beq.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d035      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a2c:	d130      	bne.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a2e:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a40:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a46:	0f1b      	lsrs	r3, r3, #28
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	019b      	lsls	r3, r3, #6
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	085b      	lsrs	r3, r3, #1
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	041b      	lsls	r3, r3, #16
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	071b      	lsls	r3, r3, #28
 8001a70:	4943      	ldr	r1, [pc, #268]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001a78:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a7e:	f023 021f 	bic.w	r2, r3, #31
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	3b01      	subs	r3, #1
 8001a88:	493d      	ldr	r1, [pc, #244]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d029      	beq.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aa4:	d124      	bne.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ab8:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001abe:	0f1b      	lsrs	r3, r3, #28
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	019b      	lsls	r3, r3, #6
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	041b      	lsls	r3, r3, #16
 8001adc:	431a      	orrs	r2, r3
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	061b      	lsls	r3, r3, #24
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	071b      	lsls	r3, r3, #28
 8001ae8:	4925      	ldr	r1, [pc, #148]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d016      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	019b      	lsls	r3, r3, #6
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	071b      	lsls	r3, r3, #28
 8001b22:	4917      	ldr	r1, [pc, #92]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b30:	f7ff f93e 	bl	8000db0 <HAL_GetTick>
 8001b34:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b38:	f7ff f93a 	bl	8000db0 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e09f      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	f040 8095 	bne.w	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b64:	f7ff f924 	bl	8000db0 <HAL_GetTick>
 8001b68:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b6a:	e00f      	b.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001b6c:	f7ff f920 	bl	8000db0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d908      	bls.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e085      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	42470068 	.word	0x42470068
 8001b88:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b8c:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b98:	d0e8      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d02b      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d127      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001bc2:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	431a      	orrs	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	3b01      	subs	r3, #1
 8001be6:	041b      	lsls	r3, r3, #16
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	061b      	lsls	r3, r3, #24
 8001bf0:	4928      	ldr	r1, [pc, #160]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001bf8:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bfe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	3b01      	subs	r3, #1
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	4922      	ldr	r1, [pc, #136]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d01d      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c26:	d118      	bne.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2e:	0e1b      	lsrs	r3, r3, #24
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	019b      	lsls	r3, r3, #6
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	041b      	lsls	r3, r3, #16
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	4910      	ldr	r1, [pc, #64]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c60:	f7ff f8a6 	bl	8000db0 <HAL_GetTick>
 8001c64:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c68:	f7ff f8a2 	bl	8000db0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e007      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c86:	d1ef      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3730      	adds	r7, #48	; 0x30
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	42470070 	.word	0x42470070

08001c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca0:	b0ae      	sub	sp, #184	; 0xb8
 8001ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc2:	4bcb      	ldr	r3, [pc, #812]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	f200 8206 	bhi.w	80020dc <HAL_RCC_GetSysClockFreq+0x440>
 8001cd0:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001d0d 	.word	0x08001d0d
 8001cdc:	080020dd 	.word	0x080020dd
 8001ce0:	080020dd 	.word	0x080020dd
 8001ce4:	080020dd 	.word	0x080020dd
 8001ce8:	08001d15 	.word	0x08001d15
 8001cec:	080020dd 	.word	0x080020dd
 8001cf0:	080020dd 	.word	0x080020dd
 8001cf4:	080020dd 	.word	0x080020dd
 8001cf8:	08001d1d 	.word	0x08001d1d
 8001cfc:	080020dd 	.word	0x080020dd
 8001d00:	080020dd 	.word	0x080020dd
 8001d04:	080020dd 	.word	0x080020dd
 8001d08:	08001f0d 	.word	0x08001f0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d0c:	4bb9      	ldr	r3, [pc, #740]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001d12:	e1e7      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d14:	4bb8      	ldr	r3, [pc, #736]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d1a:	e1e3      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d1c:	4bb4      	ldr	r3, [pc, #720]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d28:	4bb1      	ldr	r3, [pc, #708]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d071      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d34:	4bae      	ldr	r3, [pc, #696]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	099b      	lsrs	r3, r3, #6
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d40:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d5a:	4622      	mov	r2, r4
 8001d5c:	462b      	mov	r3, r5
 8001d5e:	f04f 0000 	mov.w	r0, #0
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	0159      	lsls	r1, r3, #5
 8001d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d6c:	0150      	lsls	r0, r2, #5
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4621      	mov	r1, r4
 8001d74:	1a51      	subs	r1, r2, r1
 8001d76:	6439      	str	r1, [r7, #64]	; 0x40
 8001d78:	4629      	mov	r1, r5
 8001d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	018b      	lsls	r3, r1, #6
 8001d90:	4641      	mov	r1, r8
 8001d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d96:	4641      	mov	r1, r8
 8001d98:	018a      	lsls	r2, r1, #6
 8001d9a:	4641      	mov	r1, r8
 8001d9c:	1a51      	subs	r1, r2, r1
 8001d9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001da0:	4649      	mov	r1, r9
 8001da2:	eb63 0301 	sbc.w	r3, r3, r1
 8001da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001db4:	4649      	mov	r1, r9
 8001db6:	00cb      	lsls	r3, r1, #3
 8001db8:	4641      	mov	r1, r8
 8001dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dbe:	4641      	mov	r1, r8
 8001dc0:	00ca      	lsls	r2, r1, #3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4622      	mov	r2, r4
 8001dca:	189b      	adds	r3, r3, r2
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dce:	462b      	mov	r3, r5
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	eb42 0303 	adc.w	r3, r2, r3
 8001dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001de4:	4629      	mov	r1, r5
 8001de6:	024b      	lsls	r3, r1, #9
 8001de8:	4621      	mov	r1, r4
 8001dea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dee:	4621      	mov	r1, r4
 8001df0:	024a      	lsls	r2, r1, #9
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e04:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001e08:	f7fe fa5a 	bl	80002c0 <__aeabi_uldivmod>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4613      	mov	r3, r2
 8001e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e16:	e067      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e18:	4b75      	ldr	r3, [pc, #468]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	099b      	lsrs	r3, r3, #6
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e24:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e30:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e32:	2300      	movs	r3, #0
 8001e34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e36:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	462b      	mov	r3, r5
 8001e3e:	f04f 0000 	mov.w	r0, #0
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	0159      	lsls	r1, r3, #5
 8001e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e4c:	0150      	lsls	r0, r2, #5
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4621      	mov	r1, r4
 8001e54:	1a51      	subs	r1, r2, r1
 8001e56:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e58:	4629      	mov	r1, r5
 8001e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	018b      	lsls	r3, r1, #6
 8001e70:	4641      	mov	r1, r8
 8001e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e76:	4641      	mov	r1, r8
 8001e78:	018a      	lsls	r2, r1, #6
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e80:	4649      	mov	r1, r9
 8001e82:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e92:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e9a:	4692      	mov	sl, r2
 8001e9c:	469b      	mov	fp, r3
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	eb1a 0303 	adds.w	r3, sl, r3
 8001ea4:	623b      	str	r3, [r7, #32]
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	eb4b 0303 	adc.w	r3, fp, r3
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001eba:	4629      	mov	r1, r5
 8001ebc:	028b      	lsls	r3, r1, #10
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	028a      	lsls	r2, r1, #10
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	673b      	str	r3, [r7, #112]	; 0x70
 8001ed4:	677a      	str	r2, [r7, #116]	; 0x74
 8001ed6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001eda:	f7fe f9f1 	bl	80002c0 <__aeabi_uldivmod>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ee8:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001efa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001efe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f0a:	e0eb      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f0c:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f18:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d06b      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f24:	4b32      	ldr	r3, [pc, #200]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f36:	663b      	str	r3, [r7, #96]	; 0x60
 8001f38:	2300      	movs	r3, #0
 8001f3a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f40:	4622      	mov	r2, r4
 8001f42:	462b      	mov	r3, r5
 8001f44:	f04f 0000 	mov.w	r0, #0
 8001f48:	f04f 0100 	mov.w	r1, #0
 8001f4c:	0159      	lsls	r1, r3, #5
 8001f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f52:	0150      	lsls	r0, r2, #5
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4621      	mov	r1, r4
 8001f5a:	1a51      	subs	r1, r2, r1
 8001f5c:	61b9      	str	r1, [r7, #24]
 8001f5e:	4629      	mov	r1, r5
 8001f60:	eb63 0301 	sbc.w	r3, r3, r1
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f72:	4659      	mov	r1, fp
 8001f74:	018b      	lsls	r3, r1, #6
 8001f76:	4651      	mov	r1, sl
 8001f78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f7c:	4651      	mov	r1, sl
 8001f7e:	018a      	lsls	r2, r1, #6
 8001f80:	4651      	mov	r1, sl
 8001f82:	ebb2 0801 	subs.w	r8, r2, r1
 8001f86:	4659      	mov	r1, fp
 8001f88:	eb63 0901 	sbc.w	r9, r3, r1
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fa0:	4690      	mov	r8, r2
 8001fa2:	4699      	mov	r9, r3
 8001fa4:	4623      	mov	r3, r4
 8001fa6:	eb18 0303 	adds.w	r3, r8, r3
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	462b      	mov	r3, r5
 8001fae:	eb49 0303 	adc.w	r3, r9, r3
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	024b      	lsls	r3, r1, #9
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fca:	4621      	mov	r1, r4
 8001fcc:	024a      	lsls	r2, r1, #9
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fda:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fdc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fe0:	f7fe f96e 	bl	80002c0 <__aeabi_uldivmod>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4613      	mov	r3, r2
 8001fea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fee:	e065      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x420>
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	00f42400 	.word	0x00f42400
 8001ff8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffc:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	099b      	lsrs	r3, r3, #6
 8002002:	2200      	movs	r2, #0
 8002004:	4618      	mov	r0, r3
 8002006:	4611      	mov	r1, r2
 8002008:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800200c:	653b      	str	r3, [r7, #80]	; 0x50
 800200e:	2300      	movs	r3, #0
 8002010:	657b      	str	r3, [r7, #84]	; 0x54
 8002012:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002016:	4642      	mov	r2, r8
 8002018:	464b      	mov	r3, r9
 800201a:	f04f 0000 	mov.w	r0, #0
 800201e:	f04f 0100 	mov.w	r1, #0
 8002022:	0159      	lsls	r1, r3, #5
 8002024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002028:	0150      	lsls	r0, r2, #5
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4641      	mov	r1, r8
 8002030:	1a51      	subs	r1, r2, r1
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	4649      	mov	r1, r9
 8002036:	eb63 0301 	sbc.w	r3, r3, r1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002048:	4659      	mov	r1, fp
 800204a:	018b      	lsls	r3, r1, #6
 800204c:	4651      	mov	r1, sl
 800204e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002052:	4651      	mov	r1, sl
 8002054:	018a      	lsls	r2, r1, #6
 8002056:	4651      	mov	r1, sl
 8002058:	1a54      	subs	r4, r2, r1
 800205a:	4659      	mov	r1, fp
 800205c:	eb63 0501 	sbc.w	r5, r3, r1
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	00eb      	lsls	r3, r5, #3
 800206a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800206e:	00e2      	lsls	r2, r4, #3
 8002070:	4614      	mov	r4, r2
 8002072:	461d      	mov	r5, r3
 8002074:	4643      	mov	r3, r8
 8002076:	18e3      	adds	r3, r4, r3
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	464b      	mov	r3, r9
 800207c:	eb45 0303 	adc.w	r3, r5, r3
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800208e:	4629      	mov	r1, r5
 8002090:	028b      	lsls	r3, r1, #10
 8002092:	4621      	mov	r1, r4
 8002094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002098:	4621      	mov	r1, r4
 800209a:	028a      	lsls	r2, r1, #10
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020a4:	2200      	movs	r2, #0
 80020a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80020a8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80020aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020ae:	f7fe f907 	bl	80002c0 <__aeabi_uldivmod>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4613      	mov	r3, r2
 80020b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	0f1b      	lsrs	r3, r3, #28
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80020ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020da:	e003      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80020de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	37b8      	adds	r7, #184	; 0xb8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	00f42400 	.word	0x00f42400

080020fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e28d      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8083 	beq.w	8002222 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800211c:	4b94      	ldr	r3, [pc, #592]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b04      	cmp	r3, #4
 8002126:	d019      	beq.n	800215c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002128:	4b91      	ldr	r3, [pc, #580]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002130:	2b08      	cmp	r3, #8
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002134:	4b8e      	ldr	r3, [pc, #568]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002140:	d00c      	beq.n	800215c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002142:	4b8b      	ldr	r3, [pc, #556]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d112      	bne.n	8002174 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214e:	4b88      	ldr	r3, [pc, #544]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215a:	d10b      	bne.n	8002174 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	4b84      	ldr	r3, [pc, #528]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d05b      	beq.n	8002220 <HAL_RCC_OscConfig+0x124>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d157      	bne.n	8002220 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e25a      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217c:	d106      	bne.n	800218c <HAL_RCC_OscConfig+0x90>
 800217e:	4b7c      	ldr	r3, [pc, #496]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a7b      	ldr	r2, [pc, #492]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e01d      	b.n	80021c8 <HAL_RCC_OscConfig+0xcc>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0xb4>
 8002196:	4b76      	ldr	r3, [pc, #472]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a75      	ldr	r2, [pc, #468]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b73      	ldr	r3, [pc, #460]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a72      	ldr	r2, [pc, #456]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0xcc>
 80021b0:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a6e      	ldr	r2, [pc, #440]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a6b      	ldr	r2, [pc, #428]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe fdee 	bl	8000db0 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d8:	f7fe fdea 	bl	8000db0 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e21f      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b61      	ldr	r3, [pc, #388]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0xdc>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe fdda 	bl	8000db0 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe fdd6 	bl	8000db0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e20b      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	4b57      	ldr	r3, [pc, #348]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x104>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d06f      	beq.n	800230e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800222e:	4b50      	ldr	r3, [pc, #320]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b00      	cmp	r3, #0
 8002238:	d017      	beq.n	800226a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800223a:	4b4d      	ldr	r3, [pc, #308]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002242:	2b08      	cmp	r3, #8
 8002244:	d105      	bne.n	8002252 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002246:	4b4a      	ldr	r3, [pc, #296]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002252:	4b47      	ldr	r3, [pc, #284]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800225a:	2b0c      	cmp	r3, #12
 800225c:	d11c      	bne.n	8002298 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225e:	4b44      	ldr	r3, [pc, #272]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d116      	bne.n	8002298 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	4b41      	ldr	r3, [pc, #260]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_RCC_OscConfig+0x186>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e1d3      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002282:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4937      	ldr	r1, [pc, #220]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002296:	e03a      	b.n	800230e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a0:	4b34      	ldr	r3, [pc, #208]	; (8002374 <HAL_RCC_OscConfig+0x278>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7fe fd83 	bl	8000db0 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ae:	f7fe fd7f 	bl	8000db0 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1b4      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022cc:	4b28      	ldr	r3, [pc, #160]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4925      	ldr	r1, [pc, #148]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
 80022e0:	e015      	b.n	800230e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e2:	4b24      	ldr	r3, [pc, #144]	; (8002374 <HAL_RCC_OscConfig+0x278>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fd62 	bl	8000db0 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f0:	f7fe fd5e 	bl	8000db0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e193      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d036      	beq.n	8002388 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d016      	beq.n	8002350 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002324:	2201      	movs	r2, #1
 8002326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002328:	f7fe fd42 	bl	8000db0 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002330:	f7fe fd3e 	bl	8000db0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e173      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x234>
 800234e:	e01b      	b.n	8002388 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002356:	f7fe fd2b 	bl	8000db0 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	e00e      	b.n	800237c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235e:	f7fe fd27 	bl	8000db0 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d907      	bls.n	800237c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e15c      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
 8002370:	40023800 	.word	0x40023800
 8002374:	42470000 	.word	0x42470000
 8002378:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	4b8a      	ldr	r3, [pc, #552]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800237e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ea      	bne.n	800235e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 8097 	beq.w	80024c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239a:	4b83      	ldr	r3, [pc, #524]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10f      	bne.n	80023c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	4b7f      	ldr	r3, [pc, #508]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a7e      	ldr	r2, [pc, #504]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b7c      	ldr	r3, [pc, #496]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b79      	ldr	r3, [pc, #484]	; (80025ac <HAL_RCC_OscConfig+0x4b0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d118      	bne.n	8002404 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d2:	4b76      	ldr	r3, [pc, #472]	; (80025ac <HAL_RCC_OscConfig+0x4b0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a75      	ldr	r2, [pc, #468]	; (80025ac <HAL_RCC_OscConfig+0x4b0>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023de:	f7fe fce7 	bl	8000db0 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e6:	f7fe fce3 	bl	8000db0 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e118      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <HAL_RCC_OscConfig+0x4b0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x31e>
 800240c:	4b66      	ldr	r3, [pc, #408]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	4a65      	ldr	r2, [pc, #404]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6713      	str	r3, [r2, #112]	; 0x70
 8002418:	e01c      	b.n	8002454 <HAL_RCC_OscConfig+0x358>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b05      	cmp	r3, #5
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x340>
 8002422:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	4a60      	ldr	r2, [pc, #384]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	6713      	str	r3, [r2, #112]	; 0x70
 800242e:	4b5e      	ldr	r3, [pc, #376]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	4a5d      	ldr	r2, [pc, #372]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6713      	str	r3, [r2, #112]	; 0x70
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0x358>
 800243c:	4b5a      	ldr	r3, [pc, #360]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	4a59      	ldr	r2, [pc, #356]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	6713      	str	r3, [r2, #112]	; 0x70
 8002448:	4b57      	ldr	r3, [pc, #348]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	4a56      	ldr	r2, [pc, #344]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800244e:	f023 0304 	bic.w	r3, r3, #4
 8002452:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d015      	beq.n	8002488 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7fe fca8 	bl	8000db0 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	e00a      	b.n	800247a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f7fe fca4 	bl	8000db0 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e0d7      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247a:	4b4b      	ldr	r3, [pc, #300]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0ee      	beq.n	8002464 <HAL_RCC_OscConfig+0x368>
 8002486:	e014      	b.n	80024b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7fe fc92 	bl	8000db0 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002490:	f7fe fc8e 	bl	8000db0 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0c1      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a6:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1ee      	bne.n	8002490 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b8:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	4a3a      	ldr	r2, [pc, #232]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80024be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80ad 	beq.w	8002628 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d060      	beq.n	800259c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d145      	bne.n	800256e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <HAL_RCC_OscConfig+0x4b4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fc62 	bl	8000db0 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fc5e 	bl	8000db0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e093      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	019b      	lsls	r3, r3, #6
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	3b01      	subs	r3, #1
 8002528:	041b      	lsls	r3, r3, #16
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	071b      	lsls	r3, r3, #28
 800253a:	491b      	ldr	r1, [pc, #108]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCC_OscConfig+0x4b4>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe fc33 	bl	8000db0 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254e:	f7fe fc2f 	bl	8000db0 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e064      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x452>
 800256c:	e05c      	b.n	8002628 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_RCC_OscConfig+0x4b4>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fc1c 	bl	8000db0 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe fc18 	bl	8000db0 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e04d      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x480>
 800259a:	e045      	b.n	8002628 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e040      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40007000 	.word	0x40007000
 80025b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b4:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <HAL_RCC_OscConfig+0x538>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d030      	beq.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d129      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d122      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025e4:	4013      	ands	r3, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d119      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	085b      	lsrs	r3, r3, #1
 80025fc:	3b01      	subs	r3, #1
 80025fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d10f      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d107      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800

08002638 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e083      	b.n	8002752 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7f5b      	ldrb	r3, [r3, #29]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe fa9c 	bl	8000b98 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	22ca      	movs	r2, #202	; 0xca
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2253      	movs	r2, #83	; 0x53
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fcb4 	bl	8002fe4 <RTC_EnterInitMode>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	22ff      	movs	r2, #255	; 0xff
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2204      	movs	r2, #4
 800268e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e05e      	b.n	8002752 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80026a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026a6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6899      	ldr	r1, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68d2      	ldr	r2, [r2, #12]
 80026ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6919      	ldr	r1, [r3, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	041a      	lsls	r2, r3, #16
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10e      	bne.n	8002720 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fc46 	bl	8002f94 <HAL_RTC_WaitForSynchro>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	22ff      	movs	r2, #255	; 0xff
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2204      	movs	r2, #4
 800271a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e018      	b.n	8002752 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	22ff      	movs	r2, #255	; 0xff
 8002748:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002750:	2300      	movs	r3, #0
  }
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800275a:	b590      	push	{r4, r7, lr}
 800275c:	b087      	sub	sp, #28
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	7f1b      	ldrb	r3, [r3, #28]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_RTC_SetTime+0x1c>
 8002772:	2302      	movs	r3, #2
 8002774:	e0aa      	b.n	80028cc <HAL_RTC_SetTime+0x172>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2202      	movs	r2, #2
 8002780:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d126      	bne.n	80027d6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d102      	bne.n	800279c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2200      	movs	r2, #0
 800279a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fc4b 	bl	800303c <RTC_ByteToBcd2>
 80027a6:	4603      	mov	r3, r0
 80027a8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	785b      	ldrb	r3, [r3, #1]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fc44 	bl	800303c <RTC_ByteToBcd2>
 80027b4:	4603      	mov	r3, r0
 80027b6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80027b8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	789b      	ldrb	r3, [r3, #2]
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fc3c 	bl	800303c <RTC_ByteToBcd2>
 80027c4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80027c6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	78db      	ldrb	r3, [r3, #3]
 80027ce:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	e018      	b.n	8002808 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2200      	movs	r2, #0
 80027e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	785b      	ldrb	r3, [r3, #1]
 80027f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80027f6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80027fc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	78db      	ldrb	r3, [r3, #3]
 8002802:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	22ca      	movs	r2, #202	; 0xca
 800280e:	625a      	str	r2, [r3, #36]	; 0x24
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2253      	movs	r2, #83	; 0x53
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fbe3 	bl	8002fe4 <RTC_EnterInitMode>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00b      	beq.n	800283c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	22ff      	movs	r2, #255	; 0xff
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2204      	movs	r2, #4
 8002830:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e047      	b.n	80028cc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002846:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800284a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800285a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6899      	ldr	r1, [r3, #8]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	431a      	orrs	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002882:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b00      	cmp	r3, #0
 8002890:	d111      	bne.n	80028b6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fb7e 	bl	8002f94 <HAL_RTC_WaitForSynchro>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	22ff      	movs	r2, #255	; 0xff
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2204      	movs	r2, #4
 80028aa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00a      	b.n	80028cc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	22ff      	movs	r2, #255	; 0xff
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80028ca:	2300      	movs	r3, #0
  }
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd90      	pop	{r4, r7, pc}

080028d4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002906:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800290a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	0c1b      	lsrs	r3, r3, #16
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002916:	b2da      	uxtb	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002926:	b2da      	uxtb	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002934:	b2da      	uxtb	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	b2da      	uxtb	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d11a      	bne.n	8002986 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fb8f 	bl	8003078 <RTC_Bcd2ToByte>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	785b      	ldrb	r3, [r3, #1]
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fb86 	bl	8003078 <RTC_Bcd2ToByte>
 800296c:	4603      	mov	r3, r0
 800296e:	461a      	mov	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	789b      	ldrb	r3, [r3, #2]
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fb7d 	bl	8003078 <RTC_Bcd2ToByte>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	7f1b      	ldrb	r3, [r3, #28]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_RTC_SetDate+0x1c>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e094      	b.n	8002ad6 <HAL_RTC_SetDate+0x146>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2202      	movs	r2, #2
 80029b6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10e      	bne.n	80029dc <HAL_RTC_SetDate+0x4c>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	785b      	ldrb	r3, [r3, #1]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	785b      	ldrb	r3, [r3, #1]
 80029ce:	f023 0310 	bic.w	r3, r3, #16
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	330a      	adds	r3, #10
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11c      	bne.n	8002a1c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	78db      	ldrb	r3, [r3, #3]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fb28 	bl	800303c <RTC_ByteToBcd2>
 80029ec:	4603      	mov	r3, r0
 80029ee:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	785b      	ldrb	r3, [r3, #1]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fb21 	bl	800303c <RTC_ByteToBcd2>
 80029fa:	4603      	mov	r3, r0
 80029fc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80029fe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	789b      	ldrb	r3, [r3, #2]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fb19 	bl	800303c <RTC_ByteToBcd2>
 8002a0a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002a0c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e00e      	b.n	8002a3a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	78db      	ldrb	r3, [r3, #3]
 8002a20:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	785b      	ldrb	r3, [r3, #1]
 8002a26:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a28:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002a2e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	22ca      	movs	r2, #202	; 0xca
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2253      	movs	r2, #83	; 0x53
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 faca 	bl	8002fe4 <RTC_EnterInitMode>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	22ff      	movs	r2, #255	; 0xff
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2204      	movs	r2, #4
 8002a62:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e033      	b.n	8002ad6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a8c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d111      	bne.n	8002ac0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 fa79 	bl	8002f94 <HAL_RTC_WaitForSynchro>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00b      	beq.n	8002ac0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	22ff      	movs	r2, #255	; 0xff
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e00a      	b.n	8002ad6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	22ff      	movs	r2, #255	; 0xff
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
  }
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd90      	pop	{r4, r7, pc}

08002ade <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002af8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002afc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	0b5b      	lsrs	r3, r3, #13
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d11a      	bne.n	8002b72 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	78db      	ldrb	r3, [r3, #3]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fa99 	bl	8003078 <RTC_Bcd2ToByte>
 8002b46:	4603      	mov	r3, r0
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	785b      	ldrb	r3, [r3, #1]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fa90 	bl	8003078 <RTC_Bcd2ToByte>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	789b      	ldrb	r3, [r3, #2]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fa87 	bl	8003078 <RTC_Bcd2ToByte>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002b90:	4b93      	ldr	r3, [pc, #588]	; (8002de0 <HAL_RTC_SetAlarm_IT+0x264>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a93      	ldr	r2, [pc, #588]	; (8002de4 <HAL_RTC_SetAlarm_IT+0x268>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	0adb      	lsrs	r3, r3, #11
 8002b9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ba0:	fb02 f303 	mul.w	r3, r2, r3
 8002ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	7f1b      	ldrb	r3, [r3, #28]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_RTC_SetAlarm_IT+0x36>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e111      	b.n	8002dd6 <HAL_RTC_SetAlarm_IT+0x25a>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d137      	bne.n	8002c34 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d102      	bne.n	8002bd8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fa2d 	bl	800303c <RTC_ByteToBcd2>
 8002be2:	4603      	mov	r3, r0
 8002be4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	785b      	ldrb	r3, [r3, #1]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fa26 	bl	800303c <RTC_ByteToBcd2>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002bf4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	789b      	ldrb	r3, [r3, #2]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fa1e 	bl	800303c <RTC_ByteToBcd2>
 8002c00:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002c02:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	78db      	ldrb	r3, [r3, #3]
 8002c0a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002c0c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fa10 	bl	800303c <RTC_ByteToBcd2>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c20:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c28:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	e023      	b.n	8002c7c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2200      	movs	r2, #0
 8002c46:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	785b      	ldrb	r3, [r3, #1]
 8002c52:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c54:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002c5a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	78db      	ldrb	r3, [r3, #3]
 8002c60:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002c62:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c6a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002c6c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002c72:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	22ca      	movs	r2, #202	; 0xca
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2253      	movs	r2, #83	; 0x53
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca0:	d141      	bne.n	8002d26 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002cc2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	1e5a      	subs	r2, r3, #1
 8002cc8:	617a      	str	r2, [r7, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10b      	bne.n	8002ce6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	22ff      	movs	r2, #255	; 0xff
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2203      	movs	r2, #3
 8002cda:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e077      	b.n	8002dd6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0e7      	beq.n	8002cc4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d12:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	e040      	b.n	8002da8 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d34:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002d46:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	1e5a      	subs	r2, r3, #1
 8002d4c:	617a      	str	r2, [r7, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10b      	bne.n	8002d6a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	22ff      	movs	r2, #255	; 0xff
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e035      	b.n	8002dd6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0e7      	beq.n	8002d48 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d96:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002da6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db2:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbe:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	22ff      	movs	r2, #255	; 0xff
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3724      	adds	r7, #36	; 0x24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd90      	pop	{r4, r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000000 	.word	0x20000000
 8002de4:	10624dd3 	.word	0x10624dd3
 8002de8:	40013c00 	.word	0x40013c00

08002dec <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	7f1b      	ldrb	r3, [r3, #28]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_RTC_DeactivateAlarm+0x1a>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e07b      	b.n	8002efe <HAL_RTC_DeactivateAlarm+0x112>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	22ca      	movs	r2, #202	; 0xca
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2253      	movs	r2, #83	; 0x53
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e28:	d12f      	bne.n	8002e8a <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e38:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e48:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e4a:	f7fd ffb1 	bl	8000db0 <HAL_GetTick>
 8002e4e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8002e50:	e013      	b.n	8002e7a <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e52:	f7fd ffad 	bl	8000db0 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e60:	d90b      	bls.n	8002e7a <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	22ff      	movs	r2, #255	; 0xff
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e041      	b.n	8002efe <HAL_RTC_DeactivateAlarm+0x112>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0e4      	beq.n	8002e52 <HAL_RTC_DeactivateAlarm+0x66>
 8002e88:	e02e      	b.n	8002ee8 <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e98:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ea8:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002eaa:	f7fd ff81 	bl	8000db0 <HAL_GetTick>
 8002eae:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8002eb0:	e013      	b.n	8002eda <HAL_RTC_DeactivateAlarm+0xee>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002eb2:	f7fd ff7d 	bl	8000db0 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ec0:	d90b      	bls.n	8002eda <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	22ff      	movs	r2, #255	; 0xff
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2203      	movs	r2, #3
 8002ece:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e011      	b.n	8002efe <HAL_RTC_DeactivateAlarm+0x112>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0e4      	beq.n	8002eb2 <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	22ff      	movs	r2, #255	; 0xff
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d012      	beq.n	8002f44 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7fd fd8b 	bl	8000a48 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002f42:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d012      	beq.n	8002f78 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f8a7 	bl	80030b4 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002f76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002f7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f7e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	775a      	strb	r2, [r3, #29]
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40013c00 	.word	0x40013c00

08002f94 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fb0:	f7fd fefe 	bl	8000db0 <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002fb6:	e009      	b.n	8002fcc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002fb8:	f7fd fefa 	bl	8000db0 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fc6:	d901      	bls.n	8002fcc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e007      	b.n	8002fdc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0ee      	beq.n	8002fb8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d119      	bne.n	8003032 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003006:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003008:	f7fd fed2 	bl	8000db0 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800300e:	e009      	b.n	8003024 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003010:	f7fd fece 	bl	8000db0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800301e:	d901      	bls.n	8003024 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e007      	b.n	8003034 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0ee      	beq.n	8003010 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800304a:	e005      	b.n	8003058 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3301      	adds	r3, #1
 8003050:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	3b0a      	subs	r3, #10
 8003056:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	2b09      	cmp	r3, #9
 800305c:	d8f6      	bhi.n	800304c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	b2da      	uxtb	r2, r3
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	4313      	orrs	r3, r2
 800306a:	b2db      	uxtb	r3, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	b2db      	uxtb	r3, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e03f      	b.n	800315a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd fd0a 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2224      	movs	r2, #36	; 0x24
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800310a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f929 	bl	8003364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b08a      	sub	sp, #40	; 0x28
 8003166:	af02      	add	r7, sp, #8
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	603b      	str	r3, [r7, #0]
 800316e:	4613      	mov	r3, r2
 8003170:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b20      	cmp	r3, #32
 8003180:	d17c      	bne.n	800327c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_UART_Transmit+0x2c>
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e075      	b.n	800327e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_UART_Transmit+0x3e>
 800319c:	2302      	movs	r3, #2
 800319e:	e06e      	b.n	800327e <HAL_UART_Transmit+0x11c>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2221      	movs	r2, #33	; 0x21
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031b6:	f7fd fdfb 	bl	8000db0 <HAL_GetTick>
 80031ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	88fa      	ldrh	r2, [r7, #6]
 80031c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d0:	d108      	bne.n	80031e4 <HAL_UART_Transmit+0x82>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d104      	bne.n	80031e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	e003      	b.n	80031ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031f4:	e02a      	b.n	800324c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2180      	movs	r1, #128	; 0x80
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f840 	bl	8003286 <UART_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e036      	b.n	800327e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10b      	bne.n	800322e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003224:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	3302      	adds	r3, #2
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	e007      	b.n	800323e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	781a      	ldrb	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	3301      	adds	r3, #1
 800323c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1cf      	bne.n	80031f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2200      	movs	r2, #0
 800325e:	2140      	movs	r1, #64	; 0x40
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f810 	bl	8003286 <UART_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e006      	b.n	800327e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	e000      	b.n	800327e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b090      	sub	sp, #64	; 0x40
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4613      	mov	r3, r2
 8003294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003296:	e050      	b.n	800333a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800329a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800329e:	d04c      	beq.n	800333a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80032a6:	f7fd fd83 	bl	8000db0 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d241      	bcs.n	800333a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032d6:	637a      	str	r2, [r7, #52]	; 0x34
 80032d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e5      	bne.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3314      	adds	r3, #20
 80032f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	613b      	str	r3, [r7, #16]
   return(result);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	63bb      	str	r3, [r7, #56]	; 0x38
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3314      	adds	r3, #20
 8003308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800330a:	623a      	str	r2, [r7, #32]
 800330c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330e:	69f9      	ldr	r1, [r7, #28]
 8003310:	6a3a      	ldr	r2, [r7, #32]
 8003312:	e841 2300 	strex	r3, r2, [r1]
 8003316:	61bb      	str	r3, [r7, #24]
   return(result);
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e5      	bne.n	80032ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e00f      	b.n	800335a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4013      	ands	r3, r2
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	429a      	cmp	r2, r3
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	429a      	cmp	r2, r3
 8003356:	d09f      	beq.n	8003298 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3740      	adds	r7, #64	; 0x40
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003368:	b0c0      	sub	sp, #256	; 0x100
 800336a:	af00      	add	r7, sp, #0
 800336c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	68d9      	ldr	r1, [r3, #12]
 8003382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	ea40 0301 	orr.w	r3, r0, r1
 800338c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	431a      	orrs	r2, r3
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033bc:	f021 010c 	bic.w	r1, r1, #12
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033ca:	430b      	orrs	r3, r1
 80033cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033de:	6999      	ldr	r1, [r3, #24]
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	ea40 0301 	orr.w	r3, r0, r1
 80033ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b8f      	ldr	r3, [pc, #572]	; (8003630 <UART_SetConfig+0x2cc>)
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d005      	beq.n	8003404 <UART_SetConfig+0xa0>
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b8d      	ldr	r3, [pc, #564]	; (8003634 <UART_SetConfig+0x2d0>)
 8003400:	429a      	cmp	r2, r3
 8003402:	d104      	bne.n	800340e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003404:	f7fe f90c 	bl	8001620 <HAL_RCC_GetPCLK2Freq>
 8003408:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800340c:	e003      	b.n	8003416 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800340e:	f7fe f8f3 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
 8003412:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003420:	f040 810c 	bne.w	800363c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003428:	2200      	movs	r2, #0
 800342a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800342e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003432:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003436:	4622      	mov	r2, r4
 8003438:	462b      	mov	r3, r5
 800343a:	1891      	adds	r1, r2, r2
 800343c:	65b9      	str	r1, [r7, #88]	; 0x58
 800343e:	415b      	adcs	r3, r3
 8003440:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003442:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003446:	4621      	mov	r1, r4
 8003448:	eb12 0801 	adds.w	r8, r2, r1
 800344c:	4629      	mov	r1, r5
 800344e:	eb43 0901 	adc.w	r9, r3, r1
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800345e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003466:	4690      	mov	r8, r2
 8003468:	4699      	mov	r9, r3
 800346a:	4623      	mov	r3, r4
 800346c:	eb18 0303 	adds.w	r3, r8, r3
 8003470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003474:	462b      	mov	r3, r5
 8003476:	eb49 0303 	adc.w	r3, r9, r3
 800347a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800348a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800348e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003492:	460b      	mov	r3, r1
 8003494:	18db      	adds	r3, r3, r3
 8003496:	653b      	str	r3, [r7, #80]	; 0x50
 8003498:	4613      	mov	r3, r2
 800349a:	eb42 0303 	adc.w	r3, r2, r3
 800349e:	657b      	str	r3, [r7, #84]	; 0x54
 80034a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034a8:	f7fc ff0a 	bl	80002c0 <__aeabi_uldivmod>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4b61      	ldr	r3, [pc, #388]	; (8003638 <UART_SetConfig+0x2d4>)
 80034b2:	fba3 2302 	umull	r2, r3, r3, r2
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	011c      	lsls	r4, r3, #4
 80034ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034cc:	4642      	mov	r2, r8
 80034ce:	464b      	mov	r3, r9
 80034d0:	1891      	adds	r1, r2, r2
 80034d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80034d4:	415b      	adcs	r3, r3
 80034d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034dc:	4641      	mov	r1, r8
 80034de:	eb12 0a01 	adds.w	sl, r2, r1
 80034e2:	4649      	mov	r1, r9
 80034e4:	eb43 0b01 	adc.w	fp, r3, r1
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034fc:	4692      	mov	sl, r2
 80034fe:	469b      	mov	fp, r3
 8003500:	4643      	mov	r3, r8
 8003502:	eb1a 0303 	adds.w	r3, sl, r3
 8003506:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800350a:	464b      	mov	r3, r9
 800350c:	eb4b 0303 	adc.w	r3, fp, r3
 8003510:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003520:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003524:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003528:	460b      	mov	r3, r1
 800352a:	18db      	adds	r3, r3, r3
 800352c:	643b      	str	r3, [r7, #64]	; 0x40
 800352e:	4613      	mov	r3, r2
 8003530:	eb42 0303 	adc.w	r3, r2, r3
 8003534:	647b      	str	r3, [r7, #68]	; 0x44
 8003536:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800353a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800353e:	f7fc febf 	bl	80002c0 <__aeabi_uldivmod>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4611      	mov	r1, r2
 8003548:	4b3b      	ldr	r3, [pc, #236]	; (8003638 <UART_SetConfig+0x2d4>)
 800354a:	fba3 2301 	umull	r2, r3, r3, r1
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	2264      	movs	r2, #100	; 0x64
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	1acb      	subs	r3, r1, r3
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800355e:	4b36      	ldr	r3, [pc, #216]	; (8003638 <UART_SetConfig+0x2d4>)
 8003560:	fba3 2302 	umull	r2, r3, r3, r2
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800356c:	441c      	add	r4, r3
 800356e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003572:	2200      	movs	r2, #0
 8003574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003578:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800357c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003580:	4642      	mov	r2, r8
 8003582:	464b      	mov	r3, r9
 8003584:	1891      	adds	r1, r2, r2
 8003586:	63b9      	str	r1, [r7, #56]	; 0x38
 8003588:	415b      	adcs	r3, r3
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800358c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003590:	4641      	mov	r1, r8
 8003592:	1851      	adds	r1, r2, r1
 8003594:	6339      	str	r1, [r7, #48]	; 0x30
 8003596:	4649      	mov	r1, r9
 8003598:	414b      	adcs	r3, r1
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035a8:	4659      	mov	r1, fp
 80035aa:	00cb      	lsls	r3, r1, #3
 80035ac:	4651      	mov	r1, sl
 80035ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035b2:	4651      	mov	r1, sl
 80035b4:	00ca      	lsls	r2, r1, #3
 80035b6:	4610      	mov	r0, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	4642      	mov	r2, r8
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035c4:	464b      	mov	r3, r9
 80035c6:	460a      	mov	r2, r1
 80035c8:	eb42 0303 	adc.w	r3, r2, r3
 80035cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035e4:	460b      	mov	r3, r1
 80035e6:	18db      	adds	r3, r3, r3
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ea:	4613      	mov	r3, r2
 80035ec:	eb42 0303 	adc.w	r3, r2, r3
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035fa:	f7fc fe61 	bl	80002c0 <__aeabi_uldivmod>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <UART_SetConfig+0x2d4>)
 8003604:	fba3 1302 	umull	r1, r3, r3, r2
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	2164      	movs	r1, #100	; 0x64
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	3332      	adds	r3, #50	; 0x32
 8003616:	4a08      	ldr	r2, [pc, #32]	; (8003638 <UART_SetConfig+0x2d4>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	f003 0207 	and.w	r2, r3, #7
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4422      	add	r2, r4
 800362a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800362c:	e105      	b.n	800383a <UART_SetConfig+0x4d6>
 800362e:	bf00      	nop
 8003630:	40011000 	.word	0x40011000
 8003634:	40011400 	.word	0x40011400
 8003638:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800363c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003640:	2200      	movs	r2, #0
 8003642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003646:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800364a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800364e:	4642      	mov	r2, r8
 8003650:	464b      	mov	r3, r9
 8003652:	1891      	adds	r1, r2, r2
 8003654:	6239      	str	r1, [r7, #32]
 8003656:	415b      	adcs	r3, r3
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
 800365a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800365e:	4641      	mov	r1, r8
 8003660:	1854      	adds	r4, r2, r1
 8003662:	4649      	mov	r1, r9
 8003664:	eb43 0501 	adc.w	r5, r3, r1
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	00eb      	lsls	r3, r5, #3
 8003672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003676:	00e2      	lsls	r2, r4, #3
 8003678:	4614      	mov	r4, r2
 800367a:	461d      	mov	r5, r3
 800367c:	4643      	mov	r3, r8
 800367e:	18e3      	adds	r3, r4, r3
 8003680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003684:	464b      	mov	r3, r9
 8003686:	eb45 0303 	adc.w	r3, r5, r3
 800368a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800369a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036aa:	4629      	mov	r1, r5
 80036ac:	008b      	lsls	r3, r1, #2
 80036ae:	4621      	mov	r1, r4
 80036b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b4:	4621      	mov	r1, r4
 80036b6:	008a      	lsls	r2, r1, #2
 80036b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036bc:	f7fc fe00 	bl	80002c0 <__aeabi_uldivmod>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4b60      	ldr	r3, [pc, #384]	; (8003848 <UART_SetConfig+0x4e4>)
 80036c6:	fba3 2302 	umull	r2, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	011c      	lsls	r4, r3, #4
 80036ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036e0:	4642      	mov	r2, r8
 80036e2:	464b      	mov	r3, r9
 80036e4:	1891      	adds	r1, r2, r2
 80036e6:	61b9      	str	r1, [r7, #24]
 80036e8:	415b      	adcs	r3, r3
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036f0:	4641      	mov	r1, r8
 80036f2:	1851      	adds	r1, r2, r1
 80036f4:	6139      	str	r1, [r7, #16]
 80036f6:	4649      	mov	r1, r9
 80036f8:	414b      	adcs	r3, r1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003708:	4659      	mov	r1, fp
 800370a:	00cb      	lsls	r3, r1, #3
 800370c:	4651      	mov	r1, sl
 800370e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003712:	4651      	mov	r1, sl
 8003714:	00ca      	lsls	r2, r1, #3
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	4603      	mov	r3, r0
 800371c:	4642      	mov	r2, r8
 800371e:	189b      	adds	r3, r3, r2
 8003720:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003724:	464b      	mov	r3, r9
 8003726:	460a      	mov	r2, r1
 8003728:	eb42 0303 	adc.w	r3, r2, r3
 800372c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	67bb      	str	r3, [r7, #120]	; 0x78
 800373a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003748:	4649      	mov	r1, r9
 800374a:	008b      	lsls	r3, r1, #2
 800374c:	4641      	mov	r1, r8
 800374e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003752:	4641      	mov	r1, r8
 8003754:	008a      	lsls	r2, r1, #2
 8003756:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800375a:	f7fc fdb1 	bl	80002c0 <__aeabi_uldivmod>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4b39      	ldr	r3, [pc, #228]	; (8003848 <UART_SetConfig+0x4e4>)
 8003764:	fba3 1302 	umull	r1, r3, r3, r2
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	2164      	movs	r1, #100	; 0x64
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	3332      	adds	r3, #50	; 0x32
 8003776:	4a34      	ldr	r2, [pc, #208]	; (8003848 <UART_SetConfig+0x4e4>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003782:	441c      	add	r4, r3
 8003784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003788:	2200      	movs	r2, #0
 800378a:	673b      	str	r3, [r7, #112]	; 0x70
 800378c:	677a      	str	r2, [r7, #116]	; 0x74
 800378e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003792:	4642      	mov	r2, r8
 8003794:	464b      	mov	r3, r9
 8003796:	1891      	adds	r1, r2, r2
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	415b      	adcs	r3, r3
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037a2:	4641      	mov	r1, r8
 80037a4:	1851      	adds	r1, r2, r1
 80037a6:	6039      	str	r1, [r7, #0]
 80037a8:	4649      	mov	r1, r9
 80037aa:	414b      	adcs	r3, r1
 80037ac:	607b      	str	r3, [r7, #4]
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037ba:	4659      	mov	r1, fp
 80037bc:	00cb      	lsls	r3, r1, #3
 80037be:	4651      	mov	r1, sl
 80037c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037c4:	4651      	mov	r1, sl
 80037c6:	00ca      	lsls	r2, r1, #3
 80037c8:	4610      	mov	r0, r2
 80037ca:	4619      	mov	r1, r3
 80037cc:	4603      	mov	r3, r0
 80037ce:	4642      	mov	r2, r8
 80037d0:	189b      	adds	r3, r3, r2
 80037d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037d4:	464b      	mov	r3, r9
 80037d6:	460a      	mov	r2, r1
 80037d8:	eb42 0303 	adc.w	r3, r2, r3
 80037dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	663b      	str	r3, [r7, #96]	; 0x60
 80037e8:	667a      	str	r2, [r7, #100]	; 0x64
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037f6:	4649      	mov	r1, r9
 80037f8:	008b      	lsls	r3, r1, #2
 80037fa:	4641      	mov	r1, r8
 80037fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003800:	4641      	mov	r1, r8
 8003802:	008a      	lsls	r2, r1, #2
 8003804:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003808:	f7fc fd5a 	bl	80002c0 <__aeabi_uldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <UART_SetConfig+0x4e4>)
 8003812:	fba3 1302 	umull	r1, r3, r3, r2
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2164      	movs	r1, #100	; 0x64
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	3332      	adds	r3, #50	; 0x32
 8003824:	4a08      	ldr	r2, [pc, #32]	; (8003848 <UART_SetConfig+0x4e4>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4422      	add	r2, r4
 8003838:	609a      	str	r2, [r3, #8]
}
 800383a:	bf00      	nop
 800383c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003840:	46bd      	mov	sp, r7
 8003842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003846:	bf00      	nop
 8003848:	51eb851f 	.word	0x51eb851f

0800384c <__errno>:
 800384c:	4b01      	ldr	r3, [pc, #4]	; (8003854 <__errno+0x8>)
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	2000000c 	.word	0x2000000c

08003858 <__libc_init_array>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	4d0d      	ldr	r5, [pc, #52]	; (8003890 <__libc_init_array+0x38>)
 800385c:	4c0d      	ldr	r4, [pc, #52]	; (8003894 <__libc_init_array+0x3c>)
 800385e:	1b64      	subs	r4, r4, r5
 8003860:	10a4      	asrs	r4, r4, #2
 8003862:	2600      	movs	r6, #0
 8003864:	42a6      	cmp	r6, r4
 8003866:	d109      	bne.n	800387c <__libc_init_array+0x24>
 8003868:	4d0b      	ldr	r5, [pc, #44]	; (8003898 <__libc_init_array+0x40>)
 800386a:	4c0c      	ldr	r4, [pc, #48]	; (800389c <__libc_init_array+0x44>)
 800386c:	f000 fc8e 	bl	800418c <_init>
 8003870:	1b64      	subs	r4, r4, r5
 8003872:	10a4      	asrs	r4, r4, #2
 8003874:	2600      	movs	r6, #0
 8003876:	42a6      	cmp	r6, r4
 8003878:	d105      	bne.n	8003886 <__libc_init_array+0x2e>
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003880:	4798      	blx	r3
 8003882:	3601      	adds	r6, #1
 8003884:	e7ee      	b.n	8003864 <__libc_init_array+0xc>
 8003886:	f855 3b04 	ldr.w	r3, [r5], #4
 800388a:	4798      	blx	r3
 800388c:	3601      	adds	r6, #1
 800388e:	e7f2      	b.n	8003876 <__libc_init_array+0x1e>
 8003890:	080042f4 	.word	0x080042f4
 8003894:	080042f4 	.word	0x080042f4
 8003898:	080042f4 	.word	0x080042f4
 800389c:	080042f8 	.word	0x080042f8

080038a0 <memset>:
 80038a0:	4402      	add	r2, r0
 80038a2:	4603      	mov	r3, r0
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d100      	bne.n	80038aa <memset+0xa>
 80038a8:	4770      	bx	lr
 80038aa:	f803 1b01 	strb.w	r1, [r3], #1
 80038ae:	e7f9      	b.n	80038a4 <memset+0x4>

080038b0 <_vsiprintf_r>:
 80038b0:	b500      	push	{lr}
 80038b2:	b09b      	sub	sp, #108	; 0x6c
 80038b4:	9100      	str	r1, [sp, #0]
 80038b6:	9104      	str	r1, [sp, #16]
 80038b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038bc:	9105      	str	r1, [sp, #20]
 80038be:	9102      	str	r1, [sp, #8]
 80038c0:	4905      	ldr	r1, [pc, #20]	; (80038d8 <_vsiprintf_r+0x28>)
 80038c2:	9103      	str	r1, [sp, #12]
 80038c4:	4669      	mov	r1, sp
 80038c6:	f000 f86f 	bl	80039a8 <_svfiprintf_r>
 80038ca:	9b00      	ldr	r3, [sp, #0]
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
 80038d0:	b01b      	add	sp, #108	; 0x6c
 80038d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80038d6:	bf00      	nop
 80038d8:	ffff0208 	.word	0xffff0208

080038dc <vsiprintf>:
 80038dc:	4613      	mov	r3, r2
 80038de:	460a      	mov	r2, r1
 80038e0:	4601      	mov	r1, r0
 80038e2:	4802      	ldr	r0, [pc, #8]	; (80038ec <vsiprintf+0x10>)
 80038e4:	6800      	ldr	r0, [r0, #0]
 80038e6:	f7ff bfe3 	b.w	80038b0 <_vsiprintf_r>
 80038ea:	bf00      	nop
 80038ec:	2000000c 	.word	0x2000000c

080038f0 <__ssputs_r>:
 80038f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f4:	688e      	ldr	r6, [r1, #8]
 80038f6:	429e      	cmp	r6, r3
 80038f8:	4682      	mov	sl, r0
 80038fa:	460c      	mov	r4, r1
 80038fc:	4690      	mov	r8, r2
 80038fe:	461f      	mov	r7, r3
 8003900:	d838      	bhi.n	8003974 <__ssputs_r+0x84>
 8003902:	898a      	ldrh	r2, [r1, #12]
 8003904:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003908:	d032      	beq.n	8003970 <__ssputs_r+0x80>
 800390a:	6825      	ldr	r5, [r4, #0]
 800390c:	6909      	ldr	r1, [r1, #16]
 800390e:	eba5 0901 	sub.w	r9, r5, r1
 8003912:	6965      	ldr	r5, [r4, #20]
 8003914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800391c:	3301      	adds	r3, #1
 800391e:	444b      	add	r3, r9
 8003920:	106d      	asrs	r5, r5, #1
 8003922:	429d      	cmp	r5, r3
 8003924:	bf38      	it	cc
 8003926:	461d      	movcc	r5, r3
 8003928:	0553      	lsls	r3, r2, #21
 800392a:	d531      	bpl.n	8003990 <__ssputs_r+0xa0>
 800392c:	4629      	mov	r1, r5
 800392e:	f000 fb63 	bl	8003ff8 <_malloc_r>
 8003932:	4606      	mov	r6, r0
 8003934:	b950      	cbnz	r0, 800394c <__ssputs_r+0x5c>
 8003936:	230c      	movs	r3, #12
 8003938:	f8ca 3000 	str.w	r3, [sl]
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003942:	81a3      	strh	r3, [r4, #12]
 8003944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800394c:	6921      	ldr	r1, [r4, #16]
 800394e:	464a      	mov	r2, r9
 8003950:	f000 fabe 	bl	8003ed0 <memcpy>
 8003954:	89a3      	ldrh	r3, [r4, #12]
 8003956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800395a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800395e:	81a3      	strh	r3, [r4, #12]
 8003960:	6126      	str	r6, [r4, #16]
 8003962:	6165      	str	r5, [r4, #20]
 8003964:	444e      	add	r6, r9
 8003966:	eba5 0509 	sub.w	r5, r5, r9
 800396a:	6026      	str	r6, [r4, #0]
 800396c:	60a5      	str	r5, [r4, #8]
 800396e:	463e      	mov	r6, r7
 8003970:	42be      	cmp	r6, r7
 8003972:	d900      	bls.n	8003976 <__ssputs_r+0x86>
 8003974:	463e      	mov	r6, r7
 8003976:	6820      	ldr	r0, [r4, #0]
 8003978:	4632      	mov	r2, r6
 800397a:	4641      	mov	r1, r8
 800397c:	f000 fab6 	bl	8003eec <memmove>
 8003980:	68a3      	ldr	r3, [r4, #8]
 8003982:	1b9b      	subs	r3, r3, r6
 8003984:	60a3      	str	r3, [r4, #8]
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	4433      	add	r3, r6
 800398a:	6023      	str	r3, [r4, #0]
 800398c:	2000      	movs	r0, #0
 800398e:	e7db      	b.n	8003948 <__ssputs_r+0x58>
 8003990:	462a      	mov	r2, r5
 8003992:	f000 fba5 	bl	80040e0 <_realloc_r>
 8003996:	4606      	mov	r6, r0
 8003998:	2800      	cmp	r0, #0
 800399a:	d1e1      	bne.n	8003960 <__ssputs_r+0x70>
 800399c:	6921      	ldr	r1, [r4, #16]
 800399e:	4650      	mov	r0, sl
 80039a0:	f000 fabe 	bl	8003f20 <_free_r>
 80039a4:	e7c7      	b.n	8003936 <__ssputs_r+0x46>
	...

080039a8 <_svfiprintf_r>:
 80039a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ac:	4698      	mov	r8, r3
 80039ae:	898b      	ldrh	r3, [r1, #12]
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	b09d      	sub	sp, #116	; 0x74
 80039b4:	4607      	mov	r7, r0
 80039b6:	460d      	mov	r5, r1
 80039b8:	4614      	mov	r4, r2
 80039ba:	d50e      	bpl.n	80039da <_svfiprintf_r+0x32>
 80039bc:	690b      	ldr	r3, [r1, #16]
 80039be:	b963      	cbnz	r3, 80039da <_svfiprintf_r+0x32>
 80039c0:	2140      	movs	r1, #64	; 0x40
 80039c2:	f000 fb19 	bl	8003ff8 <_malloc_r>
 80039c6:	6028      	str	r0, [r5, #0]
 80039c8:	6128      	str	r0, [r5, #16]
 80039ca:	b920      	cbnz	r0, 80039d6 <_svfiprintf_r+0x2e>
 80039cc:	230c      	movs	r3, #12
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039d4:	e0d1      	b.n	8003b7a <_svfiprintf_r+0x1d2>
 80039d6:	2340      	movs	r3, #64	; 0x40
 80039d8:	616b      	str	r3, [r5, #20]
 80039da:	2300      	movs	r3, #0
 80039dc:	9309      	str	r3, [sp, #36]	; 0x24
 80039de:	2320      	movs	r3, #32
 80039e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80039e8:	2330      	movs	r3, #48	; 0x30
 80039ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b94 <_svfiprintf_r+0x1ec>
 80039ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039f2:	f04f 0901 	mov.w	r9, #1
 80039f6:	4623      	mov	r3, r4
 80039f8:	469a      	mov	sl, r3
 80039fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039fe:	b10a      	cbz	r2, 8003a04 <_svfiprintf_r+0x5c>
 8003a00:	2a25      	cmp	r2, #37	; 0x25
 8003a02:	d1f9      	bne.n	80039f8 <_svfiprintf_r+0x50>
 8003a04:	ebba 0b04 	subs.w	fp, sl, r4
 8003a08:	d00b      	beq.n	8003a22 <_svfiprintf_r+0x7a>
 8003a0a:	465b      	mov	r3, fp
 8003a0c:	4622      	mov	r2, r4
 8003a0e:	4629      	mov	r1, r5
 8003a10:	4638      	mov	r0, r7
 8003a12:	f7ff ff6d 	bl	80038f0 <__ssputs_r>
 8003a16:	3001      	adds	r0, #1
 8003a18:	f000 80aa 	beq.w	8003b70 <_svfiprintf_r+0x1c8>
 8003a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a1e:	445a      	add	r2, fp
 8003a20:	9209      	str	r2, [sp, #36]	; 0x24
 8003a22:	f89a 3000 	ldrb.w	r3, [sl]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80a2 	beq.w	8003b70 <_svfiprintf_r+0x1c8>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a36:	f10a 0a01 	add.w	sl, sl, #1
 8003a3a:	9304      	str	r3, [sp, #16]
 8003a3c:	9307      	str	r3, [sp, #28]
 8003a3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a42:	931a      	str	r3, [sp, #104]	; 0x68
 8003a44:	4654      	mov	r4, sl
 8003a46:	2205      	movs	r2, #5
 8003a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a4c:	4851      	ldr	r0, [pc, #324]	; (8003b94 <_svfiprintf_r+0x1ec>)
 8003a4e:	f7fc fbe7 	bl	8000220 <memchr>
 8003a52:	9a04      	ldr	r2, [sp, #16]
 8003a54:	b9d8      	cbnz	r0, 8003a8e <_svfiprintf_r+0xe6>
 8003a56:	06d0      	lsls	r0, r2, #27
 8003a58:	bf44      	itt	mi
 8003a5a:	2320      	movmi	r3, #32
 8003a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a60:	0711      	lsls	r1, r2, #28
 8003a62:	bf44      	itt	mi
 8003a64:	232b      	movmi	r3, #43	; 0x2b
 8003a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a70:	d015      	beq.n	8003a9e <_svfiprintf_r+0xf6>
 8003a72:	9a07      	ldr	r2, [sp, #28]
 8003a74:	4654      	mov	r4, sl
 8003a76:	2000      	movs	r0, #0
 8003a78:	f04f 0c0a 	mov.w	ip, #10
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a82:	3b30      	subs	r3, #48	; 0x30
 8003a84:	2b09      	cmp	r3, #9
 8003a86:	d94e      	bls.n	8003b26 <_svfiprintf_r+0x17e>
 8003a88:	b1b0      	cbz	r0, 8003ab8 <_svfiprintf_r+0x110>
 8003a8a:	9207      	str	r2, [sp, #28]
 8003a8c:	e014      	b.n	8003ab8 <_svfiprintf_r+0x110>
 8003a8e:	eba0 0308 	sub.w	r3, r0, r8
 8003a92:	fa09 f303 	lsl.w	r3, r9, r3
 8003a96:	4313      	orrs	r3, r2
 8003a98:	9304      	str	r3, [sp, #16]
 8003a9a:	46a2      	mov	sl, r4
 8003a9c:	e7d2      	b.n	8003a44 <_svfiprintf_r+0x9c>
 8003a9e:	9b03      	ldr	r3, [sp, #12]
 8003aa0:	1d19      	adds	r1, r3, #4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	9103      	str	r1, [sp, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	bfbb      	ittet	lt
 8003aaa:	425b      	neglt	r3, r3
 8003aac:	f042 0202 	orrlt.w	r2, r2, #2
 8003ab0:	9307      	strge	r3, [sp, #28]
 8003ab2:	9307      	strlt	r3, [sp, #28]
 8003ab4:	bfb8      	it	lt
 8003ab6:	9204      	strlt	r2, [sp, #16]
 8003ab8:	7823      	ldrb	r3, [r4, #0]
 8003aba:	2b2e      	cmp	r3, #46	; 0x2e
 8003abc:	d10c      	bne.n	8003ad8 <_svfiprintf_r+0x130>
 8003abe:	7863      	ldrb	r3, [r4, #1]
 8003ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac2:	d135      	bne.n	8003b30 <_svfiprintf_r+0x188>
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	1d1a      	adds	r2, r3, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	9203      	str	r2, [sp, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bfb8      	it	lt
 8003ad0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ad4:	3402      	adds	r4, #2
 8003ad6:	9305      	str	r3, [sp, #20]
 8003ad8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ba4 <_svfiprintf_r+0x1fc>
 8003adc:	7821      	ldrb	r1, [r4, #0]
 8003ade:	2203      	movs	r2, #3
 8003ae0:	4650      	mov	r0, sl
 8003ae2:	f7fc fb9d 	bl	8000220 <memchr>
 8003ae6:	b140      	cbz	r0, 8003afa <_svfiprintf_r+0x152>
 8003ae8:	2340      	movs	r3, #64	; 0x40
 8003aea:	eba0 000a 	sub.w	r0, r0, sl
 8003aee:	fa03 f000 	lsl.w	r0, r3, r0
 8003af2:	9b04      	ldr	r3, [sp, #16]
 8003af4:	4303      	orrs	r3, r0
 8003af6:	3401      	adds	r4, #1
 8003af8:	9304      	str	r3, [sp, #16]
 8003afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003afe:	4826      	ldr	r0, [pc, #152]	; (8003b98 <_svfiprintf_r+0x1f0>)
 8003b00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b04:	2206      	movs	r2, #6
 8003b06:	f7fc fb8b 	bl	8000220 <memchr>
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	d038      	beq.n	8003b80 <_svfiprintf_r+0x1d8>
 8003b0e:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <_svfiprintf_r+0x1f4>)
 8003b10:	bb1b      	cbnz	r3, 8003b5a <_svfiprintf_r+0x1b2>
 8003b12:	9b03      	ldr	r3, [sp, #12]
 8003b14:	3307      	adds	r3, #7
 8003b16:	f023 0307 	bic.w	r3, r3, #7
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	9303      	str	r3, [sp, #12]
 8003b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b20:	4433      	add	r3, r6
 8003b22:	9309      	str	r3, [sp, #36]	; 0x24
 8003b24:	e767      	b.n	80039f6 <_svfiprintf_r+0x4e>
 8003b26:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	e7a5      	b.n	8003a7c <_svfiprintf_r+0xd4>
 8003b30:	2300      	movs	r3, #0
 8003b32:	3401      	adds	r4, #1
 8003b34:	9305      	str	r3, [sp, #20]
 8003b36:	4619      	mov	r1, r3
 8003b38:	f04f 0c0a 	mov.w	ip, #10
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b42:	3a30      	subs	r2, #48	; 0x30
 8003b44:	2a09      	cmp	r2, #9
 8003b46:	d903      	bls.n	8003b50 <_svfiprintf_r+0x1a8>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0c5      	beq.n	8003ad8 <_svfiprintf_r+0x130>
 8003b4c:	9105      	str	r1, [sp, #20]
 8003b4e:	e7c3      	b.n	8003ad8 <_svfiprintf_r+0x130>
 8003b50:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b54:	4604      	mov	r4, r0
 8003b56:	2301      	movs	r3, #1
 8003b58:	e7f0      	b.n	8003b3c <_svfiprintf_r+0x194>
 8003b5a:	ab03      	add	r3, sp, #12
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	462a      	mov	r2, r5
 8003b60:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <_svfiprintf_r+0x1f8>)
 8003b62:	a904      	add	r1, sp, #16
 8003b64:	4638      	mov	r0, r7
 8003b66:	f3af 8000 	nop.w
 8003b6a:	1c42      	adds	r2, r0, #1
 8003b6c:	4606      	mov	r6, r0
 8003b6e:	d1d6      	bne.n	8003b1e <_svfiprintf_r+0x176>
 8003b70:	89ab      	ldrh	r3, [r5, #12]
 8003b72:	065b      	lsls	r3, r3, #25
 8003b74:	f53f af2c 	bmi.w	80039d0 <_svfiprintf_r+0x28>
 8003b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b7a:	b01d      	add	sp, #116	; 0x74
 8003b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b80:	ab03      	add	r3, sp, #12
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	462a      	mov	r2, r5
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <_svfiprintf_r+0x1f8>)
 8003b88:	a904      	add	r1, sp, #16
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	f000 f87a 	bl	8003c84 <_printf_i>
 8003b90:	e7eb      	b.n	8003b6a <_svfiprintf_r+0x1c2>
 8003b92:	bf00      	nop
 8003b94:	080042b8 	.word	0x080042b8
 8003b98:	080042c2 	.word	0x080042c2
 8003b9c:	00000000 	.word	0x00000000
 8003ba0:	080038f1 	.word	0x080038f1
 8003ba4:	080042be 	.word	0x080042be

08003ba8 <_printf_common>:
 8003ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bac:	4616      	mov	r6, r2
 8003bae:	4699      	mov	r9, r3
 8003bb0:	688a      	ldr	r2, [r1, #8]
 8003bb2:	690b      	ldr	r3, [r1, #16]
 8003bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	bfb8      	it	lt
 8003bbc:	4613      	movlt	r3, r2
 8003bbe:	6033      	str	r3, [r6, #0]
 8003bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bc4:	4607      	mov	r7, r0
 8003bc6:	460c      	mov	r4, r1
 8003bc8:	b10a      	cbz	r2, 8003bce <_printf_common+0x26>
 8003bca:	3301      	adds	r3, #1
 8003bcc:	6033      	str	r3, [r6, #0]
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	0699      	lsls	r1, r3, #26
 8003bd2:	bf42      	ittt	mi
 8003bd4:	6833      	ldrmi	r3, [r6, #0]
 8003bd6:	3302      	addmi	r3, #2
 8003bd8:	6033      	strmi	r3, [r6, #0]
 8003bda:	6825      	ldr	r5, [r4, #0]
 8003bdc:	f015 0506 	ands.w	r5, r5, #6
 8003be0:	d106      	bne.n	8003bf0 <_printf_common+0x48>
 8003be2:	f104 0a19 	add.w	sl, r4, #25
 8003be6:	68e3      	ldr	r3, [r4, #12]
 8003be8:	6832      	ldr	r2, [r6, #0]
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	42ab      	cmp	r3, r5
 8003bee:	dc26      	bgt.n	8003c3e <_printf_common+0x96>
 8003bf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bf4:	1e13      	subs	r3, r2, #0
 8003bf6:	6822      	ldr	r2, [r4, #0]
 8003bf8:	bf18      	it	ne
 8003bfa:	2301      	movne	r3, #1
 8003bfc:	0692      	lsls	r2, r2, #26
 8003bfe:	d42b      	bmi.n	8003c58 <_printf_common+0xb0>
 8003c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c04:	4649      	mov	r1, r9
 8003c06:	4638      	mov	r0, r7
 8003c08:	47c0      	blx	r8
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	d01e      	beq.n	8003c4c <_printf_common+0xa4>
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	68e5      	ldr	r5, [r4, #12]
 8003c12:	6832      	ldr	r2, [r6, #0]
 8003c14:	f003 0306 	and.w	r3, r3, #6
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	bf08      	it	eq
 8003c1c:	1aad      	subeq	r5, r5, r2
 8003c1e:	68a3      	ldr	r3, [r4, #8]
 8003c20:	6922      	ldr	r2, [r4, #16]
 8003c22:	bf0c      	ite	eq
 8003c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c28:	2500      	movne	r5, #0
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	bfc4      	itt	gt
 8003c2e:	1a9b      	subgt	r3, r3, r2
 8003c30:	18ed      	addgt	r5, r5, r3
 8003c32:	2600      	movs	r6, #0
 8003c34:	341a      	adds	r4, #26
 8003c36:	42b5      	cmp	r5, r6
 8003c38:	d11a      	bne.n	8003c70 <_printf_common+0xc8>
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	e008      	b.n	8003c50 <_printf_common+0xa8>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	4652      	mov	r2, sl
 8003c42:	4649      	mov	r1, r9
 8003c44:	4638      	mov	r0, r7
 8003c46:	47c0      	blx	r8
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d103      	bne.n	8003c54 <_printf_common+0xac>
 8003c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c54:	3501      	adds	r5, #1
 8003c56:	e7c6      	b.n	8003be6 <_printf_common+0x3e>
 8003c58:	18e1      	adds	r1, r4, r3
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	2030      	movs	r0, #48	; 0x30
 8003c5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c62:	4422      	add	r2, r4
 8003c64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	e7c7      	b.n	8003c00 <_printf_common+0x58>
 8003c70:	2301      	movs	r3, #1
 8003c72:	4622      	mov	r2, r4
 8003c74:	4649      	mov	r1, r9
 8003c76:	4638      	mov	r0, r7
 8003c78:	47c0      	blx	r8
 8003c7a:	3001      	adds	r0, #1
 8003c7c:	d0e6      	beq.n	8003c4c <_printf_common+0xa4>
 8003c7e:	3601      	adds	r6, #1
 8003c80:	e7d9      	b.n	8003c36 <_printf_common+0x8e>
	...

08003c84 <_printf_i>:
 8003c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c88:	7e0f      	ldrb	r7, [r1, #24]
 8003c8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c8c:	2f78      	cmp	r7, #120	; 0x78
 8003c8e:	4691      	mov	r9, r2
 8003c90:	4680      	mov	r8, r0
 8003c92:	460c      	mov	r4, r1
 8003c94:	469a      	mov	sl, r3
 8003c96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c9a:	d807      	bhi.n	8003cac <_printf_i+0x28>
 8003c9c:	2f62      	cmp	r7, #98	; 0x62
 8003c9e:	d80a      	bhi.n	8003cb6 <_printf_i+0x32>
 8003ca0:	2f00      	cmp	r7, #0
 8003ca2:	f000 80d8 	beq.w	8003e56 <_printf_i+0x1d2>
 8003ca6:	2f58      	cmp	r7, #88	; 0x58
 8003ca8:	f000 80a3 	beq.w	8003df2 <_printf_i+0x16e>
 8003cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cb4:	e03a      	b.n	8003d2c <_printf_i+0xa8>
 8003cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cba:	2b15      	cmp	r3, #21
 8003cbc:	d8f6      	bhi.n	8003cac <_printf_i+0x28>
 8003cbe:	a101      	add	r1, pc, #4	; (adr r1, 8003cc4 <_printf_i+0x40>)
 8003cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cc4:	08003d1d 	.word	0x08003d1d
 8003cc8:	08003d31 	.word	0x08003d31
 8003ccc:	08003cad 	.word	0x08003cad
 8003cd0:	08003cad 	.word	0x08003cad
 8003cd4:	08003cad 	.word	0x08003cad
 8003cd8:	08003cad 	.word	0x08003cad
 8003cdc:	08003d31 	.word	0x08003d31
 8003ce0:	08003cad 	.word	0x08003cad
 8003ce4:	08003cad 	.word	0x08003cad
 8003ce8:	08003cad 	.word	0x08003cad
 8003cec:	08003cad 	.word	0x08003cad
 8003cf0:	08003e3d 	.word	0x08003e3d
 8003cf4:	08003d61 	.word	0x08003d61
 8003cf8:	08003e1f 	.word	0x08003e1f
 8003cfc:	08003cad 	.word	0x08003cad
 8003d00:	08003cad 	.word	0x08003cad
 8003d04:	08003e5f 	.word	0x08003e5f
 8003d08:	08003cad 	.word	0x08003cad
 8003d0c:	08003d61 	.word	0x08003d61
 8003d10:	08003cad 	.word	0x08003cad
 8003d14:	08003cad 	.word	0x08003cad
 8003d18:	08003e27 	.word	0x08003e27
 8003d1c:	682b      	ldr	r3, [r5, #0]
 8003d1e:	1d1a      	adds	r2, r3, #4
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	602a      	str	r2, [r5, #0]
 8003d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0a3      	b.n	8003e78 <_printf_i+0x1f4>
 8003d30:	6820      	ldr	r0, [r4, #0]
 8003d32:	6829      	ldr	r1, [r5, #0]
 8003d34:	0606      	lsls	r6, r0, #24
 8003d36:	f101 0304 	add.w	r3, r1, #4
 8003d3a:	d50a      	bpl.n	8003d52 <_printf_i+0xce>
 8003d3c:	680e      	ldr	r6, [r1, #0]
 8003d3e:	602b      	str	r3, [r5, #0]
 8003d40:	2e00      	cmp	r6, #0
 8003d42:	da03      	bge.n	8003d4c <_printf_i+0xc8>
 8003d44:	232d      	movs	r3, #45	; 0x2d
 8003d46:	4276      	negs	r6, r6
 8003d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d4c:	485e      	ldr	r0, [pc, #376]	; (8003ec8 <_printf_i+0x244>)
 8003d4e:	230a      	movs	r3, #10
 8003d50:	e019      	b.n	8003d86 <_printf_i+0x102>
 8003d52:	680e      	ldr	r6, [r1, #0]
 8003d54:	602b      	str	r3, [r5, #0]
 8003d56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d5a:	bf18      	it	ne
 8003d5c:	b236      	sxthne	r6, r6
 8003d5e:	e7ef      	b.n	8003d40 <_printf_i+0xbc>
 8003d60:	682b      	ldr	r3, [r5, #0]
 8003d62:	6820      	ldr	r0, [r4, #0]
 8003d64:	1d19      	adds	r1, r3, #4
 8003d66:	6029      	str	r1, [r5, #0]
 8003d68:	0601      	lsls	r1, r0, #24
 8003d6a:	d501      	bpl.n	8003d70 <_printf_i+0xec>
 8003d6c:	681e      	ldr	r6, [r3, #0]
 8003d6e:	e002      	b.n	8003d76 <_printf_i+0xf2>
 8003d70:	0646      	lsls	r6, r0, #25
 8003d72:	d5fb      	bpl.n	8003d6c <_printf_i+0xe8>
 8003d74:	881e      	ldrh	r6, [r3, #0]
 8003d76:	4854      	ldr	r0, [pc, #336]	; (8003ec8 <_printf_i+0x244>)
 8003d78:	2f6f      	cmp	r7, #111	; 0x6f
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2308      	moveq	r3, #8
 8003d7e:	230a      	movne	r3, #10
 8003d80:	2100      	movs	r1, #0
 8003d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d86:	6865      	ldr	r5, [r4, #4]
 8003d88:	60a5      	str	r5, [r4, #8]
 8003d8a:	2d00      	cmp	r5, #0
 8003d8c:	bfa2      	ittt	ge
 8003d8e:	6821      	ldrge	r1, [r4, #0]
 8003d90:	f021 0104 	bicge.w	r1, r1, #4
 8003d94:	6021      	strge	r1, [r4, #0]
 8003d96:	b90e      	cbnz	r6, 8003d9c <_printf_i+0x118>
 8003d98:	2d00      	cmp	r5, #0
 8003d9a:	d04d      	beq.n	8003e38 <_printf_i+0x1b4>
 8003d9c:	4615      	mov	r5, r2
 8003d9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003da2:	fb03 6711 	mls	r7, r3, r1, r6
 8003da6:	5dc7      	ldrb	r7, [r0, r7]
 8003da8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003dac:	4637      	mov	r7, r6
 8003dae:	42bb      	cmp	r3, r7
 8003db0:	460e      	mov	r6, r1
 8003db2:	d9f4      	bls.n	8003d9e <_printf_i+0x11a>
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d10b      	bne.n	8003dd0 <_printf_i+0x14c>
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	07de      	lsls	r6, r3, #31
 8003dbc:	d508      	bpl.n	8003dd0 <_printf_i+0x14c>
 8003dbe:	6923      	ldr	r3, [r4, #16]
 8003dc0:	6861      	ldr	r1, [r4, #4]
 8003dc2:	4299      	cmp	r1, r3
 8003dc4:	bfde      	ittt	le
 8003dc6:	2330      	movle	r3, #48	; 0x30
 8003dc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dcc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003dd0:	1b52      	subs	r2, r2, r5
 8003dd2:	6122      	str	r2, [r4, #16]
 8003dd4:	f8cd a000 	str.w	sl, [sp]
 8003dd8:	464b      	mov	r3, r9
 8003dda:	aa03      	add	r2, sp, #12
 8003ddc:	4621      	mov	r1, r4
 8003dde:	4640      	mov	r0, r8
 8003de0:	f7ff fee2 	bl	8003ba8 <_printf_common>
 8003de4:	3001      	adds	r0, #1
 8003de6:	d14c      	bne.n	8003e82 <_printf_i+0x1fe>
 8003de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dec:	b004      	add	sp, #16
 8003dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df2:	4835      	ldr	r0, [pc, #212]	; (8003ec8 <_printf_i+0x244>)
 8003df4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003df8:	6829      	ldr	r1, [r5, #0]
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e00:	6029      	str	r1, [r5, #0]
 8003e02:	061d      	lsls	r5, r3, #24
 8003e04:	d514      	bpl.n	8003e30 <_printf_i+0x1ac>
 8003e06:	07df      	lsls	r7, r3, #31
 8003e08:	bf44      	itt	mi
 8003e0a:	f043 0320 	orrmi.w	r3, r3, #32
 8003e0e:	6023      	strmi	r3, [r4, #0]
 8003e10:	b91e      	cbnz	r6, 8003e1a <_printf_i+0x196>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	f023 0320 	bic.w	r3, r3, #32
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	2310      	movs	r3, #16
 8003e1c:	e7b0      	b.n	8003d80 <_printf_i+0xfc>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	f043 0320 	orr.w	r3, r3, #32
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	2378      	movs	r3, #120	; 0x78
 8003e28:	4828      	ldr	r0, [pc, #160]	; (8003ecc <_printf_i+0x248>)
 8003e2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e2e:	e7e3      	b.n	8003df8 <_printf_i+0x174>
 8003e30:	0659      	lsls	r1, r3, #25
 8003e32:	bf48      	it	mi
 8003e34:	b2b6      	uxthmi	r6, r6
 8003e36:	e7e6      	b.n	8003e06 <_printf_i+0x182>
 8003e38:	4615      	mov	r5, r2
 8003e3a:	e7bb      	b.n	8003db4 <_printf_i+0x130>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	6826      	ldr	r6, [r4, #0]
 8003e40:	6961      	ldr	r1, [r4, #20]
 8003e42:	1d18      	adds	r0, r3, #4
 8003e44:	6028      	str	r0, [r5, #0]
 8003e46:	0635      	lsls	r5, r6, #24
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	d501      	bpl.n	8003e50 <_printf_i+0x1cc>
 8003e4c:	6019      	str	r1, [r3, #0]
 8003e4e:	e002      	b.n	8003e56 <_printf_i+0x1d2>
 8003e50:	0670      	lsls	r0, r6, #25
 8003e52:	d5fb      	bpl.n	8003e4c <_printf_i+0x1c8>
 8003e54:	8019      	strh	r1, [r3, #0]
 8003e56:	2300      	movs	r3, #0
 8003e58:	6123      	str	r3, [r4, #16]
 8003e5a:	4615      	mov	r5, r2
 8003e5c:	e7ba      	b.n	8003dd4 <_printf_i+0x150>
 8003e5e:	682b      	ldr	r3, [r5, #0]
 8003e60:	1d1a      	adds	r2, r3, #4
 8003e62:	602a      	str	r2, [r5, #0]
 8003e64:	681d      	ldr	r5, [r3, #0]
 8003e66:	6862      	ldr	r2, [r4, #4]
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f7fc f9d8 	bl	8000220 <memchr>
 8003e70:	b108      	cbz	r0, 8003e76 <_printf_i+0x1f2>
 8003e72:	1b40      	subs	r0, r0, r5
 8003e74:	6060      	str	r0, [r4, #4]
 8003e76:	6863      	ldr	r3, [r4, #4]
 8003e78:	6123      	str	r3, [r4, #16]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e80:	e7a8      	b.n	8003dd4 <_printf_i+0x150>
 8003e82:	6923      	ldr	r3, [r4, #16]
 8003e84:	462a      	mov	r2, r5
 8003e86:	4649      	mov	r1, r9
 8003e88:	4640      	mov	r0, r8
 8003e8a:	47d0      	blx	sl
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d0ab      	beq.n	8003de8 <_printf_i+0x164>
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	079b      	lsls	r3, r3, #30
 8003e94:	d413      	bmi.n	8003ebe <_printf_i+0x23a>
 8003e96:	68e0      	ldr	r0, [r4, #12]
 8003e98:	9b03      	ldr	r3, [sp, #12]
 8003e9a:	4298      	cmp	r0, r3
 8003e9c:	bfb8      	it	lt
 8003e9e:	4618      	movlt	r0, r3
 8003ea0:	e7a4      	b.n	8003dec <_printf_i+0x168>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	4632      	mov	r2, r6
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	4640      	mov	r0, r8
 8003eaa:	47d0      	blx	sl
 8003eac:	3001      	adds	r0, #1
 8003eae:	d09b      	beq.n	8003de8 <_printf_i+0x164>
 8003eb0:	3501      	adds	r5, #1
 8003eb2:	68e3      	ldr	r3, [r4, #12]
 8003eb4:	9903      	ldr	r1, [sp, #12]
 8003eb6:	1a5b      	subs	r3, r3, r1
 8003eb8:	42ab      	cmp	r3, r5
 8003eba:	dcf2      	bgt.n	8003ea2 <_printf_i+0x21e>
 8003ebc:	e7eb      	b.n	8003e96 <_printf_i+0x212>
 8003ebe:	2500      	movs	r5, #0
 8003ec0:	f104 0619 	add.w	r6, r4, #25
 8003ec4:	e7f5      	b.n	8003eb2 <_printf_i+0x22e>
 8003ec6:	bf00      	nop
 8003ec8:	080042c9 	.word	0x080042c9
 8003ecc:	080042da 	.word	0x080042da

08003ed0 <memcpy>:
 8003ed0:	440a      	add	r2, r1
 8003ed2:	4291      	cmp	r1, r2
 8003ed4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003ed8:	d100      	bne.n	8003edc <memcpy+0xc>
 8003eda:	4770      	bx	lr
 8003edc:	b510      	push	{r4, lr}
 8003ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ee6:	4291      	cmp	r1, r2
 8003ee8:	d1f9      	bne.n	8003ede <memcpy+0xe>
 8003eea:	bd10      	pop	{r4, pc}

08003eec <memmove>:
 8003eec:	4288      	cmp	r0, r1
 8003eee:	b510      	push	{r4, lr}
 8003ef0:	eb01 0402 	add.w	r4, r1, r2
 8003ef4:	d902      	bls.n	8003efc <memmove+0x10>
 8003ef6:	4284      	cmp	r4, r0
 8003ef8:	4623      	mov	r3, r4
 8003efa:	d807      	bhi.n	8003f0c <memmove+0x20>
 8003efc:	1e43      	subs	r3, r0, #1
 8003efe:	42a1      	cmp	r1, r4
 8003f00:	d008      	beq.n	8003f14 <memmove+0x28>
 8003f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f0a:	e7f8      	b.n	8003efe <memmove+0x12>
 8003f0c:	4402      	add	r2, r0
 8003f0e:	4601      	mov	r1, r0
 8003f10:	428a      	cmp	r2, r1
 8003f12:	d100      	bne.n	8003f16 <memmove+0x2a>
 8003f14:	bd10      	pop	{r4, pc}
 8003f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f1e:	e7f7      	b.n	8003f10 <memmove+0x24>

08003f20 <_free_r>:
 8003f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f22:	2900      	cmp	r1, #0
 8003f24:	d044      	beq.n	8003fb0 <_free_r+0x90>
 8003f26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f2a:	9001      	str	r0, [sp, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f1a1 0404 	sub.w	r4, r1, #4
 8003f32:	bfb8      	it	lt
 8003f34:	18e4      	addlt	r4, r4, r3
 8003f36:	f000 f913 	bl	8004160 <__malloc_lock>
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	; (8003fb4 <_free_r+0x94>)
 8003f3c:	9801      	ldr	r0, [sp, #4]
 8003f3e:	6813      	ldr	r3, [r2, #0]
 8003f40:	b933      	cbnz	r3, 8003f50 <_free_r+0x30>
 8003f42:	6063      	str	r3, [r4, #4]
 8003f44:	6014      	str	r4, [r2, #0]
 8003f46:	b003      	add	sp, #12
 8003f48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f4c:	f000 b90e 	b.w	800416c <__malloc_unlock>
 8003f50:	42a3      	cmp	r3, r4
 8003f52:	d908      	bls.n	8003f66 <_free_r+0x46>
 8003f54:	6825      	ldr	r5, [r4, #0]
 8003f56:	1961      	adds	r1, r4, r5
 8003f58:	428b      	cmp	r3, r1
 8003f5a:	bf01      	itttt	eq
 8003f5c:	6819      	ldreq	r1, [r3, #0]
 8003f5e:	685b      	ldreq	r3, [r3, #4]
 8003f60:	1949      	addeq	r1, r1, r5
 8003f62:	6021      	streq	r1, [r4, #0]
 8003f64:	e7ed      	b.n	8003f42 <_free_r+0x22>
 8003f66:	461a      	mov	r2, r3
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	b10b      	cbz	r3, 8003f70 <_free_r+0x50>
 8003f6c:	42a3      	cmp	r3, r4
 8003f6e:	d9fa      	bls.n	8003f66 <_free_r+0x46>
 8003f70:	6811      	ldr	r1, [r2, #0]
 8003f72:	1855      	adds	r5, r2, r1
 8003f74:	42a5      	cmp	r5, r4
 8003f76:	d10b      	bne.n	8003f90 <_free_r+0x70>
 8003f78:	6824      	ldr	r4, [r4, #0]
 8003f7a:	4421      	add	r1, r4
 8003f7c:	1854      	adds	r4, r2, r1
 8003f7e:	42a3      	cmp	r3, r4
 8003f80:	6011      	str	r1, [r2, #0]
 8003f82:	d1e0      	bne.n	8003f46 <_free_r+0x26>
 8003f84:	681c      	ldr	r4, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	6053      	str	r3, [r2, #4]
 8003f8a:	4421      	add	r1, r4
 8003f8c:	6011      	str	r1, [r2, #0]
 8003f8e:	e7da      	b.n	8003f46 <_free_r+0x26>
 8003f90:	d902      	bls.n	8003f98 <_free_r+0x78>
 8003f92:	230c      	movs	r3, #12
 8003f94:	6003      	str	r3, [r0, #0]
 8003f96:	e7d6      	b.n	8003f46 <_free_r+0x26>
 8003f98:	6825      	ldr	r5, [r4, #0]
 8003f9a:	1961      	adds	r1, r4, r5
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	bf04      	itt	eq
 8003fa0:	6819      	ldreq	r1, [r3, #0]
 8003fa2:	685b      	ldreq	r3, [r3, #4]
 8003fa4:	6063      	str	r3, [r4, #4]
 8003fa6:	bf04      	itt	eq
 8003fa8:	1949      	addeq	r1, r1, r5
 8003faa:	6021      	streq	r1, [r4, #0]
 8003fac:	6054      	str	r4, [r2, #4]
 8003fae:	e7ca      	b.n	8003f46 <_free_r+0x26>
 8003fb0:	b003      	add	sp, #12
 8003fb2:	bd30      	pop	{r4, r5, pc}
 8003fb4:	200000f8 	.word	0x200000f8

08003fb8 <sbrk_aligned>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	4e0e      	ldr	r6, [pc, #56]	; (8003ff4 <sbrk_aligned+0x3c>)
 8003fbc:	460c      	mov	r4, r1
 8003fbe:	6831      	ldr	r1, [r6, #0]
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	b911      	cbnz	r1, 8003fca <sbrk_aligned+0x12>
 8003fc4:	f000 f8bc 	bl	8004140 <_sbrk_r>
 8003fc8:	6030      	str	r0, [r6, #0]
 8003fca:	4621      	mov	r1, r4
 8003fcc:	4628      	mov	r0, r5
 8003fce:	f000 f8b7 	bl	8004140 <_sbrk_r>
 8003fd2:	1c43      	adds	r3, r0, #1
 8003fd4:	d00a      	beq.n	8003fec <sbrk_aligned+0x34>
 8003fd6:	1cc4      	adds	r4, r0, #3
 8003fd8:	f024 0403 	bic.w	r4, r4, #3
 8003fdc:	42a0      	cmp	r0, r4
 8003fde:	d007      	beq.n	8003ff0 <sbrk_aligned+0x38>
 8003fe0:	1a21      	subs	r1, r4, r0
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f000 f8ac 	bl	8004140 <_sbrk_r>
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d101      	bne.n	8003ff0 <sbrk_aligned+0x38>
 8003fec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	bd70      	pop	{r4, r5, r6, pc}
 8003ff4:	200000fc 	.word	0x200000fc

08003ff8 <_malloc_r>:
 8003ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffc:	1ccd      	adds	r5, r1, #3
 8003ffe:	f025 0503 	bic.w	r5, r5, #3
 8004002:	3508      	adds	r5, #8
 8004004:	2d0c      	cmp	r5, #12
 8004006:	bf38      	it	cc
 8004008:	250c      	movcc	r5, #12
 800400a:	2d00      	cmp	r5, #0
 800400c:	4607      	mov	r7, r0
 800400e:	db01      	blt.n	8004014 <_malloc_r+0x1c>
 8004010:	42a9      	cmp	r1, r5
 8004012:	d905      	bls.n	8004020 <_malloc_r+0x28>
 8004014:	230c      	movs	r3, #12
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	2600      	movs	r6, #0
 800401a:	4630      	mov	r0, r6
 800401c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004020:	4e2e      	ldr	r6, [pc, #184]	; (80040dc <_malloc_r+0xe4>)
 8004022:	f000 f89d 	bl	8004160 <__malloc_lock>
 8004026:	6833      	ldr	r3, [r6, #0]
 8004028:	461c      	mov	r4, r3
 800402a:	bb34      	cbnz	r4, 800407a <_malloc_r+0x82>
 800402c:	4629      	mov	r1, r5
 800402e:	4638      	mov	r0, r7
 8004030:	f7ff ffc2 	bl	8003fb8 <sbrk_aligned>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	4604      	mov	r4, r0
 8004038:	d14d      	bne.n	80040d6 <_malloc_r+0xde>
 800403a:	6834      	ldr	r4, [r6, #0]
 800403c:	4626      	mov	r6, r4
 800403e:	2e00      	cmp	r6, #0
 8004040:	d140      	bne.n	80040c4 <_malloc_r+0xcc>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	4631      	mov	r1, r6
 8004046:	4638      	mov	r0, r7
 8004048:	eb04 0803 	add.w	r8, r4, r3
 800404c:	f000 f878 	bl	8004140 <_sbrk_r>
 8004050:	4580      	cmp	r8, r0
 8004052:	d13a      	bne.n	80040ca <_malloc_r+0xd2>
 8004054:	6821      	ldr	r1, [r4, #0]
 8004056:	3503      	adds	r5, #3
 8004058:	1a6d      	subs	r5, r5, r1
 800405a:	f025 0503 	bic.w	r5, r5, #3
 800405e:	3508      	adds	r5, #8
 8004060:	2d0c      	cmp	r5, #12
 8004062:	bf38      	it	cc
 8004064:	250c      	movcc	r5, #12
 8004066:	4629      	mov	r1, r5
 8004068:	4638      	mov	r0, r7
 800406a:	f7ff ffa5 	bl	8003fb8 <sbrk_aligned>
 800406e:	3001      	adds	r0, #1
 8004070:	d02b      	beq.n	80040ca <_malloc_r+0xd2>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	442b      	add	r3, r5
 8004076:	6023      	str	r3, [r4, #0]
 8004078:	e00e      	b.n	8004098 <_malloc_r+0xa0>
 800407a:	6822      	ldr	r2, [r4, #0]
 800407c:	1b52      	subs	r2, r2, r5
 800407e:	d41e      	bmi.n	80040be <_malloc_r+0xc6>
 8004080:	2a0b      	cmp	r2, #11
 8004082:	d916      	bls.n	80040b2 <_malloc_r+0xba>
 8004084:	1961      	adds	r1, r4, r5
 8004086:	42a3      	cmp	r3, r4
 8004088:	6025      	str	r5, [r4, #0]
 800408a:	bf18      	it	ne
 800408c:	6059      	strne	r1, [r3, #4]
 800408e:	6863      	ldr	r3, [r4, #4]
 8004090:	bf08      	it	eq
 8004092:	6031      	streq	r1, [r6, #0]
 8004094:	5162      	str	r2, [r4, r5]
 8004096:	604b      	str	r3, [r1, #4]
 8004098:	4638      	mov	r0, r7
 800409a:	f104 060b 	add.w	r6, r4, #11
 800409e:	f000 f865 	bl	800416c <__malloc_unlock>
 80040a2:	f026 0607 	bic.w	r6, r6, #7
 80040a6:	1d23      	adds	r3, r4, #4
 80040a8:	1af2      	subs	r2, r6, r3
 80040aa:	d0b6      	beq.n	800401a <_malloc_r+0x22>
 80040ac:	1b9b      	subs	r3, r3, r6
 80040ae:	50a3      	str	r3, [r4, r2]
 80040b0:	e7b3      	b.n	800401a <_malloc_r+0x22>
 80040b2:	6862      	ldr	r2, [r4, #4]
 80040b4:	42a3      	cmp	r3, r4
 80040b6:	bf0c      	ite	eq
 80040b8:	6032      	streq	r2, [r6, #0]
 80040ba:	605a      	strne	r2, [r3, #4]
 80040bc:	e7ec      	b.n	8004098 <_malloc_r+0xa0>
 80040be:	4623      	mov	r3, r4
 80040c0:	6864      	ldr	r4, [r4, #4]
 80040c2:	e7b2      	b.n	800402a <_malloc_r+0x32>
 80040c4:	4634      	mov	r4, r6
 80040c6:	6876      	ldr	r6, [r6, #4]
 80040c8:	e7b9      	b.n	800403e <_malloc_r+0x46>
 80040ca:	230c      	movs	r3, #12
 80040cc:	603b      	str	r3, [r7, #0]
 80040ce:	4638      	mov	r0, r7
 80040d0:	f000 f84c 	bl	800416c <__malloc_unlock>
 80040d4:	e7a1      	b.n	800401a <_malloc_r+0x22>
 80040d6:	6025      	str	r5, [r4, #0]
 80040d8:	e7de      	b.n	8004098 <_malloc_r+0xa0>
 80040da:	bf00      	nop
 80040dc:	200000f8 	.word	0x200000f8

080040e0 <_realloc_r>:
 80040e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e4:	4680      	mov	r8, r0
 80040e6:	4614      	mov	r4, r2
 80040e8:	460e      	mov	r6, r1
 80040ea:	b921      	cbnz	r1, 80040f6 <_realloc_r+0x16>
 80040ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040f0:	4611      	mov	r1, r2
 80040f2:	f7ff bf81 	b.w	8003ff8 <_malloc_r>
 80040f6:	b92a      	cbnz	r2, 8004104 <_realloc_r+0x24>
 80040f8:	f7ff ff12 	bl	8003f20 <_free_r>
 80040fc:	4625      	mov	r5, r4
 80040fe:	4628      	mov	r0, r5
 8004100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004104:	f000 f838 	bl	8004178 <_malloc_usable_size_r>
 8004108:	4284      	cmp	r4, r0
 800410a:	4607      	mov	r7, r0
 800410c:	d802      	bhi.n	8004114 <_realloc_r+0x34>
 800410e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004112:	d812      	bhi.n	800413a <_realloc_r+0x5a>
 8004114:	4621      	mov	r1, r4
 8004116:	4640      	mov	r0, r8
 8004118:	f7ff ff6e 	bl	8003ff8 <_malloc_r>
 800411c:	4605      	mov	r5, r0
 800411e:	2800      	cmp	r0, #0
 8004120:	d0ed      	beq.n	80040fe <_realloc_r+0x1e>
 8004122:	42bc      	cmp	r4, r7
 8004124:	4622      	mov	r2, r4
 8004126:	4631      	mov	r1, r6
 8004128:	bf28      	it	cs
 800412a:	463a      	movcs	r2, r7
 800412c:	f7ff fed0 	bl	8003ed0 <memcpy>
 8004130:	4631      	mov	r1, r6
 8004132:	4640      	mov	r0, r8
 8004134:	f7ff fef4 	bl	8003f20 <_free_r>
 8004138:	e7e1      	b.n	80040fe <_realloc_r+0x1e>
 800413a:	4635      	mov	r5, r6
 800413c:	e7df      	b.n	80040fe <_realloc_r+0x1e>
	...

08004140 <_sbrk_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4d06      	ldr	r5, [pc, #24]	; (800415c <_sbrk_r+0x1c>)
 8004144:	2300      	movs	r3, #0
 8004146:	4604      	mov	r4, r0
 8004148:	4608      	mov	r0, r1
 800414a:	602b      	str	r3, [r5, #0]
 800414c:	f7fc fd58 	bl	8000c00 <_sbrk>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_sbrk_r+0x1a>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	b103      	cbz	r3, 800415a <_sbrk_r+0x1a>
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	20000100 	.word	0x20000100

08004160 <__malloc_lock>:
 8004160:	4801      	ldr	r0, [pc, #4]	; (8004168 <__malloc_lock+0x8>)
 8004162:	f000 b811 	b.w	8004188 <__retarget_lock_acquire_recursive>
 8004166:	bf00      	nop
 8004168:	20000104 	.word	0x20000104

0800416c <__malloc_unlock>:
 800416c:	4801      	ldr	r0, [pc, #4]	; (8004174 <__malloc_unlock+0x8>)
 800416e:	f000 b80c 	b.w	800418a <__retarget_lock_release_recursive>
 8004172:	bf00      	nop
 8004174:	20000104 	.word	0x20000104

08004178 <_malloc_usable_size_r>:
 8004178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800417c:	1f18      	subs	r0, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	bfbc      	itt	lt
 8004182:	580b      	ldrlt	r3, [r1, r0]
 8004184:	18c0      	addlt	r0, r0, r3
 8004186:	4770      	bx	lr

08004188 <__retarget_lock_acquire_recursive>:
 8004188:	4770      	bx	lr

0800418a <__retarget_lock_release_recursive>:
 800418a:	4770      	bx	lr

0800418c <_init>:
 800418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418e:	bf00      	nop
 8004190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004192:	bc08      	pop	{r3}
 8004194:	469e      	mov	lr, r3
 8004196:	4770      	bx	lr

08004198 <_fini>:
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419a:	bf00      	nop
 800419c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419e:	bc08      	pop	{r3}
 80041a0:	469e      	mov	lr, r3
 80041a2:	4770      	bx	lr
