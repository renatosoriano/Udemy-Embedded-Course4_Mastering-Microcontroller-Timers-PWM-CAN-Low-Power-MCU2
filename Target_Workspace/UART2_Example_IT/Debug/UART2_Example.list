
UART2_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015b0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001774  08001774  00011774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800179c  0800179c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800179c  0800179c  0001179c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017a4  080017a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017a4  080017a4  000117a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017a8  080017a8  000117a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080017ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000010  080017bc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080017bc  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007611  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011c2  00000000  00000000  00027651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c0  00000000  00000000  00028818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000558  00000000  00000000  00028dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020828  00000000  00000000  00029330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007663  00000000  00000000  00049b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6c40  00000000  00000000  000511bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117dfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001684  00000000  00000000  00117e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800175c 	.word	0x0800175c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	0800175c 	.word	0x0800175c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <SysTick_Handler>:
#include "main_app.h"
#include "stm32f4xx_hal.h"


void SysTick_Handler (void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800051c:	f000 f990 	bl	8000840 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000520:	f000 fabf 	bl	8000aa2 <HAL_SYSTICK_IRQHandler>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}

08000528 <main>:
UART_HandleTypeDef huart2;

char *user_data = "The application is running\r\n";

int main(void)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b09d      	sub	sp, #116	; 0x74
 800052c:	af00      	add	r7, sp, #0
	HAL_Init();
 800052e:	f000 f935 	bl	800079c <HAL_Init>
	SystemClockConfig();
 8000532:	f000 f847 	bl	80005c4 <SystemClockConfig>
	UART2_Init();
 8000536:	f000 f84d 	bl	80005d4 <UART2_Init>

	uint16_t len_of_data = strlen(user_data);
 800053a:	4b20      	ldr	r3, [pc, #128]	; (80005bc <main+0x94>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff fe60 	bl	8000204 <strlen>
 8000544:	4603      	mov	r3, r0
 8000546:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	HAL_UART_Transmit(&huart2,(uint8_t*)user_data,len_of_data,HAL_MAX_DELAY);
 800054a:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <main+0x94>)
 800054c:	6819      	ldr	r1, [r3, #0]
 800054e:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000556:	481a      	ldr	r0, [pc, #104]	; (80005c0 <main+0x98>)
 8000558:	f000 fcc5 	bl	8000ee6 <HAL_UART_Transmit>

	uint8_t rcvd_data;
	uint8_t data_buffer[100];
	uint32_t count=0;
 800055c:	2300      	movs	r3, #0
 800055e:	66fb      	str	r3, [r7, #108]	; 0x6c

	while(1)
	{
		HAL_UART_Receive(&huart2,&rcvd_data,1,HAL_MAX_DELAY);
 8000560:	f107 0169 	add.w	r1, r7, #105	; 0x69
 8000564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000568:	2201      	movs	r2, #1
 800056a:	4815      	ldr	r0, [pc, #84]	; (80005c0 <main+0x98>)
 800056c:	f000 fd4d 	bl	800100a <HAL_UART_Receive>
		if(rcvd_data == '\r')
 8000570:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000574:	2b0d      	cmp	r3, #13
 8000576:	d00f      	beq.n	8000598 <main+0x70>
		{
			break;
		}
		else
		{
			data_buffer[count++]= convert_to_capital(rcvd_data);
 8000578:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 800057c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800057e:	1c63      	adds	r3, r4, #1
 8000580:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000582:	4610      	mov	r0, r2
 8000584:	f000 f84c 	bl	8000620 <convert_to_capital>
 8000588:	4603      	mov	r3, r0
 800058a:	461a      	mov	r2, r3
 800058c:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8000590:	443b      	add	r3, r7
 8000592:	f803 2c6c 	strb.w	r2, [r3, #-108]
		HAL_UART_Receive(&huart2,&rcvd_data,1,HAL_MAX_DELAY);
 8000596:	e7e3      	b.n	8000560 <main+0x38>
			break;
 8000598:	bf00      	nop
		}
	}

	data_buffer[count++]= '\r';
 800059a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800059c:	1c5a      	adds	r2, r3, #1
 800059e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80005a0:	3370      	adds	r3, #112	; 0x70
 80005a2:	443b      	add	r3, r7
 80005a4:	220d      	movs	r2, #13
 80005a6:	f803 2c6c 	strb.w	r2, [r3, #-108]
	HAL_UART_Transmit(&huart2,data_buffer,count,HAL_MAX_DELAY);
 80005aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	1d39      	adds	r1, r7, #4
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <main+0x98>)
 80005b6:	f000 fc96 	bl	8000ee6 <HAL_UART_Transmit>

	while(1);
 80005ba:	e7fe      	b.n	80005ba <main+0x92>
 80005bc:	20000000 	.word	0x20000000
 80005c0:	2000002c 	.word	0x2000002c

080005c4 <SystemClockConfig>:
	return 0;
}


void SystemClockConfig(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0


}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <UART2_Init>:


void UART2_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <UART2_Init+0x44>)
 80005da:	4a10      	ldr	r2, [pc, #64]	; (800061c <UART2_Init+0x48>)
 80005dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <UART2_Init+0x44>)
 80005e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <UART2_Init+0x44>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <UART2_Init+0x44>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <UART2_Init+0x44>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <UART2_Init+0x44>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <UART2_Init+0x44>)
 8000600:	220c      	movs	r2, #12
 8000602:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <UART2_Init+0x44>)
 8000606:	f000 fc21 	bl	8000e4c <HAL_UART_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 8000610:	f000 f81b 	bl	800064a <Error_handler>
	}


}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000002c 	.word	0x2000002c
 800061c:	40004400 	.word	0x40004400

08000620 <convert_to_capital>:


uint8_t convert_to_capital(uint8_t data)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	if( data >= 'a' && data <= 'z')
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b60      	cmp	r3, #96	; 0x60
 800062e:	d905      	bls.n	800063c <convert_to_capital+0x1c>
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b7a      	cmp	r3, #122	; 0x7a
 8000634:	d802      	bhi.n	800063c <convert_to_capital+0x1c>
	{
		data = data - ( 'a'- 'A');
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	3b20      	subs	r3, #32
 800063a:	71fb      	strb	r3, [r7, #7]
	}

	return data;
 800063c:	79fb      	ldrb	r3, [r7, #7]

}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <Error_handler>:

void Error_handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
	while(1);
 800064e:	e7fe      	b.n	800064e <Error_handler+0x4>

08000650 <HAL_MspInit>:
 */

#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000654:	2003      	movs	r0, #3
 8000656:	f000 f9e3 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <HAL_MspInit+0x40>)
 800065c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800065e:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <HAL_MspInit+0x40>)
 8000660:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000664:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	f06f 000b 	mvn.w	r0, #11
 800066e:	f000 f9e2 	bl	8000a36 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	f06f 000a 	mvn.w	r0, #10
 800067a:	f000 f9dc 	bl	8000a36 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	f06f 0009 	mvn.w	r0, #9
 8000686:	f000 f9d6 	bl	8000a36 <HAL_NVIC_SetPriority>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <HAL_UART_MspInit>:


 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <HAL_UART_MspInit+0x88>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a1d      	ldr	r2, [pc, #116]	; (800071c <HAL_UART_MspInit+0x88>)
 80006a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <HAL_UART_MspInit+0x88>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <HAL_UART_MspInit+0x88>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c0:	4a16      	ldr	r2, [pc, #88]	; (800071c <HAL_UART_MspInit+0x88>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6313      	str	r3, [r2, #48]	; 0x30
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <HAL_UART_MspInit+0x88>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 80006d4:	2304      	movs	r3, #4
 80006d6:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 80006dc:	2301      	movs	r3, #1
 80006de:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 80006e4:	2307      	movs	r3, #7
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	480c      	ldr	r0, [pc, #48]	; (8000720 <HAL_UART_MspInit+0x8c>)
 80006f0:	f000 f9e4 	bl	8000abc <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80006f4:	2308      	movs	r3, #8
 80006f6:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	4808      	ldr	r0, [pc, #32]	; (8000720 <HAL_UART_MspInit+0x8c>)
 8000700:	f000 f9dc 	bl	8000abc <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000704:	2026      	movs	r0, #38	; 0x26
 8000706:	f000 f9b2 	bl	8000a6e <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 800070a:	2200      	movs	r2, #0
 800070c:	210f      	movs	r1, #15
 800070e:	2026      	movs	r0, #38	; 0x26
 8000710:	f000 f991 	bl	8000a36 <HAL_NVIC_SetPriority>

}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40020000 	.word	0x40020000

08000724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <SystemInit+0x20>)
 800072a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <SystemInit+0x20>)
 8000730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800074e:	490e      	ldr	r1, [pc, #56]	; (8000788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000750:	4a0e      	ldr	r2, [pc, #56]	; (800078c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000764:	4c0b      	ldr	r4, [pc, #44]	; (8000794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000772:	f7ff ffd7 	bl	8000724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000776:	f000 ffcd 	bl	8001714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800077a:	f7ff fed5 	bl	8000528 <main>
  bx  lr    
 800077e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800078c:	080017ac 	.word	0x080017ac
  ldr r2, =_sbss
 8000790:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000794:	20000074 	.word	0x20000074

08000798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC_IRQHandler>
	...

0800079c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_Init+0x40>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <HAL_Init+0x40>)
 80007a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <HAL_Init+0x40>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <HAL_Init+0x40>)
 80007b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_Init+0x40>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a07      	ldr	r2, [pc, #28]	; (80007dc <HAL_Init+0x40>)
 80007be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f92b 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ca:	200f      	movs	r0, #15
 80007cc:	f000 f808 	bl	80007e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d0:	f7ff ff3e 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023c00 	.word	0x40023c00

080007e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_InitTick+0x54>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_InitTick+0x58>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f943 	bl	8000a8a <HAL_SYSTICK_Config>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e00e      	b.n	800082c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d80a      	bhi.n	800082a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000814:	2200      	movs	r2, #0
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800081c:	f000 f90b 	bl	8000a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000820:	4a06      	ldr	r2, [pc, #24]	; (800083c <HAL_InitTick+0x5c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000004 	.word	0x20000004
 8000838:	2000000c 	.word	0x2000000c
 800083c:	20000008 	.word	0x20000008

08000840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_IncTick+0x20>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_IncTick+0x24>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <HAL_IncTick+0x24>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	2000000c 	.word	0x2000000c
 8000864:	20000070 	.word	0x20000070

08000868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return uwTick;
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <HAL_GetTick+0x14>)
 800086e:	681b      	ldr	r3, [r3, #0]
}
 8000870:	4618      	mov	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000070 	.word	0x20000070

08000880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b2:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	60d3      	str	r3, [r2, #12]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	f003 0307 	and.w	r3, r3, #7
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	db0b      	blt.n	800090e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f003 021f 	and.w	r2, r3, #31
 80008fc:	4907      	ldr	r1, [pc, #28]	; (800091c <__NVIC_EnableIRQ+0x38>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	095b      	lsrs	r3, r3, #5
 8000904:	2001      	movs	r0, #1
 8000906:	fa00 f202 	lsl.w	r2, r0, r2
 800090a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000e100 	.word	0xe000e100

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	db0a      	blt.n	800094a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	490c      	ldr	r1, [pc, #48]	; (800096c <__NVIC_SetPriority+0x4c>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	0112      	lsls	r2, r2, #4
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	440b      	add	r3, r1
 8000944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000948:	e00a      	b.n	8000960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4908      	ldr	r1, [pc, #32]	; (8000970 <__NVIC_SetPriority+0x50>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	3b04      	subs	r3, #4
 8000958:	0112      	lsls	r2, r2, #4
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	440b      	add	r3, r1
 800095e:	761a      	strb	r2, [r3, #24]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f1c3 0307 	rsb	r3, r3, #7
 800098e:	2b04      	cmp	r3, #4
 8000990:	bf28      	it	cs
 8000992:	2304      	movcs	r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3304      	adds	r3, #4
 800099a:	2b06      	cmp	r3, #6
 800099c:	d902      	bls.n	80009a4 <NVIC_EncodePriority+0x30>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3b03      	subs	r3, #3
 80009a2:	e000      	b.n	80009a6 <NVIC_EncodePriority+0x32>
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43da      	mvns	r2, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43d9      	mvns	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	4313      	orrs	r3, r2
         );
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3724      	adds	r7, #36	; 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009ec:	d301      	bcc.n	80009f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00f      	b.n	8000a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <SysTick_Config+0x40>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fa:	210f      	movs	r1, #15
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a00:	f7ff ff8e 	bl	8000920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <SysTick_Config+0x40>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <SysTick_Config+0x40>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff29 	bl	8000880 <__NVIC_SetPriorityGrouping>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a48:	f7ff ff3e 	bl	80008c8 <__NVIC_GetPriorityGrouping>
 8000a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff ff8e 	bl	8000974 <NVIC_EncodePriority>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff5d 	bl	8000920 <__NVIC_SetPriority>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff31 	bl	80008e4 <__NVIC_EnableIRQ>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ffa2 	bl	80009dc <SysTick_Config>
 8000a98:	4603      	mov	r3, r0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000aa6:	f000 f802 	bl	8000aae <HAL_SYSTICK_Callback>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	; 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
 8000ad6:	e165      	b.n	8000da4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ad8:	2201      	movs	r2, #1
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	f040 8154 	bne.w	8000d9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f003 0303 	and.w	r3, r3, #3
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d005      	beq.n	8000b0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d130      	bne.n	8000b70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	2203      	movs	r2, #3
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	4013      	ands	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b44:	2201      	movs	r2, #1
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	4013      	ands	r3, r2
 8000b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	091b      	lsrs	r3, r3, #4
 8000b5a:	f003 0201 	and.w	r2, r3, #1
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d017      	beq.n	8000bac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	2203      	movs	r2, #3
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	4013      	ands	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d123      	bne.n	8000c00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	08da      	lsrs	r2, r3, #3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3208      	adds	r2, #8
 8000bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	220f      	movs	r2, #15
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	08da      	lsrs	r2, r3, #3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3208      	adds	r2, #8
 8000bfa:	69b9      	ldr	r1, [r7, #24]
 8000bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	4013      	ands	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0203 	and.w	r2, r3, #3
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f000 80ae 	beq.w	8000d9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b5d      	ldr	r3, [pc, #372]	; (8000dbc <HAL_GPIO_Init+0x300>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a5c      	ldr	r2, [pc, #368]	; (8000dbc <HAL_GPIO_Init+0x300>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b5a      	ldr	r3, [pc, #360]	; (8000dbc <HAL_GPIO_Init+0x300>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c5e:	4a58      	ldr	r2, [pc, #352]	; (8000dc0 <HAL_GPIO_Init+0x304>)
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3302      	adds	r3, #2
 8000c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f003 0303 	and.w	r3, r3, #3
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	220f      	movs	r2, #15
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a4f      	ldr	r2, [pc, #316]	; (8000dc4 <HAL_GPIO_Init+0x308>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d025      	beq.n	8000cd6 <HAL_GPIO_Init+0x21a>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a4e      	ldr	r2, [pc, #312]	; (8000dc8 <HAL_GPIO_Init+0x30c>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d01f      	beq.n	8000cd2 <HAL_GPIO_Init+0x216>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a4d      	ldr	r2, [pc, #308]	; (8000dcc <HAL_GPIO_Init+0x310>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d019      	beq.n	8000cce <HAL_GPIO_Init+0x212>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a4c      	ldr	r2, [pc, #304]	; (8000dd0 <HAL_GPIO_Init+0x314>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d013      	beq.n	8000cca <HAL_GPIO_Init+0x20e>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a4b      	ldr	r2, [pc, #300]	; (8000dd4 <HAL_GPIO_Init+0x318>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d00d      	beq.n	8000cc6 <HAL_GPIO_Init+0x20a>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a4a      	ldr	r2, [pc, #296]	; (8000dd8 <HAL_GPIO_Init+0x31c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d007      	beq.n	8000cc2 <HAL_GPIO_Init+0x206>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a49      	ldr	r2, [pc, #292]	; (8000ddc <HAL_GPIO_Init+0x320>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d101      	bne.n	8000cbe <HAL_GPIO_Init+0x202>
 8000cba:	2306      	movs	r3, #6
 8000cbc:	e00c      	b.n	8000cd8 <HAL_GPIO_Init+0x21c>
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	e00a      	b.n	8000cd8 <HAL_GPIO_Init+0x21c>
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	e008      	b.n	8000cd8 <HAL_GPIO_Init+0x21c>
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	e006      	b.n	8000cd8 <HAL_GPIO_Init+0x21c>
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e004      	b.n	8000cd8 <HAL_GPIO_Init+0x21c>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e002      	b.n	8000cd8 <HAL_GPIO_Init+0x21c>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e000      	b.n	8000cd8 <HAL_GPIO_Init+0x21c>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	69fa      	ldr	r2, [r7, #28]
 8000cda:	f002 0203 	and.w	r2, r2, #3
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	4093      	lsls	r3, r2
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ce8:	4935      	ldr	r1, [pc, #212]	; (8000dc0 <HAL_GPIO_Init+0x304>)
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	3302      	adds	r3, #2
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <HAL_GPIO_Init+0x324>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d1a:	4a31      	ldr	r2, [pc, #196]	; (8000de0 <HAL_GPIO_Init+0x324>)
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <HAL_GPIO_Init+0x324>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d44:	4a26      	ldr	r2, [pc, #152]	; (8000de0 <HAL_GPIO_Init+0x324>)
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d4a:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <HAL_GPIO_Init+0x324>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <HAL_GPIO_Init+0x324>)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <HAL_GPIO_Init+0x324>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d98:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <HAL_GPIO_Init+0x324>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3301      	adds	r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	2b0f      	cmp	r3, #15
 8000da8:	f67f ae96 	bls.w	8000ad8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40013800 	.word	0x40013800
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	40020c00 	.word	0x40020c00
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40021400 	.word	0x40021400
 8000ddc:	40021800 	.word	0x40021800
 8000de0:	40013c00 	.word	0x40013c00

08000de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000004 	.word	0x20000004

08000dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e00:	f7ff fff0 	bl	8000de4 <HAL_RCC_GetHCLKFreq>
 8000e04:	4602      	mov	r2, r0
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	0a9b      	lsrs	r3, r3, #10
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	4903      	ldr	r1, [pc, #12]	; (8000e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e12:	5ccb      	ldrb	r3, [r1, r3]
 8000e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	08001794 	.word	0x08001794

08000e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e28:	f7ff ffdc 	bl	8000de4 <HAL_RCC_GetHCLKFreq>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	0b5b      	lsrs	r3, r3, #13
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	4903      	ldr	r1, [pc, #12]	; (8000e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e3a:	5ccb      	ldrb	r3, [r1, r3]
 8000e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	08001794 	.word	0x08001794

08000e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e03f      	b.n	8000ede <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d106      	bne.n	8000e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff fc0e 	bl	8000694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2224      	movs	r2, #36	; 0x24
 8000e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 f9cb 	bl	800122c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	695a      	ldr	r2, [r3, #20]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2220      	movs	r2, #32
 8000ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b08a      	sub	sp, #40	; 0x28
 8000eea:	af02      	add	r7, sp, #8
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b20      	cmp	r3, #32
 8000f04:	d17c      	bne.n	8001000 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <HAL_UART_Transmit+0x2c>
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e075      	b.n	8001002 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d101      	bne.n	8000f24 <HAL_UART_Transmit+0x3e>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e06e      	b.n	8001002 <HAL_UART_Transmit+0x11c>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2221      	movs	r2, #33	; 0x21
 8000f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000f3a:	f7ff fc95 	bl	8000868 <HAL_GetTick>
 8000f3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	88fa      	ldrh	r2, [r7, #6]
 8000f44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	88fa      	ldrh	r2, [r7, #6]
 8000f4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f54:	d108      	bne.n	8000f68 <HAL_UART_Transmit+0x82>
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d104      	bne.n	8000f68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	e003      	b.n	8000f70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8000f78:	e02a      	b.n	8000fd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2200      	movs	r2, #0
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f000 f8e2 	bl	800114e <UART_WaitOnFlagUntilTimeout>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e036      	b.n	8001002 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10b      	bne.n	8000fb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	3302      	adds	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	e007      	b.n	8000fc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	781a      	ldrb	r2, [r3, #0]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1cf      	bne.n	8000f7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2140      	movs	r1, #64	; 0x40
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f000 f8b2 	bl	800114e <UART_WaitOnFlagUntilTimeout>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e006      	b.n	8001002 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e000      	b.n	8001002 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001000:	2302      	movs	r3, #2
  }
}
 8001002:	4618      	mov	r0, r3
 8001004:	3720      	adds	r7, #32
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b08a      	sub	sp, #40	; 0x28
 800100e:	af02      	add	r7, sp, #8
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4613      	mov	r3, r2
 8001018:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b20      	cmp	r3, #32
 8001028:	f040 808c 	bne.w	8001144 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <HAL_UART_Receive+0x2e>
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e084      	b.n	8001146 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001042:	2b01      	cmp	r3, #1
 8001044:	d101      	bne.n	800104a <HAL_UART_Receive+0x40>
 8001046:	2302      	movs	r3, #2
 8001048:	e07d      	b.n	8001146 <HAL_UART_Receive+0x13c>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2201      	movs	r2, #1
 800104e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2222      	movs	r2, #34	; 0x22
 800105c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001066:	f7ff fbff 	bl	8000868 <HAL_GetTick>
 800106a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	88fa      	ldrh	r2, [r7, #6]
 8001070:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	88fa      	ldrh	r2, [r7, #6]
 8001076:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001080:	d108      	bne.n	8001094 <HAL_UART_Receive+0x8a>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d104      	bne.n	8001094 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	e003      	b.n	800109c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80010a4:	e043      	b.n	800112e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	2200      	movs	r2, #0
 80010ae:	2120      	movs	r1, #32
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f000 f84c 	bl	800114e <UART_WaitOnFlagUntilTimeout>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e042      	b.n	8001146 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10c      	bne.n	80010e0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	3302      	adds	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	e01f      	b.n	8001120 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010e8:	d007      	beq.n	80010fa <HAL_UART_Receive+0xf0>
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10a      	bne.n	8001108 <HAL_UART_Receive+0xfe>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d106      	bne.n	8001108 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e008      	b.n	800111a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001114:	b2da      	uxtb	r2, r3
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001124:	b29b      	uxth	r3, r3
 8001126:	3b01      	subs	r3, #1
 8001128:	b29a      	uxth	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001132:	b29b      	uxth	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1b6      	bne.n	80010a6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2220      	movs	r2, #32
 800113c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	e000      	b.n	8001146 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001144:	2302      	movs	r3, #2
  }
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b090      	sub	sp, #64	; 0x40
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	4613      	mov	r3, r2
 800115c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800115e:	e050      	b.n	8001202 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001166:	d04c      	beq.n	8001202 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <UART_WaitOnFlagUntilTimeout+0x30>
 800116e:	f7ff fb7b 	bl	8000868 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800117a:	429a      	cmp	r2, r3
 800117c:	d241      	bcs.n	8001202 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	330c      	adds	r3, #12
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001188:	e853 3f00 	ldrex	r3, [r3]
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	330c      	adds	r3, #12
 800119c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800119e:	637a      	str	r2, [r7, #52]	; 0x34
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011a6:	e841 2300 	strex	r3, r2, [r1]
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80011ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1e5      	bne.n	800117e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3314      	adds	r3, #20
 80011b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	e853 3f00 	ldrex	r3, [r3]
 80011c0:	613b      	str	r3, [r7, #16]
   return(result);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	f023 0301 	bic.w	r3, r3, #1
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3314      	adds	r3, #20
 80011d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011d2:	623a      	str	r2, [r7, #32]
 80011d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011d6:	69f9      	ldr	r1, [r7, #28]
 80011d8:	6a3a      	ldr	r2, [r7, #32]
 80011da:	e841 2300 	strex	r3, r2, [r1]
 80011de:	61bb      	str	r3, [r7, #24]
   return(result);
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1e5      	bne.n	80011b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2220      	movs	r2, #32
 80011ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2220      	movs	r2, #32
 80011f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e00f      	b.n	8001222 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4013      	ands	r3, r2
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	429a      	cmp	r2, r3
 8001210:	bf0c      	ite	eq
 8001212:	2301      	moveq	r3, #1
 8001214:	2300      	movne	r3, #0
 8001216:	b2db      	uxtb	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	429a      	cmp	r2, r3
 800121e:	d09f      	beq.n	8001160 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3740      	adds	r7, #64	; 0x40
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800122c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001230:	b0c0      	sub	sp, #256	; 0x100
 8001232:	af00      	add	r7, sp, #0
 8001234:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001248:	68d9      	ldr	r1, [r3, #12]
 800124a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	ea40 0301 	orr.w	r3, r0, r1
 8001254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	431a      	orrs	r2, r3
 8001264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	431a      	orrs	r2, r3
 800126c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4313      	orrs	r3, r2
 8001274:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001284:	f021 010c 	bic.w	r1, r1, #12
 8001288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001292:	430b      	orrs	r3, r1
 8001294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80012a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012a6:	6999      	ldr	r1, [r3, #24]
 80012a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	ea40 0301 	orr.w	r3, r0, r1
 80012b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80012b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b8f      	ldr	r3, [pc, #572]	; (80014f8 <UART_SetConfig+0x2cc>)
 80012bc:	429a      	cmp	r2, r3
 80012be:	d005      	beq.n	80012cc <UART_SetConfig+0xa0>
 80012c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b8d      	ldr	r3, [pc, #564]	; (80014fc <UART_SetConfig+0x2d0>)
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d104      	bne.n	80012d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80012cc:	f7ff fdaa 	bl	8000e24 <HAL_RCC_GetPCLK2Freq>
 80012d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80012d4:	e003      	b.n	80012de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80012d6:	f7ff fd91 	bl	8000dfc <HAL_RCC_GetPCLK1Freq>
 80012da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012e8:	f040 810c 	bne.w	8001504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80012ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012f0:	2200      	movs	r2, #0
 80012f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80012f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80012fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80012fe:	4622      	mov	r2, r4
 8001300:	462b      	mov	r3, r5
 8001302:	1891      	adds	r1, r2, r2
 8001304:	65b9      	str	r1, [r7, #88]	; 0x58
 8001306:	415b      	adcs	r3, r3
 8001308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800130a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800130e:	4621      	mov	r1, r4
 8001310:	eb12 0801 	adds.w	r8, r2, r1
 8001314:	4629      	mov	r1, r5
 8001316:	eb43 0901 	adc.w	r9, r3, r1
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800132a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800132e:	4690      	mov	r8, r2
 8001330:	4699      	mov	r9, r3
 8001332:	4623      	mov	r3, r4
 8001334:	eb18 0303 	adds.w	r3, r8, r3
 8001338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800133c:	462b      	mov	r3, r5
 800133e:	eb49 0303 	adc.w	r3, r9, r3
 8001342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001352:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800135a:	460b      	mov	r3, r1
 800135c:	18db      	adds	r3, r3, r3
 800135e:	653b      	str	r3, [r7, #80]	; 0x50
 8001360:	4613      	mov	r3, r2
 8001362:	eb42 0303 	adc.w	r3, r2, r3
 8001366:	657b      	str	r3, [r7, #84]	; 0x54
 8001368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800136c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001370:	f7fe ff50 	bl	8000214 <__aeabi_uldivmod>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4b61      	ldr	r3, [pc, #388]	; (8001500 <UART_SetConfig+0x2d4>)
 800137a:	fba3 2302 	umull	r2, r3, r3, r2
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	011c      	lsls	r4, r3, #4
 8001382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001386:	2200      	movs	r2, #0
 8001388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800138c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001394:	4642      	mov	r2, r8
 8001396:	464b      	mov	r3, r9
 8001398:	1891      	adds	r1, r2, r2
 800139a:	64b9      	str	r1, [r7, #72]	; 0x48
 800139c:	415b      	adcs	r3, r3
 800139e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80013a4:	4641      	mov	r1, r8
 80013a6:	eb12 0a01 	adds.w	sl, r2, r1
 80013aa:	4649      	mov	r1, r9
 80013ac:	eb43 0b01 	adc.w	fp, r3, r1
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80013bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80013c4:	4692      	mov	sl, r2
 80013c6:	469b      	mov	fp, r3
 80013c8:	4643      	mov	r3, r8
 80013ca:	eb1a 0303 	adds.w	r3, sl, r3
 80013ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80013d2:	464b      	mov	r3, r9
 80013d4:	eb4b 0303 	adc.w	r3, fp, r3
 80013d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80013dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80013ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80013f0:	460b      	mov	r3, r1
 80013f2:	18db      	adds	r3, r3, r3
 80013f4:	643b      	str	r3, [r7, #64]	; 0x40
 80013f6:	4613      	mov	r3, r2
 80013f8:	eb42 0303 	adc.w	r3, r2, r3
 80013fc:	647b      	str	r3, [r7, #68]	; 0x44
 80013fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001406:	f7fe ff05 	bl	8000214 <__aeabi_uldivmod>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4611      	mov	r1, r2
 8001410:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <UART_SetConfig+0x2d4>)
 8001412:	fba3 2301 	umull	r2, r3, r3, r1
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2264      	movs	r2, #100	; 0x64
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	1acb      	subs	r3, r1, r3
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001426:	4b36      	ldr	r3, [pc, #216]	; (8001500 <UART_SetConfig+0x2d4>)
 8001428:	fba3 2302 	umull	r2, r3, r3, r2
 800142c:	095b      	lsrs	r3, r3, #5
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001434:	441c      	add	r4, r3
 8001436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800143a:	2200      	movs	r2, #0
 800143c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001440:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001448:	4642      	mov	r2, r8
 800144a:	464b      	mov	r3, r9
 800144c:	1891      	adds	r1, r2, r2
 800144e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001450:	415b      	adcs	r3, r3
 8001452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001458:	4641      	mov	r1, r8
 800145a:	1851      	adds	r1, r2, r1
 800145c:	6339      	str	r1, [r7, #48]	; 0x30
 800145e:	4649      	mov	r1, r9
 8001460:	414b      	adcs	r3, r1
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001470:	4659      	mov	r1, fp
 8001472:	00cb      	lsls	r3, r1, #3
 8001474:	4651      	mov	r1, sl
 8001476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800147a:	4651      	mov	r1, sl
 800147c:	00ca      	lsls	r2, r1, #3
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	4603      	mov	r3, r0
 8001484:	4642      	mov	r2, r8
 8001486:	189b      	adds	r3, r3, r2
 8001488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800148c:	464b      	mov	r3, r9
 800148e:	460a      	mov	r2, r1
 8001490:	eb42 0303 	adc.w	r3, r2, r3
 8001494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80014a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80014a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80014ac:	460b      	mov	r3, r1
 80014ae:	18db      	adds	r3, r3, r3
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80014b2:	4613      	mov	r3, r2
 80014b4:	eb42 0303 	adc.w	r3, r2, r3
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80014c2:	f7fe fea7 	bl	8000214 <__aeabi_uldivmod>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <UART_SetConfig+0x2d4>)
 80014cc:	fba3 1302 	umull	r1, r3, r3, r2
 80014d0:	095b      	lsrs	r3, r3, #5
 80014d2:	2164      	movs	r1, #100	; 0x64
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	3332      	adds	r3, #50	; 0x32
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <UART_SetConfig+0x2d4>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	095b      	lsrs	r3, r3, #5
 80014e6:	f003 0207 	and.w	r2, r3, #7
 80014ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4422      	add	r2, r4
 80014f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80014f4:	e105      	b.n	8001702 <UART_SetConfig+0x4d6>
 80014f6:	bf00      	nop
 80014f8:	40011000 	.word	0x40011000
 80014fc:	40011400 	.word	0x40011400
 8001500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001508:	2200      	movs	r2, #0
 800150a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800150e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001516:	4642      	mov	r2, r8
 8001518:	464b      	mov	r3, r9
 800151a:	1891      	adds	r1, r2, r2
 800151c:	6239      	str	r1, [r7, #32]
 800151e:	415b      	adcs	r3, r3
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
 8001522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001526:	4641      	mov	r1, r8
 8001528:	1854      	adds	r4, r2, r1
 800152a:	4649      	mov	r1, r9
 800152c:	eb43 0501 	adc.w	r5, r3, r1
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	00eb      	lsls	r3, r5, #3
 800153a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800153e:	00e2      	lsls	r2, r4, #3
 8001540:	4614      	mov	r4, r2
 8001542:	461d      	mov	r5, r3
 8001544:	4643      	mov	r3, r8
 8001546:	18e3      	adds	r3, r4, r3
 8001548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800154c:	464b      	mov	r3, r9
 800154e:	eb45 0303 	adc.w	r3, r5, r3
 8001552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001562:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001572:	4629      	mov	r1, r5
 8001574:	008b      	lsls	r3, r1, #2
 8001576:	4621      	mov	r1, r4
 8001578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800157c:	4621      	mov	r1, r4
 800157e:	008a      	lsls	r2, r1, #2
 8001580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001584:	f7fe fe46 	bl	8000214 <__aeabi_uldivmod>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4b60      	ldr	r3, [pc, #384]	; (8001710 <UART_SetConfig+0x4e4>)
 800158e:	fba3 2302 	umull	r2, r3, r3, r2
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	011c      	lsls	r4, r3, #4
 8001596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800159a:	2200      	movs	r2, #0
 800159c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80015a8:	4642      	mov	r2, r8
 80015aa:	464b      	mov	r3, r9
 80015ac:	1891      	adds	r1, r2, r2
 80015ae:	61b9      	str	r1, [r7, #24]
 80015b0:	415b      	adcs	r3, r3
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015b8:	4641      	mov	r1, r8
 80015ba:	1851      	adds	r1, r2, r1
 80015bc:	6139      	str	r1, [r7, #16]
 80015be:	4649      	mov	r1, r9
 80015c0:	414b      	adcs	r3, r1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80015d0:	4659      	mov	r1, fp
 80015d2:	00cb      	lsls	r3, r1, #3
 80015d4:	4651      	mov	r1, sl
 80015d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015da:	4651      	mov	r1, sl
 80015dc:	00ca      	lsls	r2, r1, #3
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	4603      	mov	r3, r0
 80015e4:	4642      	mov	r2, r8
 80015e6:	189b      	adds	r3, r3, r2
 80015e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015ec:	464b      	mov	r3, r9
 80015ee:	460a      	mov	r2, r1
 80015f0:	eb42 0303 	adc.w	r3, r2, r3
 80015f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80015f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	67bb      	str	r3, [r7, #120]	; 0x78
 8001602:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001610:	4649      	mov	r1, r9
 8001612:	008b      	lsls	r3, r1, #2
 8001614:	4641      	mov	r1, r8
 8001616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800161a:	4641      	mov	r1, r8
 800161c:	008a      	lsls	r2, r1, #2
 800161e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001622:	f7fe fdf7 	bl	8000214 <__aeabi_uldivmod>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4b39      	ldr	r3, [pc, #228]	; (8001710 <UART_SetConfig+0x4e4>)
 800162c:	fba3 1302 	umull	r1, r3, r3, r2
 8001630:	095b      	lsrs	r3, r3, #5
 8001632:	2164      	movs	r1, #100	; 0x64
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	3332      	adds	r3, #50	; 0x32
 800163e:	4a34      	ldr	r2, [pc, #208]	; (8001710 <UART_SetConfig+0x4e4>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	095b      	lsrs	r3, r3, #5
 8001646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800164a:	441c      	add	r4, r3
 800164c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001650:	2200      	movs	r2, #0
 8001652:	673b      	str	r3, [r7, #112]	; 0x70
 8001654:	677a      	str	r2, [r7, #116]	; 0x74
 8001656:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800165a:	4642      	mov	r2, r8
 800165c:	464b      	mov	r3, r9
 800165e:	1891      	adds	r1, r2, r2
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	415b      	adcs	r3, r3
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800166a:	4641      	mov	r1, r8
 800166c:	1851      	adds	r1, r2, r1
 800166e:	6039      	str	r1, [r7, #0]
 8001670:	4649      	mov	r1, r9
 8001672:	414b      	adcs	r3, r1
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001682:	4659      	mov	r1, fp
 8001684:	00cb      	lsls	r3, r1, #3
 8001686:	4651      	mov	r1, sl
 8001688:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800168c:	4651      	mov	r1, sl
 800168e:	00ca      	lsls	r2, r1, #3
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	4603      	mov	r3, r0
 8001696:	4642      	mov	r2, r8
 8001698:	189b      	adds	r3, r3, r2
 800169a:	66bb      	str	r3, [r7, #104]	; 0x68
 800169c:	464b      	mov	r3, r9
 800169e:	460a      	mov	r2, r1
 80016a0:	eb42 0303 	adc.w	r3, r2, r3
 80016a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80016a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	663b      	str	r3, [r7, #96]	; 0x60
 80016b0:	667a      	str	r2, [r7, #100]	; 0x64
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80016be:	4649      	mov	r1, r9
 80016c0:	008b      	lsls	r3, r1, #2
 80016c2:	4641      	mov	r1, r8
 80016c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016c8:	4641      	mov	r1, r8
 80016ca:	008a      	lsls	r2, r1, #2
 80016cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80016d0:	f7fe fda0 	bl	8000214 <__aeabi_uldivmod>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <UART_SetConfig+0x4e4>)
 80016da:	fba3 1302 	umull	r1, r3, r3, r2
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2164      	movs	r1, #100	; 0x64
 80016e2:	fb01 f303 	mul.w	r3, r1, r3
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	3332      	adds	r3, #50	; 0x32
 80016ec:	4a08      	ldr	r2, [pc, #32]	; (8001710 <UART_SetConfig+0x4e4>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	f003 020f 	and.w	r2, r3, #15
 80016f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4422      	add	r2, r4
 8001700:	609a      	str	r2, [r3, #8]
}
 8001702:	bf00      	nop
 8001704:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001708:	46bd      	mov	sp, r7
 800170a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800170e:	bf00      	nop
 8001710:	51eb851f 	.word	0x51eb851f

08001714 <__libc_init_array>:
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	4d0d      	ldr	r5, [pc, #52]	; (800174c <__libc_init_array+0x38>)
 8001718:	4c0d      	ldr	r4, [pc, #52]	; (8001750 <__libc_init_array+0x3c>)
 800171a:	1b64      	subs	r4, r4, r5
 800171c:	10a4      	asrs	r4, r4, #2
 800171e:	2600      	movs	r6, #0
 8001720:	42a6      	cmp	r6, r4
 8001722:	d109      	bne.n	8001738 <__libc_init_array+0x24>
 8001724:	4d0b      	ldr	r5, [pc, #44]	; (8001754 <__libc_init_array+0x40>)
 8001726:	4c0c      	ldr	r4, [pc, #48]	; (8001758 <__libc_init_array+0x44>)
 8001728:	f000 f818 	bl	800175c <_init>
 800172c:	1b64      	subs	r4, r4, r5
 800172e:	10a4      	asrs	r4, r4, #2
 8001730:	2600      	movs	r6, #0
 8001732:	42a6      	cmp	r6, r4
 8001734:	d105      	bne.n	8001742 <__libc_init_array+0x2e>
 8001736:	bd70      	pop	{r4, r5, r6, pc}
 8001738:	f855 3b04 	ldr.w	r3, [r5], #4
 800173c:	4798      	blx	r3
 800173e:	3601      	adds	r6, #1
 8001740:	e7ee      	b.n	8001720 <__libc_init_array+0xc>
 8001742:	f855 3b04 	ldr.w	r3, [r5], #4
 8001746:	4798      	blx	r3
 8001748:	3601      	adds	r6, #1
 800174a:	e7f2      	b.n	8001732 <__libc_init_array+0x1e>
 800174c:	080017a4 	.word	0x080017a4
 8001750:	080017a4 	.word	0x080017a4
 8001754:	080017a4 	.word	0x080017a4
 8001758:	080017a8 	.word	0x080017a8

0800175c <_init>:
 800175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175e:	bf00      	nop
 8001760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001762:	bc08      	pop	{r3}
 8001764:	469e      	mov	lr, r3
 8001766:	4770      	bx	lr

08001768 <_fini>:
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	bf00      	nop
 800176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176e:	bc08      	pop	{r3}
 8001770:	469e      	mov	lr, r3
 8001772:	4770      	bx	lr
